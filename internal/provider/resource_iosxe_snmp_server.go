// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
)

type resourceSNMPServerType struct{}

func (t resourceSNMPServerType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This resource can manage the SNMP Server configuration.",

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The path of the object.",
				Type:                types.StringType,
				Computed:            true,
				PlanModifiers: tfsdk.AttributePlanModifiers{
					tfsdk.UseStateForUnknown(),
				},
			},
			"chassis_id": {
				MarkdownDescription: helpers.NewAttributeDescription("String to uniquely identify this chassis").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"contact": {
				MarkdownDescription: helpers.NewAttributeDescription("Text for mib object sysContact").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"ifindex_persist": {
				MarkdownDescription: helpers.NewAttributeDescription("Persist interface indices").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"location": {
				MarkdownDescription: helpers.NewAttributeDescription("Text for mib object sysLocation").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"packetsize": {
				MarkdownDescription: helpers.NewAttributeDescription("Largest SNMP packet size").AddIntegerRangeDescription(484, 17892).String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(484, 17892),
				},
			},
			"queue_length": {
				MarkdownDescription: helpers.NewAttributeDescription("Message queue length for each TRAP host").AddIntegerRangeDescription(1, 5000).String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(1, 5000),
				},
			},
			"enable_logging_getop": {
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP GET Operation logging").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"enable_logging_setop": {
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP SET Operation logging").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"enable_informs": {
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP Informs").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"enable_traps": {
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP Traps").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"enable_traps_snmp_authentication": {
				MarkdownDescription: helpers.NewAttributeDescription("Enable authentication trap").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"enable_traps_snmp_coldstart": {
				MarkdownDescription: helpers.NewAttributeDescription("Enable coldStart trap").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"enable_traps_snmp_linkdown": {
				MarkdownDescription: helpers.NewAttributeDescription("Enable linkDown trap").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"enable_traps_snmp_linkup": {
				MarkdownDescription: helpers.NewAttributeDescription("Enable linkUp trap").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"enable_traps_snmp_warmstart": {
				MarkdownDescription: helpers.NewAttributeDescription("Enable warmStart trap").String,
				Type:                types.BoolType,
				Optional:            true,
				Computed:            true,
			},
			"source_interface_informs_gigabit_ethernet": {
				MarkdownDescription: helpers.NewAttributeDescription("GigabitEthernet IEEE 802.3z").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_interface_informs_ten_gigabit_ethernet": {
				MarkdownDescription: helpers.NewAttributeDescription("Ten Gigabit Ethernet").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_interface_informs_forty_gigabit_ethernet": {
				MarkdownDescription: helpers.NewAttributeDescription("Forty GigabitEthernet ").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_interface_informs_hundred_gig_e": {
				MarkdownDescription: helpers.NewAttributeDescription("Hundred GigabitEthernet").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_interface_informs_loopback": {
				MarkdownDescription: helpers.NewAttributeDescription("Loopback interface").AddIntegerRangeDescription(0, 2147483647).String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 2147483647),
				},
			},
			"source_interface_informs_port_channel": {
				MarkdownDescription: helpers.NewAttributeDescription("Ethernet Channel of interfaces").AddIntegerRangeDescription(0, 4294967295).String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 4294967295),
				},
			},
			"source_interface_informs_port_channel_subinterface": {
				MarkdownDescription: helpers.NewAttributeDescription("").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_interface_informs_vlan": {
				MarkdownDescription: helpers.NewAttributeDescription("Iosxr Vlans").AddIntegerRangeDescription(0, 65535).String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 65535),
				},
			},
			"source_interface_traps_gigabit_ethernet": {
				MarkdownDescription: helpers.NewAttributeDescription("GigabitEthernet IEEE 802.3z").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_interface_traps_ten_gigabit_ethernet": {
				MarkdownDescription: helpers.NewAttributeDescription("Ten Gigabit Ethernet").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_interface_traps_forty_gigabit_ethernet": {
				MarkdownDescription: helpers.NewAttributeDescription("Forty GigabitEthernet ").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_interface_traps_hundred_gig_e": {
				MarkdownDescription: helpers.NewAttributeDescription("Hundred GigabitEthernet").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_interface_traps_loopback": {
				MarkdownDescription: helpers.NewAttributeDescription("Loopback interface").AddIntegerRangeDescription(0, 2147483647).String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 2147483647),
				},
			},
			"source_interface_traps_port_channel": {
				MarkdownDescription: helpers.NewAttributeDescription("Ethernet Channel of interfaces").AddIntegerRangeDescription(0, 4294967295).String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 4294967295),
				},
			},
			"source_interface_traps_port_channel_subinterface": {
				MarkdownDescription: helpers.NewAttributeDescription("").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"source_interface_traps_vlan": {
				MarkdownDescription: helpers.NewAttributeDescription("Iosxr Vlans").AddIntegerRangeDescription(0, 65535).String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 65535),
				},
			},
			"trap_source_gigabit_ethernet": {
				MarkdownDescription: helpers.NewAttributeDescription("GigabitEthernet IEEE 802.3z").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"trap_source_ten_gigabit_ethernet": {
				MarkdownDescription: helpers.NewAttributeDescription("Ten Gigabit Ethernet").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"trap_source_forty_gigabit_ethernet": {
				MarkdownDescription: helpers.NewAttributeDescription("Forty GigabitEthernet ").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"trap_source_hundred_gig_e": {
				MarkdownDescription: helpers.NewAttributeDescription("Hundred GigabitEthernet").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"trap_source_loopback": {
				MarkdownDescription: helpers.NewAttributeDescription("Loopback interface").AddIntegerRangeDescription(0, 2147483647).String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 2147483647),
				},
			},
			"trap_source_port_channel": {
				MarkdownDescription: helpers.NewAttributeDescription("Ethernet Channel of interfaces").AddIntegerRangeDescription(0, 4294967295).String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 4294967295),
				},
			},
			"trap_source_port_channel_subinterface": {
				MarkdownDescription: helpers.NewAttributeDescription("").String,
				Type:                types.StringType,
				Optional:            true,
				Computed:            true,
			},
			"trap_source_vlan": {
				MarkdownDescription: helpers.NewAttributeDescription("Iosxr Vlans").AddIntegerRangeDescription(0, 65535).String,
				Type:                types.Int64Type,
				Optional:            true,
				Computed:            true,
				Validators: []tfsdk.AttributeValidator{
					helpers.IntegerRangeValidator(0, 65535),
				},
			},
			"snmp_communities": {
				MarkdownDescription: helpers.NewAttributeDescription("Enable SNMP; set community string and access privs").String,
				Optional:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"name": {
						MarkdownDescription: helpers.NewAttributeDescription("").String,
						Type:                types.StringType,
						Optional:            true,
						Computed:            true,
					},
					"view": {
						MarkdownDescription: helpers.NewAttributeDescription("Restrict this community to a named MIB view").String,
						Type:                types.StringType,
						Optional:            true,
						Computed:            true,
					},
					"permission": {
						MarkdownDescription: helpers.NewAttributeDescription("").AddStringEnumDescription("ro", "rw").String,
						Type:                types.StringType,
						Optional:            true,
						Computed:            true,
						Validators: []tfsdk.AttributeValidator{
							helpers.StringEnumValidator("ro", "rw"),
						},
					},
					"ipv6": {
						MarkdownDescription: helpers.NewAttributeDescription("Specify IPv6 Named Access-List").String,
						Type:                types.StringType,
						Optional:            true,
						Computed:            true,
					},
					"access_list_name": {
						MarkdownDescription: helpers.NewAttributeDescription("Access-list name").String,
						Type:                types.StringType,
						Optional:            true,
						Computed:            true,
					},
				}),
			},
			"contexts": {
				MarkdownDescription: helpers.NewAttributeDescription("Create/Delete a context apart from default").String,
				Optional:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"name": {
						MarkdownDescription: helpers.NewAttributeDescription("").String,
						Type:                types.StringType,
						Optional:            true,
						Computed:            true,
					},
				}),
			},
			"views": {
				MarkdownDescription: helpers.NewAttributeDescription("Define an SNMPv2 MIB view").String,
				Optional:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"name": {
						MarkdownDescription: helpers.NewAttributeDescription("").String,
						Type:                types.StringType,
						Optional:            true,
						Computed:            true,
					},
					"mib": {
						MarkdownDescription: helpers.NewAttributeDescription("").String,
						Type:                types.StringType,
						Optional:            true,
						Computed:            true,
					},
					"inc_exl": {
						MarkdownDescription: helpers.NewAttributeDescription("").AddStringEnumDescription("excluded", "included").String,
						Type:                types.StringType,
						Optional:            true,
						Computed:            true,
						Validators: []tfsdk.AttributeValidator{
							helpers.StringEnumValidator("excluded", "included"),
						},
					},
				}),
			},
		},
	}, nil
}

func (t resourceSNMPServerType) NewResource(ctx context.Context, in tfsdk.Provider) (tfsdk.Resource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return resourceSNMPServer{
		provider: provider,
	}, diags
}

type resourceSNMPServer struct {
	provider provider
}

func (r resourceSNMPServer) Create(ctx context.Context, req tfsdk.CreateResourceRequest, resp *tfsdk.CreateResourceResponse) {
	var plan SNMPServer

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Create", plan.getPath()))

	// Create object
	body := plan.toBody(ctx)

	res, err := r.provider.clients[plan.Device.Value].PatchData(plan.getPathShort(), body)
	if len(res.Errors.Error) > 0 && res.Errors.Error[0].ErrorMessage == "patch to a nonexistent resource" {
		_, err = r.provider.clients[plan.Device.Value].PutData(plan.getPath(), body)
	}
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to configure object (PATCH), got error: %s", err))
		return
	}

	emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
	tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

	for _, i := range emptyLeafsDelete {
		res, err := r.provider.clients[plan.Device.Value].DeleteData(i)
		if err != nil && res.StatusCode != 404 {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object, got error: %s", err))
			return
		}
	}

	plan.setUnknownValues(ctx)

	plan.Id = types.String{Value: plan.getPath()}

	tflog.Debug(ctx, fmt.Sprintf("%s: Create finished successfully", plan.getPath()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r resourceSNMPServer) Read(ctx context.Context, req tfsdk.ReadResourceRequest, resp *tfsdk.ReadResourceResponse) {
	var state SNMPServer

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", state.Id.Value))

	res, err := r.provider.clients[state.Device.Value].GetData(state.Id.Value)
	if res.StatusCode == 404 {
		state = SNMPServer{Device: state.Device, Id: state.Id}
	} else {
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
			return
		}

		state.updateFromBody(ctx, res.Res)
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", state.Id.Value))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r resourceSNMPServer) Update(ctx context.Context, req tfsdk.UpdateResourceRequest, resp *tfsdk.UpdateResourceResponse) {
	var plan, state SNMPServer

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read state
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Update", plan.Id.Value))

	body := plan.toBody(ctx)
	res, err := r.provider.clients[plan.Device.Value].PatchData(plan.getPathShort(), body)
	if len(res.Errors.Error) > 0 && res.Errors.Error[0].ErrorMessage == "patch to a nonexistent resource" {
		_, err = r.provider.clients[plan.Device.Value].PutData(plan.getPath(), body)
	}
	if err != nil {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to configure object (PATCH), got error: %s", err))
		return
	}

	plan.setUnknownValues(ctx)

	deletedListItems := plan.getDeletedListItems(ctx, state)
	tflog.Debug(ctx, fmt.Sprintf("List items to delete: %+v", deletedListItems))

	for _, i := range deletedListItems {
		res, err := r.provider.clients[state.Device.Value].DeleteData(i)
		if err != nil && res.StatusCode != 404 {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object, got error: %s", err))
			return
		}
	}

	emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
	tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

	for _, i := range emptyLeafsDelete {
		res, err := r.provider.clients[plan.Device.Value].DeleteData(i)
		if err != nil && res.StatusCode != 404 {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object, got error: %s", err))
			return
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Update finished successfully", plan.Id.Value))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r resourceSNMPServer) Delete(ctx context.Context, req tfsdk.DeleteResourceRequest, resp *tfsdk.DeleteResourceResponse) {
	var state SNMPServer

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Delete", state.Id.Value))

	res, err := r.provider.clients[state.Device.Value].DeleteData(state.Id.Value)
	if err != nil && res.StatusCode != 404 && res.StatusCode != 400 {
		resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object, got error: %s", err))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Id.Value))

	resp.State.RemoveResource(ctx)
}

func (r resourceSNMPServer) ImportState(ctx context.Context, req tfsdk.ImportResourceStateRequest, resp *tfsdk.ImportResourceStateResponse) {
	tfsdk.ResourceImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
