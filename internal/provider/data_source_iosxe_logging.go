// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

type dataSourceLoggingType struct{}

func (t dataSourceLoggingType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Logging configuration.",

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The path of the retrieved object.",
				Type:                types.StringType,
				Computed:            true,
			},
			"monitor_severity": {
				MarkdownDescription: "",
				Type:                types.StringType,
				Computed:            true,
			},
			"buffered_size": {
				MarkdownDescription: "Logging buffer size",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"buffered_severity": {
				MarkdownDescription: "Logging severity level",
				Type:                types.StringType,
				Computed:            true,
			},
			"console_severity": {
				MarkdownDescription: "",
				Type:                types.StringType,
				Computed:            true,
			},
			"facility": {
				MarkdownDescription: "Facility parameter for syslog messages",
				Type:                types.StringType,
				Computed:            true,
			},
			"history_size": {
				MarkdownDescription: "Set history table size",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"history_severity": {
				MarkdownDescription: "",
				Type:                types.StringType,
				Computed:            true,
			},
			"trap": {
				MarkdownDescription: "Set trap server logging level",
				Type:                types.BoolType,
				Computed:            true,
			},
			"trap_severity": {
				MarkdownDescription: "",
				Type:                types.StringType,
				Computed:            true,
			},
			"origin_id_type": {
				MarkdownDescription: "Use origin hostname/ip/ipv6 as ID",
				Type:                types.StringType,
				Computed:            true,
			},
			"origin_id_name": {
				MarkdownDescription: "Define a unique text string as ID",
				Type:                types.StringType,
				Computed:            true,
			},
			"file_name": {
				MarkdownDescription: "",
				Type:                types.StringType,
				Computed:            true,
			},
			"file_max_size": {
				MarkdownDescription: "",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"file_min_size": {
				MarkdownDescription: "",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"file_severity": {
				MarkdownDescription: "",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_interface": {
				MarkdownDescription: "",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_interfaces_vrf": {
				MarkdownDescription: "Specify interface and vrf for source address in logging transactions",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"vrf": {
						MarkdownDescription: "Specify the vrf of source interface for logging transactions",
						Type:                types.StringType,
						Computed:            true,
					},
					"interface_name": {
						MarkdownDescription: "",
						Type:                types.StringType,
						Computed:            true,
					},
				}),
			},
			"ipv4_hosts": {
				MarkdownDescription: "",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"ipv4_host": {
						MarkdownDescription: "",
						Type:                types.StringType,
						Computed:            true,
					},
				}),
			},
			"ipv4_vrf_hosts": {
				MarkdownDescription: "",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"ipv4_host": {
						MarkdownDescription: "",
						Type:                types.StringType,
						Computed:            true,
					},
					"vrf": {
						MarkdownDescription: "Set VRF option",
						Type:                types.StringType,
						Computed:            true,
					},
				}),
			},
			"ipv6_hosts": {
				MarkdownDescription: "",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"ipv6_host": {
						MarkdownDescription: "",
						Type:                types.StringType,
						Computed:            true,
					},
				}),
			},
			"ipv6_vrf_hosts": {
				MarkdownDescription: "",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"ipv6_host": {
						MarkdownDescription: "",
						Type:                types.StringType,
						Computed:            true,
					},
					"vrf": {
						MarkdownDescription: "Set VRF option",
						Type:                types.StringType,
						Computed:            true,
					},
				}),
			},
		},
	}, nil
}

func (t dataSourceLoggingType) NewDataSource(ctx context.Context, in tfsdk.Provider) (tfsdk.DataSource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return dataSourceLogging{
		provider: provider,
	}, diags
}

type dataSourceLogging struct {
	provider provider
}

func (d dataSourceLogging) Read(ctx context.Context, req tfsdk.ReadDataSourceRequest, resp *tfsdk.ReadDataSourceResponse) {
	var config Logging

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	res, err := d.provider.clients[config.Device.Value].GetData(config.getPath())
	if res.StatusCode == 404 {
		config = Logging{Device: config.Device}
	} else {
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
			return
		}

		config.fromBody(ctx, res.Res)
	}

	config.Id = types.String{Value: config.getPath()}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
