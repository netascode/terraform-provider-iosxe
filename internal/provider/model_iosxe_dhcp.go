// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type DHCP struct {
	Device                               types.String        `tfsdk:"device"`
	Id                                   types.String        `tfsdk:"id"`
	CompatibilitySuboptionLinkSelection  types.String        `tfsdk:"compatibility_suboption_link_selection"`
	CompatibilitySuboptionServerOverride types.String        `tfsdk:"compatibility_suboption_server_override"`
	RelayInformationTrustAll             types.Bool          `tfsdk:"relay_information_trust_all"`
	RelayInformationOptionDefault        types.Bool          `tfsdk:"relay_information_option_default"`
	RelayInformationOptionVpn            types.Bool          `tfsdk:"relay_information_option_vpn"`
	Snooping                             types.Bool          `tfsdk:"snooping"`
	SnoopingVlans                        []DHCPSnoopingVlans `tfsdk:"snooping_vlans"`
}
type DHCPSnoopingVlans struct {
	VlanId types.Int64 `tfsdk:"vlan_id"`
}

func (data DHCP) getPath() string {
	return "Cisco-IOS-XE-native:native/ip/dhcp"
}

// if last path element has a key -> remove it
func (data DHCP) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data DHCP) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.CompatibilitySuboptionLinkSelection.Null && !data.CompatibilitySuboptionLinkSelection.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-dhcp:compatibility.suboption.link-selection", data.CompatibilitySuboptionLinkSelection.Value)
	}
	if !data.CompatibilitySuboptionServerOverride.Null && !data.CompatibilitySuboptionServerOverride.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-dhcp:compatibility.suboption.server-override", data.CompatibilitySuboptionServerOverride.Value)
	}
	if !data.RelayInformationTrustAll.Null && !data.RelayInformationTrustAll.Unknown {
		if data.RelayInformationTrustAll.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-dhcp:relay.information.trust-all", map[string]string{})
		}
	}
	if !data.RelayInformationOptionDefault.Null && !data.RelayInformationOptionDefault.Unknown {
		if data.RelayInformationOptionDefault.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-dhcp:relay.information.option.option-default", map[string]string{})
		}
	}
	if !data.RelayInformationOptionVpn.Null && !data.RelayInformationOptionVpn.Unknown {
		if data.RelayInformationOptionVpn.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-dhcp:relay.information.option.vpn", map[string]string{})
		}
	}
	if !data.Snooping.Null && !data.Snooping.Unknown {
		if data.Snooping.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-dhcp:snooping", map[string]string{})
		}
	}
	if len(data.SnoopingVlans) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-dhcp:snooping-conf.snooping.vlan", []interface{}{})
		for index, item := range data.SnoopingVlans {
			if !item.VlanId.Null && !item.VlanId.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-dhcp:snooping-conf.snooping.vlan"+"."+strconv.Itoa(index)+"."+"id", strconv.FormatInt(item.VlanId.Value, 10))
			}
		}
	}
	return body
}

func (data *DHCP) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-dhcp:compatibility.suboption.link-selection"); value.Exists() {
		data.CompatibilitySuboptionLinkSelection.Value = value.String()
	} else {
		data.CompatibilitySuboptionLinkSelection.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-dhcp:compatibility.suboption.server-override"); value.Exists() {
		data.CompatibilitySuboptionServerOverride.Value = value.String()
	} else {
		data.CompatibilitySuboptionServerOverride.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-dhcp:relay.information.trust-all"); value.Exists() {
		data.RelayInformationTrustAll.Value = true
	} else {
		data.RelayInformationTrustAll.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-dhcp:relay.information.option.option-default"); value.Exists() {
		data.RelayInformationOptionDefault.Value = true
	} else {
		data.RelayInformationOptionDefault.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-dhcp:relay.information.option.vpn"); value.Exists() {
		data.RelayInformationOptionVpn.Value = true
	} else {
		data.RelayInformationOptionVpn.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-dhcp:snooping"); value.Exists() {
		data.Snooping.Value = true
	} else {
		data.Snooping.Value = false
	}
	for i := range data.SnoopingVlans {
		keys := [...]string{"id"}
		keyValues := [...]string{strconv.FormatInt(data.SnoopingVlans[i].VlanId.Value, 10)}

		var r gjson.Result
		res.Get(prefix + "Cisco-IOS-XE-dhcp:snooping-conf.snooping.vlan").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("id"); value.Exists() {
			data.SnoopingVlans[i].VlanId.Value = value.Int()
		} else {
			data.SnoopingVlans[i].VlanId.Null = true
		}
	}
}

func (data *DHCP) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-dhcp:compatibility.suboption.link-selection"); value.Exists() {
		data.CompatibilitySuboptionLinkSelection.Value = value.String()
		data.CompatibilitySuboptionLinkSelection.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-dhcp:compatibility.suboption.server-override"); value.Exists() {
		data.CompatibilitySuboptionServerOverride.Value = value.String()
		data.CompatibilitySuboptionServerOverride.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-dhcp:relay.information.trust-all"); value.Exists() {
		data.RelayInformationTrustAll.Value = true
		data.RelayInformationTrustAll.Null = false
	} else {
		data.RelayInformationTrustAll.Value = false
		data.RelayInformationTrustAll.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-dhcp:relay.information.option.option-default"); value.Exists() {
		data.RelayInformationOptionDefault.Value = true
		data.RelayInformationOptionDefault.Null = false
	} else {
		data.RelayInformationOptionDefault.Value = false
		data.RelayInformationOptionDefault.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-dhcp:relay.information.option.vpn"); value.Exists() {
		data.RelayInformationOptionVpn.Value = true
		data.RelayInformationOptionVpn.Null = false
	} else {
		data.RelayInformationOptionVpn.Value = false
		data.RelayInformationOptionVpn.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-dhcp:snooping"); value.Exists() {
		data.Snooping.Value = true
		data.Snooping.Null = false
	} else {
		data.Snooping.Value = false
		data.Snooping.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-dhcp:snooping-conf.snooping.vlan"); value.Exists() {
		data.SnoopingVlans = make([]DHCPSnoopingVlans, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := DHCPSnoopingVlans{}
			if cValue := v.Get("id"); cValue.Exists() {
				item.VlanId.Value = cValue.Int()
				item.VlanId.Null = false
			}
			data.SnoopingVlans = append(data.SnoopingVlans, item)
			return true
		})
	}
}

func (data *DHCP) setUnknownValues(ctx context.Context) {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.CompatibilitySuboptionLinkSelection.Unknown {
		data.CompatibilitySuboptionLinkSelection.Unknown = false
		data.CompatibilitySuboptionLinkSelection.Null = true
	}
	if data.CompatibilitySuboptionServerOverride.Unknown {
		data.CompatibilitySuboptionServerOverride.Unknown = false
		data.CompatibilitySuboptionServerOverride.Null = true
	}
	if data.RelayInformationTrustAll.Unknown {
		data.RelayInformationTrustAll.Unknown = false
		data.RelayInformationTrustAll.Null = true
	}
	if data.RelayInformationOptionDefault.Unknown {
		data.RelayInformationOptionDefault.Unknown = false
		data.RelayInformationOptionDefault.Null = true
	}
	if data.RelayInformationOptionVpn.Unknown {
		data.RelayInformationOptionVpn.Unknown = false
		data.RelayInformationOptionVpn.Null = true
	}
	if data.Snooping.Unknown {
		data.Snooping.Unknown = false
		data.Snooping.Null = true
	}
	for i := range data.SnoopingVlans {
		if data.SnoopingVlans[i].VlanId.Unknown {
			data.SnoopingVlans[i].VlanId.Unknown = false
			data.SnoopingVlans[i].VlanId.Null = true
		}
	}
}

func (data *DHCP) getDeletedListItems(ctx context.Context, state DHCP) []string {
	deletedListItems := make([]string, 0)
	for i := range state.SnoopingVlans {
		stateKeyValues := [...]string{strconv.FormatInt(state.SnoopingVlans[i].VlanId.Value, 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.SnoopingVlans[i].VlanId.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.SnoopingVlans {
			found = true
			if state.SnoopingVlans[i].VlanId.Value != data.SnoopingVlans[j].VlanId.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/Cisco-IOS-XE-dhcp:snooping-conf/snooping/vlan=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *DHCP) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.RelayInformationTrustAll.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-dhcp:relay/information/trust-all", data.getPath()))
	}
	if !data.RelayInformationOptionDefault.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-dhcp:relay/information/option/option-default", data.getPath()))
	}
	if !data.RelayInformationOptionVpn.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-dhcp:relay/information/option/vpn", data.getPath()))
	}
	if !data.Snooping.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-dhcp:snooping", data.getPath()))
	}

	return emptyLeafsDelete
}
