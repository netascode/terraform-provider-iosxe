// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type VRF struct {
	Device                         types.String                        `tfsdk:"device"`
	Id                             types.String                        `tfsdk:"id"`
	Name                           types.String                        `tfsdk:"name"`
	Description                    types.String                        `tfsdk:"description"`
	Rd                             types.String                        `tfsdk:"rd"`
	AddressFamilyIpv4              types.Bool                          `tfsdk:"address_family_ipv4"`
	AddressFamilyIpv6              types.Bool                          `tfsdk:"address_family_ipv6"`
	VpnId                          types.String                        `tfsdk:"vpn_id"`
	RouteTargetImport              []VRFRouteTargetImport              `tfsdk:"route_target_import"`
	RouteTargetExport              []VRFRouteTargetExport              `tfsdk:"route_target_export"`
	Ipv4RouteTargetImport          []VRFIpv4RouteTargetImport          `tfsdk:"ipv4_route_target_import"`
	Ipv4RouteTargetImportStitching []VRFIpv4RouteTargetImportStitching `tfsdk:"ipv4_route_target_import_stitching"`
	Ipv4RouteTargetExport          []VRFIpv4RouteTargetExport          `tfsdk:"ipv4_route_target_export"`
	Ipv4RouteTargetExportStitching []VRFIpv4RouteTargetExportStitching `tfsdk:"ipv4_route_target_export_stitching"`
	Ipv6RouteTargetImport          []VRFIpv6RouteTargetImport          `tfsdk:"ipv6_route_target_import"`
	Ipv6RouteTargetImportStitching []VRFIpv6RouteTargetImportStitching `tfsdk:"ipv6_route_target_import_stitching"`
	Ipv6RouteTargetExport          []VRFIpv6RouteTargetExport          `tfsdk:"ipv6_route_target_export"`
	Ipv6RouteTargetExportStitching []VRFIpv6RouteTargetExportStitching `tfsdk:"ipv6_route_target_export_stitching"`
}
type VRFRouteTargetImport struct {
	Value     types.String `tfsdk:"value"`
	Stitching types.Bool   `tfsdk:"stitching"`
}
type VRFRouteTargetExport struct {
	Value     types.String `tfsdk:"value"`
	Stitching types.Bool   `tfsdk:"stitching"`
}
type VRFIpv4RouteTargetImport struct {
	Value types.String `tfsdk:"value"`
}
type VRFIpv4RouteTargetImportStitching struct {
	Value     types.String `tfsdk:"value"`
	Stitching types.Bool   `tfsdk:"stitching"`
}
type VRFIpv4RouteTargetExport struct {
	Value types.String `tfsdk:"value"`
}
type VRFIpv4RouteTargetExportStitching struct {
	Value     types.String `tfsdk:"value"`
	Stitching types.Bool   `tfsdk:"stitching"`
}
type VRFIpv6RouteTargetImport struct {
	Value types.String `tfsdk:"value"`
}
type VRFIpv6RouteTargetImportStitching struct {
	Value     types.String `tfsdk:"value"`
	Stitching types.Bool   `tfsdk:"stitching"`
}
type VRFIpv6RouteTargetExport struct {
	Value types.String `tfsdk:"value"`
}
type VRFIpv6RouteTargetExportStitching struct {
	Value     types.String `tfsdk:"value"`
	Stitching types.Bool   `tfsdk:"stitching"`
}

func (data VRF) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/vrf/definition=%s", url.QueryEscape(fmt.Sprintf("%v", data.Name.Value)))
}

// if last path element has a key -> remove it
func (data VRF) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data VRF) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Name.Null && !data.Name.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"name", data.Name.Value)
	}
	if !data.Description.Null && !data.Description.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"description", data.Description.Value)
	}
	if !data.Rd.Null && !data.Rd.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"rd", data.Rd.Value)
	}
	if !data.AddressFamilyIpv4.Null && !data.AddressFamilyIpv4.Unknown {
		if data.AddressFamilyIpv4.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv4", map[string]string{})
		}
	}
	if !data.AddressFamilyIpv6.Null && !data.AddressFamilyIpv6.Unknown {
		if data.AddressFamilyIpv6.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv6", map[string]string{})
		}
	}
	if !data.VpnId.Null && !data.VpnId.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"vpn.id", data.VpnId.Value)
	}
	if len(data.RouteTargetImport) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"route-target.import", []interface{}{})
		for index, item := range data.RouteTargetImport {
			if !item.Value.Null && !item.Value.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"route-target.import"+"."+strconv.Itoa(index)+"."+"asn-ip", item.Value.Value)
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				if item.Stitching.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"route-target.import"+"."+strconv.Itoa(index)+"."+"stitching", map[string]string{})
				}
			}
		}
	}
	if len(data.RouteTargetExport) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"route-target.export", []interface{}{})
		for index, item := range data.RouteTargetExport {
			if !item.Value.Null && !item.Value.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"route-target.export"+"."+strconv.Itoa(index)+"."+"asn-ip", item.Value.Value)
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				if item.Stitching.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"route-target.export"+"."+strconv.Itoa(index)+"."+"stitching", map[string]string{})
				}
			}
		}
	}
	if len(data.Ipv4RouteTargetImport) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv4.route-target.import-route-target.without-stitching", []interface{}{})
		for index, item := range data.Ipv4RouteTargetImport {
			if !item.Value.Null && !item.Value.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv4.route-target.import-route-target.without-stitching"+"."+strconv.Itoa(index)+"."+"asn-ip", item.Value.Value)
			}
		}
	}
	if len(data.Ipv4RouteTargetImportStitching) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv4.route-target.import-route-target.with-stitching", []interface{}{})
		for index, item := range data.Ipv4RouteTargetImportStitching {
			if !item.Value.Null && !item.Value.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv4.route-target.import-route-target.with-stitching"+"."+strconv.Itoa(index)+"."+"asn-ip", item.Value.Value)
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				if item.Stitching.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv4.route-target.import-route-target.with-stitching"+"."+strconv.Itoa(index)+"."+"stitching", map[string]string{})
				}
			}
		}
	}
	if len(data.Ipv4RouteTargetExport) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv4.route-target.export-route-target.without-stitching", []interface{}{})
		for index, item := range data.Ipv4RouteTargetExport {
			if !item.Value.Null && !item.Value.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv4.route-target.export-route-target.without-stitching"+"."+strconv.Itoa(index)+"."+"asn-ip", item.Value.Value)
			}
		}
	}
	if len(data.Ipv4RouteTargetExportStitching) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv4.route-target.export-route-target.with-stitching", []interface{}{})
		for index, item := range data.Ipv4RouteTargetExportStitching {
			if !item.Value.Null && !item.Value.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv4.route-target.export-route-target.with-stitching"+"."+strconv.Itoa(index)+"."+"asn-ip", item.Value.Value)
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				if item.Stitching.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv4.route-target.export-route-target.with-stitching"+"."+strconv.Itoa(index)+"."+"stitching", map[string]string{})
				}
			}
		}
	}
	if len(data.Ipv6RouteTargetImport) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv6.route-target.import-route-target.without-stitching", []interface{}{})
		for index, item := range data.Ipv6RouteTargetImport {
			if !item.Value.Null && !item.Value.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv6.route-target.import-route-target.without-stitching"+"."+strconv.Itoa(index)+"."+"asn-ip", item.Value.Value)
			}
		}
	}
	if len(data.Ipv6RouteTargetImportStitching) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv6.route-target.import-route-target.with-stitching", []interface{}{})
		for index, item := range data.Ipv6RouteTargetImportStitching {
			if !item.Value.Null && !item.Value.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv6.route-target.import-route-target.with-stitching"+"."+strconv.Itoa(index)+"."+"asn-ip", item.Value.Value)
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				if item.Stitching.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv6.route-target.import-route-target.with-stitching"+"."+strconv.Itoa(index)+"."+"stitching", map[string]string{})
				}
			}
		}
	}
	if len(data.Ipv6RouteTargetExport) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv6.route-target.export-route-target.without-stitching", []interface{}{})
		for index, item := range data.Ipv6RouteTargetExport {
			if !item.Value.Null && !item.Value.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv6.route-target.export-route-target.without-stitching"+"."+strconv.Itoa(index)+"."+"asn-ip", item.Value.Value)
			}
		}
	}
	if len(data.Ipv6RouteTargetExportStitching) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv6.route-target.export-route-target.with-stitching", []interface{}{})
		for index, item := range data.Ipv6RouteTargetExportStitching {
			if !item.Value.Null && !item.Value.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv6.route-target.export-route-target.with-stitching"+"."+strconv.Itoa(index)+"."+"asn-ip", item.Value.Value)
			}
			if !item.Stitching.Null && !item.Stitching.Unknown {
				if item.Stitching.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"address-family.ipv6.route-target.export-route-target.with-stitching"+"."+strconv.Itoa(index)+"."+"stitching", map[string]string{})
				}
			}
		}
	}
	return body
}

func (data *VRF) updateFromBody(res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "name"); value.Exists() {
		data.Name.Value = value.String()
	} else {
		data.Name.Null = true
	}
	if value := res.Get(prefix + "description"); value.Exists() {
		data.Description.Value = value.String()
	} else {
		data.Description.Null = true
	}
	if value := res.Get(prefix + "rd"); value.Exists() {
		data.Rd.Value = value.String()
	} else {
		data.Rd.Null = true
	}
	if value := res.Get(prefix + "address-family.ipv4"); value.Exists() {
		data.AddressFamilyIpv4.Value = true
	} else {
		data.AddressFamilyIpv4.Value = false
	}
	if value := res.Get(prefix + "address-family.ipv6"); value.Exists() {
		data.AddressFamilyIpv6.Value = true
	} else {
		data.AddressFamilyIpv6.Value = false
	}
	if value := res.Get(prefix + "vpn.id"); value.Exists() {
		data.VpnId.Value = value.String()
	} else {
		data.VpnId.Null = true
	}
	for i := range data.RouteTargetImport {
		key := data.RouteTargetImport[i].Value.Value
		if value := res.Get(fmt.Sprintf("%vroute-target.import.#(asn-ip==\"%v\").asn-ip", prefix, key)); value.Exists() {
			data.RouteTargetImport[i].Value.Value = value.String()
		} else {
			data.RouteTargetImport[i].Value.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vroute-target.import.#(asn-ip==\"%v\").stitching", prefix, key)); value.Exists() {
			data.RouteTargetImport[i].Stitching.Value = true
		} else {
			data.RouteTargetImport[i].Stitching.Value = false
		}
	}
	for i := range data.RouteTargetExport {
		key := data.RouteTargetExport[i].Value.Value
		if value := res.Get(fmt.Sprintf("%vroute-target.export.#(asn-ip==\"%v\").asn-ip", prefix, key)); value.Exists() {
			data.RouteTargetExport[i].Value.Value = value.String()
		} else {
			data.RouteTargetExport[i].Value.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vroute-target.export.#(asn-ip==\"%v\").stitching", prefix, key)); value.Exists() {
			data.RouteTargetExport[i].Stitching.Value = true
		} else {
			data.RouteTargetExport[i].Stitching.Value = false
		}
	}
	for i := range data.Ipv4RouteTargetImport {
		key := data.Ipv4RouteTargetImport[i].Value.Value
		if value := res.Get(fmt.Sprintf("%vaddress-family.ipv4.route-target.import-route-target.without-stitching.#(asn-ip==\"%v\").asn-ip", prefix, key)); value.Exists() {
			data.Ipv4RouteTargetImport[i].Value.Value = value.String()
		} else {
			data.Ipv4RouteTargetImport[i].Value.Null = true
		}
	}
	for i := range data.Ipv4RouteTargetImportStitching {
		key := data.Ipv4RouteTargetImportStitching[i].Value.Value
		if value := res.Get(fmt.Sprintf("%vaddress-family.ipv4.route-target.import-route-target.with-stitching.#(asn-ip==\"%v\").asn-ip", prefix, key)); value.Exists() {
			data.Ipv4RouteTargetImportStitching[i].Value.Value = value.String()
		} else {
			data.Ipv4RouteTargetImportStitching[i].Value.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vaddress-family.ipv4.route-target.import-route-target.with-stitching.#(asn-ip==\"%v\").stitching", prefix, key)); value.Exists() {
			data.Ipv4RouteTargetImportStitching[i].Stitching.Value = true
		} else {
			data.Ipv4RouteTargetImportStitching[i].Stitching.Value = false
		}
	}
	for i := range data.Ipv4RouteTargetExport {
		key := data.Ipv4RouteTargetExport[i].Value.Value
		if value := res.Get(fmt.Sprintf("%vaddress-family.ipv4.route-target.export-route-target.without-stitching.#(asn-ip==\"%v\").asn-ip", prefix, key)); value.Exists() {
			data.Ipv4RouteTargetExport[i].Value.Value = value.String()
		} else {
			data.Ipv4RouteTargetExport[i].Value.Null = true
		}
	}
	for i := range data.Ipv4RouteTargetExportStitching {
		key := data.Ipv4RouteTargetExportStitching[i].Value.Value
		if value := res.Get(fmt.Sprintf("%vaddress-family.ipv4.route-target.export-route-target.with-stitching.#(asn-ip==\"%v\").asn-ip", prefix, key)); value.Exists() {
			data.Ipv4RouteTargetExportStitching[i].Value.Value = value.String()
		} else {
			data.Ipv4RouteTargetExportStitching[i].Value.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vaddress-family.ipv4.route-target.export-route-target.with-stitching.#(asn-ip==\"%v\").stitching", prefix, key)); value.Exists() {
			data.Ipv4RouteTargetExportStitching[i].Stitching.Value = true
		} else {
			data.Ipv4RouteTargetExportStitching[i].Stitching.Value = false
		}
	}
	for i := range data.Ipv6RouteTargetImport {
		key := data.Ipv6RouteTargetImport[i].Value.Value
		if value := res.Get(fmt.Sprintf("%vaddress-family.ipv6.route-target.import-route-target.without-stitching.#(asn-ip==\"%v\").asn-ip", prefix, key)); value.Exists() {
			data.Ipv6RouteTargetImport[i].Value.Value = value.String()
		} else {
			data.Ipv6RouteTargetImport[i].Value.Null = true
		}
	}
	for i := range data.Ipv6RouteTargetImportStitching {
		key := data.Ipv6RouteTargetImportStitching[i].Value.Value
		if value := res.Get(fmt.Sprintf("%vaddress-family.ipv6.route-target.import-route-target.with-stitching.#(asn-ip==\"%v\").asn-ip", prefix, key)); value.Exists() {
			data.Ipv6RouteTargetImportStitching[i].Value.Value = value.String()
		} else {
			data.Ipv6RouteTargetImportStitching[i].Value.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vaddress-family.ipv6.route-target.import-route-target.with-stitching.#(asn-ip==\"%v\").stitching", prefix, key)); value.Exists() {
			data.Ipv6RouteTargetImportStitching[i].Stitching.Value = true
		} else {
			data.Ipv6RouteTargetImportStitching[i].Stitching.Value = false
		}
	}
	for i := range data.Ipv6RouteTargetExport {
		key := data.Ipv6RouteTargetExport[i].Value.Value
		if value := res.Get(fmt.Sprintf("%vaddress-family.ipv6.route-target.export-route-target.without-stitching.#(asn-ip==\"%v\").asn-ip", prefix, key)); value.Exists() {
			data.Ipv6RouteTargetExport[i].Value.Value = value.String()
		} else {
			data.Ipv6RouteTargetExport[i].Value.Null = true
		}
	}
	for i := range data.Ipv6RouteTargetExportStitching {
		key := data.Ipv6RouteTargetExportStitching[i].Value.Value
		if value := res.Get(fmt.Sprintf("%vaddress-family.ipv6.route-target.export-route-target.with-stitching.#(asn-ip==\"%v\").asn-ip", prefix, key)); value.Exists() {
			data.Ipv6RouteTargetExportStitching[i].Value.Value = value.String()
		} else {
			data.Ipv6RouteTargetExportStitching[i].Value.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vaddress-family.ipv6.route-target.export-route-target.with-stitching.#(asn-ip==\"%v\").stitching", prefix, key)); value.Exists() {
			data.Ipv6RouteTargetExportStitching[i].Stitching.Value = true
		} else {
			data.Ipv6RouteTargetExportStitching[i].Stitching.Value = false
		}
	}
}

func (data *VRF) fromBody(res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "description"); value.Exists() {
		data.Description.Value = value.String()
		data.Description.Null = false
	}
	if value := res.Get(prefix + "rd"); value.Exists() {
		data.Rd.Value = value.String()
		data.Rd.Null = false
	}
	if value := res.Get(prefix + "address-family.ipv4"); value.Exists() {
		data.AddressFamilyIpv4.Value = true
		data.AddressFamilyIpv4.Null = false
	} else {
		data.AddressFamilyIpv4.Value = false
		data.AddressFamilyIpv4.Null = false
	}
	if value := res.Get(prefix + "address-family.ipv6"); value.Exists() {
		data.AddressFamilyIpv6.Value = true
		data.AddressFamilyIpv6.Null = false
	} else {
		data.AddressFamilyIpv6.Value = false
		data.AddressFamilyIpv6.Null = false
	}
	if value := res.Get(prefix + "vpn.id"); value.Exists() {
		data.VpnId.Value = value.String()
		data.VpnId.Null = false
	}
	if value := res.Get(prefix + "route-target.import"); value.Exists() {
		data.RouteTargetImport = make([]VRFRouteTargetImport, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFRouteTargetImport{}
			if cValue := v.Get("asn-ip"); cValue.Exists() {
				item.Value.Value = cValue.String()
				item.Value.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = true
				item.Stitching.Null = false
			}
			data.RouteTargetImport = append(data.RouteTargetImport, item)
			return true
		})
	}
	if value := res.Get(prefix + "route-target.export"); value.Exists() {
		data.RouteTargetExport = make([]VRFRouteTargetExport, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFRouteTargetExport{}
			if cValue := v.Get("asn-ip"); cValue.Exists() {
				item.Value.Value = cValue.String()
				item.Value.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = true
				item.Stitching.Null = false
			}
			data.RouteTargetExport = append(data.RouteTargetExport, item)
			return true
		})
	}
	if value := res.Get(prefix + "address-family.ipv4.route-target.import-route-target.without-stitching"); value.Exists() {
		data.Ipv4RouteTargetImport = make([]VRFIpv4RouteTargetImport, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4RouteTargetImport{}
			if cValue := v.Get("asn-ip"); cValue.Exists() {
				item.Value.Value = cValue.String()
				item.Value.Null = false
			}
			data.Ipv4RouteTargetImport = append(data.Ipv4RouteTargetImport, item)
			return true
		})
	}
	if value := res.Get(prefix + "address-family.ipv4.route-target.import-route-target.with-stitching"); value.Exists() {
		data.Ipv4RouteTargetImportStitching = make([]VRFIpv4RouteTargetImportStitching, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4RouteTargetImportStitching{}
			if cValue := v.Get("asn-ip"); cValue.Exists() {
				item.Value.Value = cValue.String()
				item.Value.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = true
				item.Stitching.Null = false
			}
			data.Ipv4RouteTargetImportStitching = append(data.Ipv4RouteTargetImportStitching, item)
			return true
		})
	}
	if value := res.Get(prefix + "address-family.ipv4.route-target.export-route-target.without-stitching"); value.Exists() {
		data.Ipv4RouteTargetExport = make([]VRFIpv4RouteTargetExport, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4RouteTargetExport{}
			if cValue := v.Get("asn-ip"); cValue.Exists() {
				item.Value.Value = cValue.String()
				item.Value.Null = false
			}
			data.Ipv4RouteTargetExport = append(data.Ipv4RouteTargetExport, item)
			return true
		})
	}
	if value := res.Get(prefix + "address-family.ipv4.route-target.export-route-target.with-stitching"); value.Exists() {
		data.Ipv4RouteTargetExportStitching = make([]VRFIpv4RouteTargetExportStitching, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv4RouteTargetExportStitching{}
			if cValue := v.Get("asn-ip"); cValue.Exists() {
				item.Value.Value = cValue.String()
				item.Value.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = true
				item.Stitching.Null = false
			}
			data.Ipv4RouteTargetExportStitching = append(data.Ipv4RouteTargetExportStitching, item)
			return true
		})
	}
	if value := res.Get(prefix + "address-family.ipv6.route-target.import-route-target.without-stitching"); value.Exists() {
		data.Ipv6RouteTargetImport = make([]VRFIpv6RouteTargetImport, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6RouteTargetImport{}
			if cValue := v.Get("asn-ip"); cValue.Exists() {
				item.Value.Value = cValue.String()
				item.Value.Null = false
			}
			data.Ipv6RouteTargetImport = append(data.Ipv6RouteTargetImport, item)
			return true
		})
	}
	if value := res.Get(prefix + "address-family.ipv6.route-target.import-route-target.with-stitching"); value.Exists() {
		data.Ipv6RouteTargetImportStitching = make([]VRFIpv6RouteTargetImportStitching, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6RouteTargetImportStitching{}
			if cValue := v.Get("asn-ip"); cValue.Exists() {
				item.Value.Value = cValue.String()
				item.Value.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = true
				item.Stitching.Null = false
			}
			data.Ipv6RouteTargetImportStitching = append(data.Ipv6RouteTargetImportStitching, item)
			return true
		})
	}
	if value := res.Get(prefix + "address-family.ipv6.route-target.export-route-target.without-stitching"); value.Exists() {
		data.Ipv6RouteTargetExport = make([]VRFIpv6RouteTargetExport, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6RouteTargetExport{}
			if cValue := v.Get("asn-ip"); cValue.Exists() {
				item.Value.Value = cValue.String()
				item.Value.Null = false
			}
			data.Ipv6RouteTargetExport = append(data.Ipv6RouteTargetExport, item)
			return true
		})
	}
	if value := res.Get(prefix + "address-family.ipv6.route-target.export-route-target.with-stitching"); value.Exists() {
		data.Ipv6RouteTargetExportStitching = make([]VRFIpv6RouteTargetExportStitching, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := VRFIpv6RouteTargetExportStitching{}
			if cValue := v.Get("asn-ip"); cValue.Exists() {
				item.Value.Value = cValue.String()
				item.Value.Null = false
			}
			if cValue := v.Get("stitching"); cValue.Exists() {
				item.Stitching.Value = true
				item.Stitching.Null = false
			}
			data.Ipv6RouteTargetExportStitching = append(data.Ipv6RouteTargetExportStitching, item)
			return true
		})
	}
}

func (data *VRF) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Name.Unknown {
		data.Name.Unknown = false
		data.Name.Null = true
	}
	if data.Description.Unknown {
		data.Description.Unknown = false
		data.Description.Null = true
	}
	if data.Rd.Unknown {
		data.Rd.Unknown = false
		data.Rd.Null = true
	}
	if data.AddressFamilyIpv4.Unknown {
		data.AddressFamilyIpv4.Unknown = false
		data.AddressFamilyIpv4.Null = true
	}
	if data.AddressFamilyIpv6.Unknown {
		data.AddressFamilyIpv6.Unknown = false
		data.AddressFamilyIpv6.Null = true
	}
	if data.VpnId.Unknown {
		data.VpnId.Unknown = false
		data.VpnId.Null = true
	}
	for i := range data.RouteTargetImport {
		if data.RouteTargetImport[i].Value.Unknown {
			data.RouteTargetImport[i].Value.Unknown = false
			data.RouteTargetImport[i].Value.Null = true
		}
		if data.RouteTargetImport[i].Stitching.Unknown {
			data.RouteTargetImport[i].Stitching.Unknown = false
			data.RouteTargetImport[i].Stitching.Null = true
		}
	}
	for i := range data.RouteTargetExport {
		if data.RouteTargetExport[i].Value.Unknown {
			data.RouteTargetExport[i].Value.Unknown = false
			data.RouteTargetExport[i].Value.Null = true
		}
		if data.RouteTargetExport[i].Stitching.Unknown {
			data.RouteTargetExport[i].Stitching.Unknown = false
			data.RouteTargetExport[i].Stitching.Null = true
		}
	}
	for i := range data.Ipv4RouteTargetImport {
		if data.Ipv4RouteTargetImport[i].Value.Unknown {
			data.Ipv4RouteTargetImport[i].Value.Unknown = false
			data.Ipv4RouteTargetImport[i].Value.Null = true
		}
	}
	for i := range data.Ipv4RouteTargetImportStitching {
		if data.Ipv4RouteTargetImportStitching[i].Value.Unknown {
			data.Ipv4RouteTargetImportStitching[i].Value.Unknown = false
			data.Ipv4RouteTargetImportStitching[i].Value.Null = true
		}
		if data.Ipv4RouteTargetImportStitching[i].Stitching.Unknown {
			data.Ipv4RouteTargetImportStitching[i].Stitching.Unknown = false
			data.Ipv4RouteTargetImportStitching[i].Stitching.Null = true
		}
	}
	for i := range data.Ipv4RouteTargetExport {
		if data.Ipv4RouteTargetExport[i].Value.Unknown {
			data.Ipv4RouteTargetExport[i].Value.Unknown = false
			data.Ipv4RouteTargetExport[i].Value.Null = true
		}
	}
	for i := range data.Ipv4RouteTargetExportStitching {
		if data.Ipv4RouteTargetExportStitching[i].Value.Unknown {
			data.Ipv4RouteTargetExportStitching[i].Value.Unknown = false
			data.Ipv4RouteTargetExportStitching[i].Value.Null = true
		}
		if data.Ipv4RouteTargetExportStitching[i].Stitching.Unknown {
			data.Ipv4RouteTargetExportStitching[i].Stitching.Unknown = false
			data.Ipv4RouteTargetExportStitching[i].Stitching.Null = true
		}
	}
	for i := range data.Ipv6RouteTargetImport {
		if data.Ipv6RouteTargetImport[i].Value.Unknown {
			data.Ipv6RouteTargetImport[i].Value.Unknown = false
			data.Ipv6RouteTargetImport[i].Value.Null = true
		}
	}
	for i := range data.Ipv6RouteTargetImportStitching {
		if data.Ipv6RouteTargetImportStitching[i].Value.Unknown {
			data.Ipv6RouteTargetImportStitching[i].Value.Unknown = false
			data.Ipv6RouteTargetImportStitching[i].Value.Null = true
		}
		if data.Ipv6RouteTargetImportStitching[i].Stitching.Unknown {
			data.Ipv6RouteTargetImportStitching[i].Stitching.Unknown = false
			data.Ipv6RouteTargetImportStitching[i].Stitching.Null = true
		}
	}
	for i := range data.Ipv6RouteTargetExport {
		if data.Ipv6RouteTargetExport[i].Value.Unknown {
			data.Ipv6RouteTargetExport[i].Value.Unknown = false
			data.Ipv6RouteTargetExport[i].Value.Null = true
		}
	}
	for i := range data.Ipv6RouteTargetExportStitching {
		if data.Ipv6RouteTargetExportStitching[i].Value.Unknown {
			data.Ipv6RouteTargetExportStitching[i].Value.Unknown = false
			data.Ipv6RouteTargetExportStitching[i].Value.Null = true
		}
		if data.Ipv6RouteTargetExportStitching[i].Stitching.Unknown {
			data.Ipv6RouteTargetExportStitching[i].Stitching.Unknown = false
			data.Ipv6RouteTargetExportStitching[i].Stitching.Null = true
		}
	}
}

func (data *VRF) getDeletedListItems(state VRF) []string {
	deletedListItems := make([]string, 0)
	for _, i := range state.RouteTargetImport {
		if reflect.ValueOf(i.Value.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.RouteTargetImport {
			if i.Value.Value == j.Value.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/route-target/import=%v", state.getPath(), i.Value.Value))
		}
	}
	for _, i := range state.RouteTargetExport {
		if reflect.ValueOf(i.Value.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.RouteTargetExport {
			if i.Value.Value == j.Value.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/route-target/export=%v", state.getPath(), i.Value.Value))
		}
	}
	for _, i := range state.Ipv4RouteTargetImport {
		if reflect.ValueOf(i.Value.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.Ipv4RouteTargetImport {
			if i.Value.Value == j.Value.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv4/route-target/import-route-target/without-stitching=%v", state.getPath(), i.Value.Value))
		}
	}
	for _, i := range state.Ipv4RouteTargetImportStitching {
		if reflect.ValueOf(i.Value.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.Ipv4RouteTargetImportStitching {
			if i.Value.Value == j.Value.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv4/route-target/import-route-target/with-stitching=%v", state.getPath(), i.Value.Value))
		}
	}
	for _, i := range state.Ipv4RouteTargetExport {
		if reflect.ValueOf(i.Value.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.Ipv4RouteTargetExport {
			if i.Value.Value == j.Value.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv4/route-target/export-route-target/without-stitching=%v", state.getPath(), i.Value.Value))
		}
	}
	for _, i := range state.Ipv4RouteTargetExportStitching {
		if reflect.ValueOf(i.Value.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.Ipv4RouteTargetExportStitching {
			if i.Value.Value == j.Value.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv4/route-target/export-route-target/with-stitching=%v", state.getPath(), i.Value.Value))
		}
	}
	for _, i := range state.Ipv6RouteTargetImport {
		if reflect.ValueOf(i.Value.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.Ipv6RouteTargetImport {
			if i.Value.Value == j.Value.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv6/route-target/import-route-target/without-stitching=%v", state.getPath(), i.Value.Value))
		}
	}
	for _, i := range state.Ipv6RouteTargetImportStitching {
		if reflect.ValueOf(i.Value.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.Ipv6RouteTargetImportStitching {
			if i.Value.Value == j.Value.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv6/route-target/import-route-target/with-stitching=%v", state.getPath(), i.Value.Value))
		}
	}
	for _, i := range state.Ipv6RouteTargetExport {
		if reflect.ValueOf(i.Value.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.Ipv6RouteTargetExport {
			if i.Value.Value == j.Value.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv6/route-target/export-route-target/without-stitching=%v", state.getPath(), i.Value.Value))
		}
	}
	for _, i := range state.Ipv6RouteTargetExportStitching {
		if reflect.ValueOf(i.Value.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.Ipv6RouteTargetExportStitching {
			if i.Value.Value == j.Value.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/address-family/ipv6/route-target/export-route-target/with-stitching=%v", state.getPath(), i.Value.Value))
		}
	}
	return deletedListItems
}

func (data *VRF) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
