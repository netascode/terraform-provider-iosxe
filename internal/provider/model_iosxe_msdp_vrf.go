// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type MSDPVRF struct {
	Device       types.String       `tfsdk:"device"`
	Id           types.String       `tfsdk:"id"`
	Vrf          types.String       `tfsdk:"vrf"`
	OriginatorId types.String       `tfsdk:"originator_id"`
	Peers        []MSDPVRFPeers     `tfsdk:"peers"`
	Passwords    []MSDPVRFPasswords `tfsdk:"passwords"`
}
type MSDPVRFPeers struct {
	Addr                  types.String `tfsdk:"addr"`
	RemoteAs              types.Int64  `tfsdk:"remote_as"`
	ConnectSourceLoopback types.Int64  `tfsdk:"connect_source_loopback"`
}
type MSDPVRFPasswords struct {
	Addr       types.String `tfsdk:"addr"`
	Encryption types.Int64  `tfsdk:"encryption"`
	Password   types.String `tfsdk:"password"`
}

func (data MSDPVRF) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/ip/Cisco-IOS-XE-multicast:msdp/vrf=%s", url.QueryEscape(fmt.Sprintf("%v", data.Vrf.Value)))
}

// if last path element has a key -> remove it
func (data MSDPVRF) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data MSDPVRF) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Vrf.Null && !data.Vrf.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"name", data.Vrf.Value)
	}
	if !data.OriginatorId.Null && !data.OriginatorId.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"originator-id", data.OriginatorId.Value)
	}
	if len(data.Peers) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"peer", []interface{}{})
		for index, item := range data.Peers {
			if !item.Addr.Null && !item.Addr.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"peer"+"."+strconv.Itoa(index)+"."+"addr", item.Addr.Value)
			}
			if !item.RemoteAs.Null && !item.RemoteAs.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"peer"+"."+strconv.Itoa(index)+"."+"remote-as", strconv.FormatInt(item.RemoteAs.Value, 10))
			}
			if !item.ConnectSourceLoopback.Null && !item.ConnectSourceLoopback.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"peer"+"."+strconv.Itoa(index)+"."+"connect-source.Loopback", strconv.FormatInt(item.ConnectSourceLoopback.Value, 10))
			}
		}
	}
	if len(data.Passwords) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"password.peer-list", []interface{}{})
		for index, item := range data.Passwords {
			if !item.Addr.Null && !item.Addr.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"password.peer-list"+"."+strconv.Itoa(index)+"."+"addr", item.Addr.Value)
			}
			if !item.Encryption.Null && !item.Encryption.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"password.peer-list"+"."+strconv.Itoa(index)+"."+"encryption", strconv.FormatInt(item.Encryption.Value, 10))
			}
			if !item.Password.Null && !item.Password.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"password.peer-list"+"."+strconv.Itoa(index)+"."+"password", item.Password.Value)
			}
		}
	}
	return body
}

func (data *MSDPVRF) updateFromBody(res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "name"); value.Exists() {
		data.Vrf.Value = value.String()
	} else {
		data.Vrf.Null = true
	}
	if value := res.Get(prefix + "originator-id"); value.Exists() {
		data.OriginatorId.Value = value.String()
	} else {
		data.OriginatorId.Null = true
	}
	for i := range data.Peers {
		key := data.Peers[i].Addr.Value
		if value := res.Get(fmt.Sprintf("%vpeer.#(addr==\"%v\").addr", prefix, key)); value.Exists() {
			data.Peers[i].Addr.Value = value.String()
		} else {
			data.Peers[i].Addr.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vpeer.#(addr==\"%v\").remote-as", prefix, key)); value.Exists() {
			data.Peers[i].RemoteAs.Value = value.Int()
		} else {
			data.Peers[i].RemoteAs.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vpeer.#(addr==\"%v\").connect-source.Loopback", prefix, key)); value.Exists() {
			data.Peers[i].ConnectSourceLoopback.Value = value.Int()
		} else {
			data.Peers[i].ConnectSourceLoopback.Null = true
		}
	}
	for i := range data.Passwords {
		key := data.Passwords[i].Addr.Value
		if value := res.Get(fmt.Sprintf("%vpassword.peer-list.#(addr==\"%v\").addr", prefix, key)); value.Exists() {
			data.Passwords[i].Addr.Value = value.String()
		} else {
			data.Passwords[i].Addr.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vpassword.peer-list.#(addr==\"%v\").encryption", prefix, key)); value.Exists() {
			data.Passwords[i].Encryption.Value = value.Int()
		} else {
			data.Passwords[i].Encryption.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vpassword.peer-list.#(addr==\"%v\").password", prefix, key)); value.Exists() {
			data.Passwords[i].Password.Value = value.String()
		} else {
			data.Passwords[i].Password.Null = true
		}
	}
}

func (data *MSDPVRF) fromBody(res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "originator-id"); value.Exists() {
		data.OriginatorId.Value = value.String()
		data.OriginatorId.Null = false
	}
	if value := res.Get(prefix + "peer"); value.Exists() {
		data.Peers = make([]MSDPVRFPeers, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := MSDPVRFPeers{}
			if cValue := v.Get("addr"); cValue.Exists() {
				item.Addr.Value = cValue.String()
				item.Addr.Null = false
			}
			if cValue := v.Get("remote-as"); cValue.Exists() {
				item.RemoteAs.Value = cValue.Int()
				item.RemoteAs.Null = false
			}
			if cValue := v.Get("connect-source.Loopback"); cValue.Exists() {
				item.ConnectSourceLoopback.Value = cValue.Int()
				item.ConnectSourceLoopback.Null = false
			}
			data.Peers = append(data.Peers, item)
			return true
		})
	}
	if value := res.Get(prefix + "password.peer-list"); value.Exists() {
		data.Passwords = make([]MSDPVRFPasswords, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := MSDPVRFPasswords{}
			if cValue := v.Get("addr"); cValue.Exists() {
				item.Addr.Value = cValue.String()
				item.Addr.Null = false
			}
			if cValue := v.Get("encryption"); cValue.Exists() {
				item.Encryption.Value = cValue.Int()
				item.Encryption.Null = false
			}
			if cValue := v.Get("password"); cValue.Exists() {
				item.Password.Value = cValue.String()
				item.Password.Null = false
			}
			data.Passwords = append(data.Passwords, item)
			return true
		})
	}
}

func (data *MSDPVRF) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Vrf.Unknown {
		data.Vrf.Unknown = false
		data.Vrf.Null = true
	}
	if data.OriginatorId.Unknown {
		data.OriginatorId.Unknown = false
		data.OriginatorId.Null = true
	}
	for i := range data.Peers {
		if data.Peers[i].Addr.Unknown {
			data.Peers[i].Addr.Unknown = false
			data.Peers[i].Addr.Null = true
		}
		if data.Peers[i].RemoteAs.Unknown {
			data.Peers[i].RemoteAs.Unknown = false
			data.Peers[i].RemoteAs.Null = true
		}
		if data.Peers[i].ConnectSourceLoopback.Unknown {
			data.Peers[i].ConnectSourceLoopback.Unknown = false
			data.Peers[i].ConnectSourceLoopback.Null = true
		}
	}
	for i := range data.Passwords {
		if data.Passwords[i].Addr.Unknown {
			data.Passwords[i].Addr.Unknown = false
			data.Passwords[i].Addr.Null = true
		}
		if data.Passwords[i].Encryption.Unknown {
			data.Passwords[i].Encryption.Unknown = false
			data.Passwords[i].Encryption.Null = true
		}
		if data.Passwords[i].Password.Unknown {
			data.Passwords[i].Password.Unknown = false
			data.Passwords[i].Password.Null = true
		}
	}
}

func (data *MSDPVRF) getDeletedListItems(state MSDPVRF) []string {
	deletedListItems := make([]string, 0)
	for _, i := range state.Peers {
		if reflect.ValueOf(i.Addr.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.Peers {
			if i.Addr.Value == j.Addr.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/peer=%v", state.getPath(), i.Addr.Value))
		}
	}
	for _, i := range state.Passwords {
		if reflect.ValueOf(i.Addr.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.Passwords {
			if i.Addr.Value == j.Addr.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/password/peer-list=%v", state.getPath(), i.Addr.Value))
		}
	}
	return deletedListItems
}

func (data *MSDPVRF) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}
