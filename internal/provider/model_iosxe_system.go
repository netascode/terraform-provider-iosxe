// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"regexp"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type System struct {
	Device             types.String `tfsdk:"device"`
	Id                 types.String `tfsdk:"id"`
	Hostname           types.String `tfsdk:"hostname"`
	IpRouting          types.Bool   `tfsdk:"ip_routing"`
	Ipv6UnicastRouting types.Bool   `tfsdk:"ipv6_unicast_routing"`
	Mtu                types.Int64  `tfsdk:"mtu"`
}

func (data System) getPath() string {
	return "Cisco-IOS-XE-native:native"
}

// if last path element has a key -> remove it
func (data System) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data System) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Hostname.Null && !data.Hostname.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"hostname", data.Hostname.Value)
	}
	if !data.IpRouting.Null && !data.IpRouting.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.routing-conf.routing", data.IpRouting.Value)
	}
	if !data.Ipv6UnicastRouting.Null && !data.Ipv6UnicastRouting.Unknown {
		if data.Ipv6UnicastRouting.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6.unicast-routing", map[string]string{})
		}
	}
	if !data.Mtu.Null && !data.Mtu.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"system.Cisco-IOS-XE-switch:mtu.size", strconv.FormatInt(data.Mtu.Value, 10))
	}
	return body
}

func (data *System) updateFromBody(res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "hostname"); value.Exists() {
		data.Hostname.Value = value.String()
	} else {
		data.Hostname.Null = true
	}
	if value := res.Get(prefix + "ip.routing-conf.routing"); value.Exists() {
		data.IpRouting.Value = value.Bool()
	} else {
		data.IpRouting.Value = false
	}
	if value := res.Get(prefix + "ipv6.unicast-routing"); value.Exists() {
		data.Ipv6UnicastRouting.Value = true
	} else {
		data.Ipv6UnicastRouting.Value = false
	}
	if value := res.Get(prefix + "system.Cisco-IOS-XE-switch:mtu.size"); value.Exists() {
		data.Mtu.Value = value.Int()
	} else {
		data.Mtu.Null = true
	}
}

func (data *System) fromBody(res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "hostname"); value.Exists() {
		data.Hostname.Value = value.String()
		data.Hostname.Null = false
	}
	if value := res.Get(prefix + "ip.routing-conf.routing"); value.Exists() {
		data.IpRouting.Value = value.Bool()
		data.IpRouting.Null = false
	} else {
		data.IpRouting.Value = false
		data.IpRouting.Null = false
	}
	if value := res.Get(prefix + "ipv6.unicast-routing"); value.Exists() {
		data.Ipv6UnicastRouting.Value = true
		data.Ipv6UnicastRouting.Null = false
	} else {
		data.Ipv6UnicastRouting.Value = false
		data.Ipv6UnicastRouting.Null = false
	}
	if value := res.Get(prefix + "system.Cisco-IOS-XE-switch:mtu.size"); value.Exists() {
		data.Mtu.Value = value.Int()
		data.Mtu.Null = false
	}
}

func (data *System) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Hostname.Unknown {
		data.Hostname.Unknown = false
		data.Hostname.Null = true
	}
	if data.IpRouting.Unknown {
		data.IpRouting.Unknown = false
		data.IpRouting.Null = true
	}
	if data.Ipv6UnicastRouting.Unknown {
		data.Ipv6UnicastRouting.Unknown = false
		data.Ipv6UnicastRouting.Null = true
	}
	if data.Mtu.Unknown {
		data.Mtu.Unknown = false
		data.Mtu.Null = true
	}
}

func (data *System) getDeletedListItems(state System) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *System) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.Ipv6UnicastRouting.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv6/unicast-routing", data.getPath()))
	}
	return emptyLeafsDelete
}
