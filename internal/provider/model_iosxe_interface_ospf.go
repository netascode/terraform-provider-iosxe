// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"net/url"
	"regexp"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type InterfaceOSPF struct {
	Device                       types.String `tfsdk:"device"`
	Id                           types.String `tfsdk:"id"`
	Type                         types.String `tfsdk:"type"`
	Name                         types.String `tfsdk:"name"`
	Cost                         types.Int64  `tfsdk:"cost"`
	DeadInterval                 types.Int64  `tfsdk:"dead_interval"`
	HelloInterval                types.Int64  `tfsdk:"hello_interval"`
	MtuIgnore                    types.Bool   `tfsdk:"mtu_ignore"`
	NetworkTypeBroadcast         types.Bool   `tfsdk:"network_type_broadcast"`
	NetworkTypeNonBroadcast      types.Bool   `tfsdk:"network_type_non_broadcast"`
	NetworkTypePointToMultipoint types.Bool   `tfsdk:"network_type_point_to_multipoint"`
	NetworkTypePointToPoint      types.Bool   `tfsdk:"network_type_point_to_point"`
	Priority                     types.Int64  `tfsdk:"priority"`
}

func (data InterfaceOSPF) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/interface/%s=%v/ip/Cisco-IOS-XE-ospf:router-ospf/ospf", url.QueryEscape(fmt.Sprintf("%v", data.Type.Value)), url.QueryEscape(fmt.Sprintf("%v", data.Name.Value)))
}

// if last path element has a key -> remove it
func (data InterfaceOSPF) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data InterfaceOSPF) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Cost.Null && !data.Cost.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"cost", strconv.FormatInt(data.Cost.Value, 10))
	}
	if !data.DeadInterval.Null && !data.DeadInterval.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"dead-interval", strconv.FormatInt(data.DeadInterval.Value, 10))
	}
	if !data.HelloInterval.Null && !data.HelloInterval.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"hello-interval", strconv.FormatInt(data.HelloInterval.Value, 10))
	}
	if !data.MtuIgnore.Null && !data.MtuIgnore.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"mtu-ignore", data.MtuIgnore.Value)
	}
	if !data.NetworkTypeBroadcast.Null && !data.NetworkTypeBroadcast.Unknown {
		if data.NetworkTypeBroadcast.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network.broadcast", map[string]string{})
		}
	}
	if !data.NetworkTypeNonBroadcast.Null && !data.NetworkTypeNonBroadcast.Unknown {
		if data.NetworkTypeNonBroadcast.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network.non-broadcast", map[string]string{})
		}
	}
	if !data.NetworkTypePointToMultipoint.Null && !data.NetworkTypePointToMultipoint.Unknown {
		if data.NetworkTypePointToMultipoint.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network.point-to-multipoint", map[string]string{})
		}
	}
	if !data.NetworkTypePointToPoint.Null && !data.NetworkTypePointToPoint.Unknown {
		if data.NetworkTypePointToPoint.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network.point-to-point", map[string]string{})
		}
	}
	if !data.Priority.Null && !data.Priority.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"priority", strconv.FormatInt(data.Priority.Value, 10))
	}
	return body
}

func (data *InterfaceOSPF) updateFromBody(res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "cost"); value.Exists() {
		data.Cost.Value = value.Int()
	} else {
		data.Cost.Null = true
	}
	if value := res.Get(prefix + "dead-interval"); value.Exists() {
		data.DeadInterval.Value = value.Int()
	} else {
		data.DeadInterval.Null = true
	}
	if value := res.Get(prefix + "hello-interval"); value.Exists() {
		data.HelloInterval.Value = value.Int()
	} else {
		data.HelloInterval.Null = true
	}
	if value := res.Get(prefix + "mtu-ignore"); value.Exists() {
		data.MtuIgnore.Value = value.Bool()
	} else {
		data.MtuIgnore.Value = false
	}
	if value := res.Get(prefix + "network.broadcast"); value.Exists() {
		data.NetworkTypeBroadcast.Value = true
	} else {
		data.NetworkTypeBroadcast.Value = false
	}
	if value := res.Get(prefix + "network.non-broadcast"); value.Exists() {
		data.NetworkTypeNonBroadcast.Value = true
	} else {
		data.NetworkTypeNonBroadcast.Value = false
	}
	if value := res.Get(prefix + "network.point-to-multipoint"); value.Exists() {
		data.NetworkTypePointToMultipoint.Value = true
	} else {
		data.NetworkTypePointToMultipoint.Value = false
	}
	if value := res.Get(prefix + "network.point-to-point"); value.Exists() {
		data.NetworkTypePointToPoint.Value = true
	} else {
		data.NetworkTypePointToPoint.Value = false
	}
	if value := res.Get(prefix + "priority"); value.Exists() {
		data.Priority.Value = value.Int()
	} else {
		data.Priority.Null = true
	}
}

func (data *InterfaceOSPF) fromBody(res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "cost"); value.Exists() {
		data.Cost.Value = value.Int()
		data.Cost.Null = false
	}
	if value := res.Get(prefix + "dead-interval"); value.Exists() {
		data.DeadInterval.Value = value.Int()
		data.DeadInterval.Null = false
	}
	if value := res.Get(prefix + "hello-interval"); value.Exists() {
		data.HelloInterval.Value = value.Int()
		data.HelloInterval.Null = false
	}
	if value := res.Get(prefix + "mtu-ignore"); value.Exists() {
		data.MtuIgnore.Value = value.Bool()
		data.MtuIgnore.Null = false
	} else {
		data.MtuIgnore.Value = false
		data.MtuIgnore.Null = false
	}
	if value := res.Get(prefix + "network.broadcast"); value.Exists() {
		data.NetworkTypeBroadcast.Value = true
		data.NetworkTypeBroadcast.Null = false
	} else {
		data.NetworkTypeBroadcast.Value = false
		data.NetworkTypeBroadcast.Null = false
	}
	if value := res.Get(prefix + "network.non-broadcast"); value.Exists() {
		data.NetworkTypeNonBroadcast.Value = true
		data.NetworkTypeNonBroadcast.Null = false
	} else {
		data.NetworkTypeNonBroadcast.Value = false
		data.NetworkTypeNonBroadcast.Null = false
	}
	if value := res.Get(prefix + "network.point-to-multipoint"); value.Exists() {
		data.NetworkTypePointToMultipoint.Value = true
		data.NetworkTypePointToMultipoint.Null = false
	} else {
		data.NetworkTypePointToMultipoint.Value = false
		data.NetworkTypePointToMultipoint.Null = false
	}
	if value := res.Get(prefix + "network.point-to-point"); value.Exists() {
		data.NetworkTypePointToPoint.Value = true
		data.NetworkTypePointToPoint.Null = false
	} else {
		data.NetworkTypePointToPoint.Value = false
		data.NetworkTypePointToPoint.Null = false
	}
	if value := res.Get(prefix + "priority"); value.Exists() {
		data.Priority.Value = value.Int()
		data.Priority.Null = false
	}
}

func (data *InterfaceOSPF) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Type.Unknown {
		data.Type.Unknown = false
		data.Type.Null = true
	}
	if data.Name.Unknown {
		data.Name.Unknown = false
		data.Name.Null = true
	}
	if data.Cost.Unknown {
		data.Cost.Unknown = false
		data.Cost.Null = true
	}
	if data.DeadInterval.Unknown {
		data.DeadInterval.Unknown = false
		data.DeadInterval.Null = true
	}
	if data.HelloInterval.Unknown {
		data.HelloInterval.Unknown = false
		data.HelloInterval.Null = true
	}
	if data.MtuIgnore.Unknown {
		data.MtuIgnore.Unknown = false
		data.MtuIgnore.Null = true
	}
	if data.NetworkTypeBroadcast.Unknown {
		data.NetworkTypeBroadcast.Unknown = false
		data.NetworkTypeBroadcast.Null = true
	}
	if data.NetworkTypeNonBroadcast.Unknown {
		data.NetworkTypeNonBroadcast.Unknown = false
		data.NetworkTypeNonBroadcast.Null = true
	}
	if data.NetworkTypePointToMultipoint.Unknown {
		data.NetworkTypePointToMultipoint.Unknown = false
		data.NetworkTypePointToMultipoint.Null = true
	}
	if data.NetworkTypePointToPoint.Unknown {
		data.NetworkTypePointToPoint.Unknown = false
		data.NetworkTypePointToPoint.Null = true
	}
	if data.Priority.Unknown {
		data.Priority.Unknown = false
		data.Priority.Null = true
	}
}

func (data *InterfaceOSPF) getDeletedListItems(state InterfaceOSPF) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}
