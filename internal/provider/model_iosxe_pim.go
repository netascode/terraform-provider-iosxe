// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"reflect"
	"regexp"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type PIM struct {
	Device                        types.String      `tfsdk:"device"`
	Id                            types.String      `tfsdk:"id"`
	Autorp                        types.Bool        `tfsdk:"autorp"`
	AutorpListener                types.Bool        `tfsdk:"autorp_listener"`
	BsrCandidateLoopback          types.Int64       `tfsdk:"bsr_candidate_loopback"`
	BsrCandidateMask              types.Int64       `tfsdk:"bsr_candidate_mask"`
	BsrCandidatePriority          types.Int64       `tfsdk:"bsr_candidate_priority"`
	BsrCandidateAcceptRpCandidate types.String      `tfsdk:"bsr_candidate_accept_rp_candidate"`
	SsmRange                      types.String      `tfsdk:"ssm_range"`
	SsmDefault                    types.Bool        `tfsdk:"ssm_default"`
	RpAddress                     types.String      `tfsdk:"rp_address"`
	RpAddressOverride             types.Bool        `tfsdk:"rp_address_override"`
	RpAddressBidir                types.Bool        `tfsdk:"rp_address_bidir"`
	RpAddresses                   []PIMRpAddresses  `tfsdk:"rp_addresses"`
	RpCandidates                  []PIMRpCandidates `tfsdk:"rp_candidates"`
}
type PIMRpAddresses struct {
	AccessList types.String `tfsdk:"access_list"`
	RpAddress  types.String `tfsdk:"rp_address"`
	Override   types.Bool   `tfsdk:"override"`
	Bidir      types.Bool   `tfsdk:"bidir"`
}
type PIMRpCandidates struct {
	Interface types.String `tfsdk:"interface"`
	GroupList types.String `tfsdk:"group_list"`
	Interval  types.Int64  `tfsdk:"interval"`
	Priority  types.Int64  `tfsdk:"priority"`
	Bidir     types.Bool   `tfsdk:"bidir"`
}

func (data PIM) getPath() string {
	return "Cisco-IOS-XE-native:native/ip/pim"
}

// if last path element has a key -> remove it
func (data PIM) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data PIM) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Autorp.Null && !data.Autorp.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:autorp-container.autorp", data.Autorp.Value)
	}
	if !data.AutorpListener.Null && !data.AutorpListener.Unknown {
		if data.AutorpListener.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:autorp-container.listener", map[string]string{})
		}
	}
	if !data.BsrCandidateLoopback.Null && !data.BsrCandidateLoopback.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:bsr-candidate.Loopback", strconv.FormatInt(data.BsrCandidateLoopback.Value, 10))
	}
	if !data.BsrCandidateMask.Null && !data.BsrCandidateMask.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:bsr-candidate.mask", strconv.FormatInt(data.BsrCandidateMask.Value, 10))
	}
	if !data.BsrCandidatePriority.Null && !data.BsrCandidatePriority.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:bsr-candidate.priority", strconv.FormatInt(data.BsrCandidatePriority.Value, 10))
	}
	if !data.BsrCandidateAcceptRpCandidate.Null && !data.BsrCandidateAcceptRpCandidate.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:bsr-candidate.accept-rp-candidate", data.BsrCandidateAcceptRpCandidate.Value)
	}
	if !data.SsmRange.Null && !data.SsmRange.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:ssm.range", data.SsmRange.Value)
	}
	if !data.SsmDefault.Null && !data.SsmDefault.Unknown {
		if data.SsmDefault.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:ssm.default", map[string]string{})
		}
	}
	if !data.RpAddress.Null && !data.RpAddress.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-address-conf.address", data.RpAddress.Value)
	}
	if !data.RpAddressOverride.Null && !data.RpAddressOverride.Unknown {
		if data.RpAddressOverride.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-address-conf.override", map[string]string{})
		}
	}
	if !data.RpAddressBidir.Null && !data.RpAddressBidir.Unknown {
		if data.RpAddressBidir.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-address-conf.bidir", map[string]string{})
		}
	}
	if len(data.RpAddresses) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-address-list", []interface{}{})
		for index, item := range data.RpAddresses {
			if !item.AccessList.Null && !item.AccessList.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-address-list"+"."+strconv.Itoa(index)+"."+"access-list", item.AccessList.Value)
			}
			if !item.RpAddress.Null && !item.RpAddress.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-address-list"+"."+strconv.Itoa(index)+"."+"rp-address", item.RpAddress.Value)
			}
			if !item.Override.Null && !item.Override.Unknown {
				if item.Override.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-address-list"+"."+strconv.Itoa(index)+"."+"override", map[string]string{})
				}
			}
			if !item.Bidir.Null && !item.Bidir.Unknown {
				if item.Bidir.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-address-list"+"."+strconv.Itoa(index)+"."+"bidir", map[string]string{})
				}
			}
		}
	}
	if len(data.RpCandidates) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-candidate", []interface{}{})
		for index, item := range data.RpCandidates {
			if !item.Interface.Null && !item.Interface.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-candidate"+"."+strconv.Itoa(index)+"."+"interface", item.Interface.Value)
			}
			if !item.GroupList.Null && !item.GroupList.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-candidate"+"."+strconv.Itoa(index)+"."+"group-list", item.GroupList.Value)
			}
			if !item.Interval.Null && !item.Interval.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-candidate"+"."+strconv.Itoa(index)+"."+"interval", strconv.FormatInt(item.Interval.Value, 10))
			}
			if !item.Priority.Null && !item.Priority.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-candidate"+"."+strconv.Itoa(index)+"."+"priority", strconv.FormatInt(item.Priority.Value, 10))
			}
			if !item.Bidir.Null && !item.Bidir.Unknown {
				if item.Bidir.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:rp-candidate"+"."+strconv.Itoa(index)+"."+"bidir", map[string]string{})
				}
			}
		}
	}
	return body
}

func (data *PIM) updateFromBody(res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:autorp-container.autorp"); value.Exists() {
		data.Autorp.Value = value.Bool()
	} else {
		data.Autorp.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:autorp-container.listener"); value.Exists() {
		data.AutorpListener.Value = true
	} else {
		data.AutorpListener.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:bsr-candidate.Loopback"); value.Exists() {
		data.BsrCandidateLoopback.Value = value.Int()
	} else {
		data.BsrCandidateLoopback.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:bsr-candidate.mask"); value.Exists() {
		data.BsrCandidateMask.Value = value.Int()
	} else {
		data.BsrCandidateMask.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:bsr-candidate.priority"); value.Exists() {
		data.BsrCandidatePriority.Value = value.Int()
	} else {
		data.BsrCandidatePriority.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:bsr-candidate.accept-rp-candidate"); value.Exists() {
		data.BsrCandidateAcceptRpCandidate.Value = value.String()
	} else {
		data.BsrCandidateAcceptRpCandidate.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:ssm.range"); value.Exists() {
		data.SsmRange.Value = value.String()
	} else {
		data.SsmRange.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:ssm.default"); value.Exists() {
		data.SsmDefault.Value = true
	} else {
		data.SsmDefault.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:rp-address-conf.address"); value.Exists() {
		data.RpAddress.Value = value.String()
	} else {
		data.RpAddress.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:rp-address-conf.override"); value.Exists() {
		data.RpAddressOverride.Value = true
	} else {
		data.RpAddressOverride.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:rp-address-conf.bidir"); value.Exists() {
		data.RpAddressBidir.Value = true
	} else {
		data.RpAddressBidir.Value = false
	}
	for i := range data.RpAddresses {
		key := data.RpAddresses[i].AccessList.Value
		if value := res.Get(fmt.Sprintf("%vCisco-IOS-XE-multicast:rp-address-list.#(access-list==\"%v\").access-list", prefix, key)); value.Exists() {
			data.RpAddresses[i].AccessList.Value = value.String()
		} else {
			data.RpAddresses[i].AccessList.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vCisco-IOS-XE-multicast:rp-address-list.#(access-list==\"%v\").rp-address", prefix, key)); value.Exists() {
			data.RpAddresses[i].RpAddress.Value = value.String()
		} else {
			data.RpAddresses[i].RpAddress.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vCisco-IOS-XE-multicast:rp-address-list.#(access-list==\"%v\").override", prefix, key)); value.Exists() {
			data.RpAddresses[i].Override.Value = true
		} else {
			data.RpAddresses[i].Override.Value = false
		}
		if value := res.Get(fmt.Sprintf("%vCisco-IOS-XE-multicast:rp-address-list.#(access-list==\"%v\").bidir", prefix, key)); value.Exists() {
			data.RpAddresses[i].Bidir.Value = true
		} else {
			data.RpAddresses[i].Bidir.Value = false
		}
	}
	for i := range data.RpCandidates {
		key := data.RpCandidates[i].Interface.Value
		if value := res.Get(fmt.Sprintf("%vCisco-IOS-XE-multicast:rp-candidate.#(interface==\"%v\").interface", prefix, key)); value.Exists() {
			data.RpCandidates[i].Interface.Value = value.String()
		} else {
			data.RpCandidates[i].Interface.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vCisco-IOS-XE-multicast:rp-candidate.#(interface==\"%v\").group-list", prefix, key)); value.Exists() {
			data.RpCandidates[i].GroupList.Value = value.String()
		} else {
			data.RpCandidates[i].GroupList.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vCisco-IOS-XE-multicast:rp-candidate.#(interface==\"%v\").interval", prefix, key)); value.Exists() {
			data.RpCandidates[i].Interval.Value = value.Int()
		} else {
			data.RpCandidates[i].Interval.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vCisco-IOS-XE-multicast:rp-candidate.#(interface==\"%v\").priority", prefix, key)); value.Exists() {
			data.RpCandidates[i].Priority.Value = value.Int()
		} else {
			data.RpCandidates[i].Priority.Null = true
		}
		if value := res.Get(fmt.Sprintf("%vCisco-IOS-XE-multicast:rp-candidate.#(interface==\"%v\").bidir", prefix, key)); value.Exists() {
			data.RpCandidates[i].Bidir.Value = true
		} else {
			data.RpCandidates[i].Bidir.Value = false
		}
	}
}

func (data *PIM) fromBody(res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:autorp-container.autorp"); value.Exists() {
		data.Autorp.Value = value.Bool()
		data.Autorp.Null = false
	} else {
		data.Autorp.Value = false
		data.Autorp.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:autorp-container.listener"); value.Exists() {
		data.AutorpListener.Value = true
		data.AutorpListener.Null = false
	} else {
		data.AutorpListener.Value = false
		data.AutorpListener.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:bsr-candidate.Loopback"); value.Exists() {
		data.BsrCandidateLoopback.Value = value.Int()
		data.BsrCandidateLoopback.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:bsr-candidate.mask"); value.Exists() {
		data.BsrCandidateMask.Value = value.Int()
		data.BsrCandidateMask.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:bsr-candidate.priority"); value.Exists() {
		data.BsrCandidatePriority.Value = value.Int()
		data.BsrCandidatePriority.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:bsr-candidate.accept-rp-candidate"); value.Exists() {
		data.BsrCandidateAcceptRpCandidate.Value = value.String()
		data.BsrCandidateAcceptRpCandidate.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:ssm.range"); value.Exists() {
		data.SsmRange.Value = value.String()
		data.SsmRange.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:ssm.default"); value.Exists() {
		data.SsmDefault.Value = true
		data.SsmDefault.Null = false
	} else {
		data.SsmDefault.Value = false
		data.SsmDefault.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:rp-address-conf.address"); value.Exists() {
		data.RpAddress.Value = value.String()
		data.RpAddress.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:rp-address-conf.override"); value.Exists() {
		data.RpAddressOverride.Value = true
		data.RpAddressOverride.Null = false
	} else {
		data.RpAddressOverride.Value = false
		data.RpAddressOverride.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:rp-address-conf.bidir"); value.Exists() {
		data.RpAddressBidir.Value = true
		data.RpAddressBidir.Null = false
	} else {
		data.RpAddressBidir.Value = false
		data.RpAddressBidir.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:rp-address-list"); value.Exists() {
		data.RpAddresses = make([]PIMRpAddresses, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := PIMRpAddresses{}
			if cValue := v.Get("access-list"); cValue.Exists() {
				item.AccessList.Value = cValue.String()
				item.AccessList.Null = false
			}
			if cValue := v.Get("rp-address"); cValue.Exists() {
				item.RpAddress.Value = cValue.String()
				item.RpAddress.Null = false
			}
			if cValue := v.Get("override"); cValue.Exists() {
				item.Override.Value = true
				item.Override.Null = false
			}
			if cValue := v.Get("bidir"); cValue.Exists() {
				item.Bidir.Value = true
				item.Bidir.Null = false
			}
			data.RpAddresses = append(data.RpAddresses, item)
			return true
		})
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:rp-candidate"); value.Exists() {
		data.RpCandidates = make([]PIMRpCandidates, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := PIMRpCandidates{}
			if cValue := v.Get("interface"); cValue.Exists() {
				item.Interface.Value = cValue.String()
				item.Interface.Null = false
			}
			if cValue := v.Get("group-list"); cValue.Exists() {
				item.GroupList.Value = cValue.String()
				item.GroupList.Null = false
			}
			if cValue := v.Get("interval"); cValue.Exists() {
				item.Interval.Value = cValue.Int()
				item.Interval.Null = false
			}
			if cValue := v.Get("priority"); cValue.Exists() {
				item.Priority.Value = cValue.Int()
				item.Priority.Null = false
			}
			if cValue := v.Get("bidir"); cValue.Exists() {
				item.Bidir.Value = true
				item.Bidir.Null = false
			}
			data.RpCandidates = append(data.RpCandidates, item)
			return true
		})
	}
}

func (data *PIM) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Autorp.Unknown {
		data.Autorp.Unknown = false
		data.Autorp.Null = true
	}
	if data.AutorpListener.Unknown {
		data.AutorpListener.Unknown = false
		data.AutorpListener.Null = true
	}
	if data.BsrCandidateLoopback.Unknown {
		data.BsrCandidateLoopback.Unknown = false
		data.BsrCandidateLoopback.Null = true
	}
	if data.BsrCandidateMask.Unknown {
		data.BsrCandidateMask.Unknown = false
		data.BsrCandidateMask.Null = true
	}
	if data.BsrCandidatePriority.Unknown {
		data.BsrCandidatePriority.Unknown = false
		data.BsrCandidatePriority.Null = true
	}
	if data.BsrCandidateAcceptRpCandidate.Unknown {
		data.BsrCandidateAcceptRpCandidate.Unknown = false
		data.BsrCandidateAcceptRpCandidate.Null = true
	}
	if data.SsmRange.Unknown {
		data.SsmRange.Unknown = false
		data.SsmRange.Null = true
	}
	if data.SsmDefault.Unknown {
		data.SsmDefault.Unknown = false
		data.SsmDefault.Null = true
	}
	if data.RpAddress.Unknown {
		data.RpAddress.Unknown = false
		data.RpAddress.Null = true
	}
	if data.RpAddressOverride.Unknown {
		data.RpAddressOverride.Unknown = false
		data.RpAddressOverride.Null = true
	}
	if data.RpAddressBidir.Unknown {
		data.RpAddressBidir.Unknown = false
		data.RpAddressBidir.Null = true
	}
	for i := range data.RpAddresses {
		if data.RpAddresses[i].AccessList.Unknown {
			data.RpAddresses[i].AccessList.Unknown = false
			data.RpAddresses[i].AccessList.Null = true
		}
		if data.RpAddresses[i].RpAddress.Unknown {
			data.RpAddresses[i].RpAddress.Unknown = false
			data.RpAddresses[i].RpAddress.Null = true
		}
		if data.RpAddresses[i].Override.Unknown {
			data.RpAddresses[i].Override.Unknown = false
			data.RpAddresses[i].Override.Null = true
		}
		if data.RpAddresses[i].Bidir.Unknown {
			data.RpAddresses[i].Bidir.Unknown = false
			data.RpAddresses[i].Bidir.Null = true
		}
	}
	for i := range data.RpCandidates {
		if data.RpCandidates[i].Interface.Unknown {
			data.RpCandidates[i].Interface.Unknown = false
			data.RpCandidates[i].Interface.Null = true
		}
		if data.RpCandidates[i].GroupList.Unknown {
			data.RpCandidates[i].GroupList.Unknown = false
			data.RpCandidates[i].GroupList.Null = true
		}
		if data.RpCandidates[i].Interval.Unknown {
			data.RpCandidates[i].Interval.Unknown = false
			data.RpCandidates[i].Interval.Null = true
		}
		if data.RpCandidates[i].Priority.Unknown {
			data.RpCandidates[i].Priority.Unknown = false
			data.RpCandidates[i].Priority.Null = true
		}
		if data.RpCandidates[i].Bidir.Unknown {
			data.RpCandidates[i].Bidir.Unknown = false
			data.RpCandidates[i].Bidir.Null = true
		}
	}
}

func (data *PIM) getDeletedListItems(state PIM) []string {
	deletedListItems := make([]string, 0)
	for _, i := range state.RpAddresses {
		if reflect.ValueOf(i.AccessList.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.RpAddresses {
			if i.AccessList.Value == j.AccessList.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/Cisco-IOS-XE-multicast:rp-address-list=%v", state.getPath(), i.AccessList.Value))
		}
	}
	for _, i := range state.RpCandidates {
		if reflect.ValueOf(i.Interface.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.RpCandidates {
			if i.Interface.Value == j.Interface.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/Cisco-IOS-XE-multicast:rp-candidate=%v", state.getPath(), i.Interface.Value))
		}
	}
	return deletedListItems
}

func (data *PIM) getEmptyLeafsDelete() []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.AutorpListener.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-multicast:autorp-container/listener", data.getPath()))
	}
	if !data.SsmDefault.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-multicast:ssm/default", data.getPath()))
	}
	if !data.RpAddressOverride.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-multicast:rp-address-conf/override", data.getPath()))
	}
	if !data.RpAddressBidir.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-multicast:rp-address-conf/bidir", data.getPath()))
	}
	return emptyLeafsDelete
}
