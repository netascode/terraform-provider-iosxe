// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-restconf"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &InterfaceOSPFDataSource{}
	_ datasource.DataSourceWithConfigure = &InterfaceOSPFDataSource{}
)

func NewInterfaceOSPFDataSource() datasource.DataSource {
	return &InterfaceOSPFDataSource{}
}

type InterfaceOSPFDataSource struct {
	clients map[string]*restconf.Client
}

func (d *InterfaceOSPFDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_interface_ospf"
}

func (d *InterfaceOSPFDataSource) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Interface OSPF configuration.",

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The path of the retrieved object.",
				Type:                types.StringType,
				Computed:            true,
			},
			"type": {
				MarkdownDescription: "Interface type",
				Type:                types.StringType,
				Required:            true,
			},
			"name": {
				MarkdownDescription: "",
				Type:                types.StringType,
				Required:            true,
			},
			"cost": {
				MarkdownDescription: "Route cost of this interface",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"dead_interval": {
				MarkdownDescription: "Interval after which a neighbor is declared dead",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"hello_interval": {
				MarkdownDescription: "Time between HELLO packets",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"mtu_ignore": {
				MarkdownDescription: "Ignores the MTU in DBD packets",
				Type:                types.BoolType,
				Computed:            true,
			},
			"network_type_broadcast": {
				MarkdownDescription: "Specify OSPF broadcast multi-access network",
				Type:                types.BoolType,
				Computed:            true,
			},
			"network_type_non_broadcast": {
				MarkdownDescription: "Specify OSPF NBMA network",
				Type:                types.BoolType,
				Computed:            true,
			},
			"network_type_point_to_multipoint": {
				MarkdownDescription: "Specify OSPF point-to-multipoint network",
				Type:                types.BoolType,
				Computed:            true,
			},
			"network_type_point_to_point": {
				MarkdownDescription: "Specify OSPF point-to-point network",
				Type:                types.BoolType,
				Computed:            true,
			},
			"priority": {
				MarkdownDescription: "Router priority",
				Type:                types.Int64Type,
				Computed:            true,
			},
		},
	}, nil
}

func (d *InterfaceOSPFDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.clients = req.ProviderData.(map[string]*restconf.Client)
}

func (d *InterfaceOSPFDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config InterfaceOSPF

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	res, err := d.clients[config.Device.ValueString()].GetData(config.getPath())
	if res.StatusCode == 404 {
		config = InterfaceOSPF{Device: config.Device}
	} else {
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
			return
		}

		config.fromBody(ctx, res.Res)
	}

	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
