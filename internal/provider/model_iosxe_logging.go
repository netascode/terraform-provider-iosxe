// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type Logging struct {
	Device              types.String                 `tfsdk:"device"`
	Id                  types.String                 `tfsdk:"id"`
	MonitorSeverity     types.String                 `tfsdk:"monitor_severity"`
	BufferedSize        types.Int64                  `tfsdk:"buffered_size"`
	BufferedSeverity    types.String                 `tfsdk:"buffered_severity"`
	ConsoleSeverity     types.String                 `tfsdk:"console_severity"`
	Facility            types.String                 `tfsdk:"facility"`
	HistorySize         types.Int64                  `tfsdk:"history_size"`
	HistorySeverity     types.String                 `tfsdk:"history_severity"`
	Trap                types.Bool                   `tfsdk:"trap"`
	TrapSeverity        types.String                 `tfsdk:"trap_severity"`
	OriginIdType        types.String                 `tfsdk:"origin_id_type"`
	OriginIdName        types.String                 `tfsdk:"origin_id_name"`
	FileName            types.String                 `tfsdk:"file_name"`
	FileMaxSize         types.Int64                  `tfsdk:"file_max_size"`
	FileMinSize         types.Int64                  `tfsdk:"file_min_size"`
	FileSeverity        types.String                 `tfsdk:"file_severity"`
	SourceInterface     types.String                 `tfsdk:"source_interface"`
	SourceInterfacesVrf []LoggingSourceInterfacesVrf `tfsdk:"source_interfaces_vrf"`
	Ipv4Hosts           []LoggingIpv4Hosts           `tfsdk:"ipv4_hosts"`
	Ipv4VrfHosts        []LoggingIpv4VrfHosts        `tfsdk:"ipv4_vrf_hosts"`
	Ipv6Hosts           []LoggingIpv6Hosts           `tfsdk:"ipv6_hosts"`
	Ipv6VrfHosts        []LoggingIpv6VrfHosts        `tfsdk:"ipv6_vrf_hosts"`
}
type LoggingSourceInterfacesVrf struct {
	Vrf           types.String `tfsdk:"vrf"`
	InterfaceName types.String `tfsdk:"interface_name"`
}
type LoggingIpv4Hosts struct {
	Ipv4Host types.String `tfsdk:"ipv4_host"`
}
type LoggingIpv4VrfHosts struct {
	Ipv4Host types.String `tfsdk:"ipv4_host"`
	Vrf      types.String `tfsdk:"vrf"`
}
type LoggingIpv6Hosts struct {
	Ipv6Host types.String `tfsdk:"ipv6_host"`
}
type LoggingIpv6VrfHosts struct {
	Ipv6Host types.String `tfsdk:"ipv6_host"`
	Vrf      types.String `tfsdk:"vrf"`
}

func (data Logging) getPath() string {
	return "Cisco-IOS-XE-native:native/logging"
}

// if last path element has a key -> remove it
func (data Logging) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data Logging) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.MonitorSeverity.Null && !data.MonitorSeverity.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"monitor-config.common-config.monitor.severity", data.MonitorSeverity.Value)
	}
	if !data.BufferedSize.Null && !data.BufferedSize.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"buffered.size-value", strconv.FormatInt(data.BufferedSize.Value, 10))
	}
	if !data.BufferedSeverity.Null && !data.BufferedSeverity.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"buffered.severity-level", data.BufferedSeverity.Value)
	}
	if !data.ConsoleSeverity.Null && !data.ConsoleSeverity.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"console-config.common-config.console.severity", data.ConsoleSeverity.Value)
	}
	if !data.Facility.Null && !data.Facility.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"facility", data.Facility.Value)
	}
	if !data.HistorySize.Null && !data.HistorySize.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"history.size", strconv.FormatInt(data.HistorySize.Value, 10))
	}
	if !data.HistorySeverity.Null && !data.HistorySeverity.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"history.severity-level", data.HistorySeverity.Value)
	}
	if !data.Trap.Null && !data.Trap.Unknown {
		if data.Trap.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"trap", map[string]string{})
		}
	}
	if !data.TrapSeverity.Null && !data.TrapSeverity.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"trap.severity", data.TrapSeverity.Value)
	}
	if !data.OriginIdType.Null && !data.OriginIdType.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"origin-id.type-value", data.OriginIdType.Value)
	}
	if !data.OriginIdName.Null && !data.OriginIdName.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"origin-id.string", data.OriginIdName.Value)
	}
	if !data.FileName.Null && !data.FileName.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"file.name", data.FileName.Value)
	}
	if !data.FileMaxSize.Null && !data.FileMaxSize.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"file.max-size", strconv.FormatInt(data.FileMaxSize.Value, 10))
	}
	if !data.FileMinSize.Null && !data.FileMinSize.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"file.min-size", strconv.FormatInt(data.FileMinSize.Value, 10))
	}
	if !data.FileSeverity.Null && !data.FileSeverity.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"file.severity", data.FileSeverity.Value)
	}
	if !data.SourceInterface.Null && !data.SourceInterface.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"source-interface-conf.interface-name-non-vrf", data.SourceInterface.Value)
	}
	if len(data.SourceInterfacesVrf) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"source-interface-conf.source-interface-vrf", []interface{}{})
		for index, item := range data.SourceInterfacesVrf {
			if !item.Vrf.Null && !item.Vrf.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"source-interface-conf.source-interface-vrf"+"."+strconv.Itoa(index)+"."+"vrf", item.Vrf.Value)
			}
			if !item.InterfaceName.Null && !item.InterfaceName.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"source-interface-conf.source-interface-vrf"+"."+strconv.Itoa(index)+"."+"interface-name", item.InterfaceName.Value)
			}
		}
	}
	if len(data.Ipv4Hosts) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host.ipv4-host-list", []interface{}{})
		for index, item := range data.Ipv4Hosts {
			if !item.Ipv4Host.Null && !item.Ipv4Host.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host.ipv4-host-list"+"."+strconv.Itoa(index)+"."+"ipv4-host", item.Ipv4Host.Value)
			}
		}
	}
	if len(data.Ipv4VrfHosts) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host.ipv4-host-vrf-list", []interface{}{})
		for index, item := range data.Ipv4VrfHosts {
			if !item.Ipv4Host.Null && !item.Ipv4Host.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host.ipv4-host-vrf-list"+"."+strconv.Itoa(index)+"."+"ipv4-host", item.Ipv4Host.Value)
			}
			if !item.Vrf.Null && !item.Vrf.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host.ipv4-host-vrf-list"+"."+strconv.Itoa(index)+"."+"vrf", item.Vrf.Value)
			}
		}
	}
	if len(data.Ipv6Hosts) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host.ipv6.ipv6-host-list", []interface{}{})
		for index, item := range data.Ipv6Hosts {
			if !item.Ipv6Host.Null && !item.Ipv6Host.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host.ipv6.ipv6-host-list"+"."+strconv.Itoa(index)+"."+"ipv6-host", item.Ipv6Host.Value)
			}
		}
	}
	if len(data.Ipv6VrfHosts) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host.ipv6.ipv6-host-vrf-list", []interface{}{})
		for index, item := range data.Ipv6VrfHosts {
			if !item.Ipv6Host.Null && !item.Ipv6Host.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host.ipv6.ipv6-host-vrf-list"+"."+strconv.Itoa(index)+"."+"ipv6-host", item.Ipv6Host.Value)
			}
			if !item.Vrf.Null && !item.Vrf.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host.ipv6.ipv6-host-vrf-list"+"."+strconv.Itoa(index)+"."+"vrf", item.Vrf.Value)
			}
		}
	}
	return body
}

func (data *Logging) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "monitor-config.common-config.monitor.severity"); value.Exists() {
		data.MonitorSeverity.Value = value.String()
	} else {
		data.MonitorSeverity.Null = true
	}
	if value := res.Get(prefix + "buffered.size-value"); value.Exists() {
		data.BufferedSize.Value = value.Int()
	} else {
		data.BufferedSize.Null = true
	}
	if value := res.Get(prefix + "buffered.severity-level"); value.Exists() {
		data.BufferedSeverity.Value = value.String()
	} else {
		data.BufferedSeverity.Null = true
	}
	if value := res.Get(prefix + "console-config.common-config.console.severity"); value.Exists() {
		data.ConsoleSeverity.Value = value.String()
	} else {
		data.ConsoleSeverity.Null = true
	}
	if value := res.Get(prefix + "facility"); value.Exists() {
		data.Facility.Value = value.String()
	} else {
		data.Facility.Null = true
	}
	if value := res.Get(prefix + "history.size"); value.Exists() {
		data.HistorySize.Value = value.Int()
	} else {
		data.HistorySize.Null = true
	}
	if value := res.Get(prefix + "history.severity-level"); value.Exists() {
		data.HistorySeverity.Value = value.String()
	} else {
		data.HistorySeverity.Null = true
	}
	if value := res.Get(prefix + "trap"); value.Exists() {
		data.Trap.Value = true
	} else {
		data.Trap.Value = false
	}
	if value := res.Get(prefix + "trap.severity"); value.Exists() {
		data.TrapSeverity.Value = value.String()
	} else {
		data.TrapSeverity.Null = true
	}
	if value := res.Get(prefix + "origin-id.type-value"); value.Exists() {
		data.OriginIdType.Value = value.String()
	} else {
		data.OriginIdType.Null = true
	}
	if value := res.Get(prefix + "origin-id.string"); value.Exists() {
		data.OriginIdName.Value = value.String()
	} else {
		data.OriginIdName.Null = true
	}
	if value := res.Get(prefix + "file.name"); value.Exists() {
		data.FileName.Value = value.String()
	} else {
		data.FileName.Null = true
	}
	if value := res.Get(prefix + "file.max-size"); value.Exists() {
		data.FileMaxSize.Value = value.Int()
	} else {
		data.FileMaxSize.Null = true
	}
	if value := res.Get(prefix + "file.min-size"); value.Exists() {
		data.FileMinSize.Value = value.Int()
	} else {
		data.FileMinSize.Null = true
	}
	if value := res.Get(prefix + "file.severity"); value.Exists() {
		data.FileSeverity.Value = value.String()
	} else {
		data.FileSeverity.Null = true
	}
	if value := res.Get(prefix + "source-interface-conf.interface-name-non-vrf"); value.Exists() {
		data.SourceInterface.Value = value.String()
	} else {
		data.SourceInterface.Null = true
	}
	for i := range data.SourceInterfacesVrf {
		keys := [...]string{"vrf"}
		keyValues := [...]string{data.SourceInterfacesVrf[i].Vrf.Value}

		var r gjson.Result
		res.Get(prefix + "source-interface-conf.source-interface-vrf").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("vrf"); value.Exists() {
			data.SourceInterfacesVrf[i].Vrf.Value = value.String()
		} else {
			data.SourceInterfacesVrf[i].Vrf.Null = true
		}
		if value := r.Get("interface-name"); value.Exists() {
			data.SourceInterfacesVrf[i].InterfaceName.Value = value.String()
		} else {
			data.SourceInterfacesVrf[i].InterfaceName.Null = true
		}
	}
	for i := range data.Ipv4Hosts {
		keys := [...]string{"ipv4-host"}
		keyValues := [...]string{data.Ipv4Hosts[i].Ipv4Host.Value}

		var r gjson.Result
		res.Get(prefix + "host.ipv4-host-list").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv4-host"); value.Exists() {
			data.Ipv4Hosts[i].Ipv4Host.Value = value.String()
		} else {
			data.Ipv4Hosts[i].Ipv4Host.Null = true
		}
	}
	for i := range data.Ipv4VrfHosts {
		keys := [...]string{"ipv4-host", "vrf"}
		keyValues := [...]string{data.Ipv4VrfHosts[i].Ipv4Host.Value, data.Ipv4VrfHosts[i].Vrf.Value}

		var r gjson.Result
		res.Get(prefix + "host.ipv4-host-vrf-list").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv4-host"); value.Exists() {
			data.Ipv4VrfHosts[i].Ipv4Host.Value = value.String()
		} else {
			data.Ipv4VrfHosts[i].Ipv4Host.Null = true
		}
		if value := r.Get("vrf"); value.Exists() {
			data.Ipv4VrfHosts[i].Vrf.Value = value.String()
		} else {
			data.Ipv4VrfHosts[i].Vrf.Null = true
		}
	}
	for i := range data.Ipv6Hosts {
		keys := [...]string{"ipv6-host"}
		keyValues := [...]string{data.Ipv6Hosts[i].Ipv6Host.Value}

		var r gjson.Result
		res.Get(prefix + "host.ipv6.ipv6-host-list").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv6-host"); value.Exists() {
			data.Ipv6Hosts[i].Ipv6Host.Value = value.String()
		} else {
			data.Ipv6Hosts[i].Ipv6Host.Null = true
		}
	}
	for i := range data.Ipv6VrfHosts {
		keys := [...]string{"ipv6-host", "vrf"}
		keyValues := [...]string{data.Ipv6VrfHosts[i].Ipv6Host.Value, data.Ipv6VrfHosts[i].Vrf.Value}

		var r gjson.Result
		res.Get(prefix + "host.ipv6.ipv6-host-vrf-list").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv6-host"); value.Exists() {
			data.Ipv6VrfHosts[i].Ipv6Host.Value = value.String()
		} else {
			data.Ipv6VrfHosts[i].Ipv6Host.Null = true
		}
		if value := r.Get("vrf"); value.Exists() {
			data.Ipv6VrfHosts[i].Vrf.Value = value.String()
		} else {
			data.Ipv6VrfHosts[i].Vrf.Null = true
		}
	}
}

func (data *Logging) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "monitor-config.common-config.monitor.severity"); value.Exists() {
		data.MonitorSeverity.Value = value.String()
		data.MonitorSeverity.Null = false
	}
	if value := res.Get(prefix + "buffered.size-value"); value.Exists() {
		data.BufferedSize.Value = value.Int()
		data.BufferedSize.Null = false
	}
	if value := res.Get(prefix + "buffered.severity-level"); value.Exists() {
		data.BufferedSeverity.Value = value.String()
		data.BufferedSeverity.Null = false
	}
	if value := res.Get(prefix + "console-config.common-config.console.severity"); value.Exists() {
		data.ConsoleSeverity.Value = value.String()
		data.ConsoleSeverity.Null = false
	}
	if value := res.Get(prefix + "facility"); value.Exists() {
		data.Facility.Value = value.String()
		data.Facility.Null = false
	}
	if value := res.Get(prefix + "history.size"); value.Exists() {
		data.HistorySize.Value = value.Int()
		data.HistorySize.Null = false
	}
	if value := res.Get(prefix + "history.severity-level"); value.Exists() {
		data.HistorySeverity.Value = value.String()
		data.HistorySeverity.Null = false
	}
	if value := res.Get(prefix + "trap"); value.Exists() {
		data.Trap.Value = true
		data.Trap.Null = false
	} else {
		data.Trap.Value = false
		data.Trap.Null = false
	}
	if value := res.Get(prefix + "trap.severity"); value.Exists() {
		data.TrapSeverity.Value = value.String()
		data.TrapSeverity.Null = false
	}
	if value := res.Get(prefix + "origin-id.type-value"); value.Exists() {
		data.OriginIdType.Value = value.String()
		data.OriginIdType.Null = false
	}
	if value := res.Get(prefix + "origin-id.string"); value.Exists() {
		data.OriginIdName.Value = value.String()
		data.OriginIdName.Null = false
	}
	if value := res.Get(prefix + "file.name"); value.Exists() {
		data.FileName.Value = value.String()
		data.FileName.Null = false
	}
	if value := res.Get(prefix + "file.max-size"); value.Exists() {
		data.FileMaxSize.Value = value.Int()
		data.FileMaxSize.Null = false
	}
	if value := res.Get(prefix + "file.min-size"); value.Exists() {
		data.FileMinSize.Value = value.Int()
		data.FileMinSize.Null = false
	}
	if value := res.Get(prefix + "file.severity"); value.Exists() {
		data.FileSeverity.Value = value.String()
		data.FileSeverity.Null = false
	}
	if value := res.Get(prefix + "source-interface-conf.interface-name-non-vrf"); value.Exists() {
		data.SourceInterface.Value = value.String()
		data.SourceInterface.Null = false
	}
	if value := res.Get(prefix + "source-interface-conf.source-interface-vrf"); value.Exists() {
		data.SourceInterfacesVrf = make([]LoggingSourceInterfacesVrf, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := LoggingSourceInterfacesVrf{}
			if cValue := v.Get("vrf"); cValue.Exists() {
				item.Vrf.Value = cValue.String()
				item.Vrf.Null = false
			}
			if cValue := v.Get("interface-name"); cValue.Exists() {
				item.InterfaceName.Value = cValue.String()
				item.InterfaceName.Null = false
			}
			data.SourceInterfacesVrf = append(data.SourceInterfacesVrf, item)
			return true
		})
	}
	if value := res.Get(prefix + "host.ipv4-host-list"); value.Exists() {
		data.Ipv4Hosts = make([]LoggingIpv4Hosts, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := LoggingIpv4Hosts{}
			if cValue := v.Get("ipv4-host"); cValue.Exists() {
				item.Ipv4Host.Value = cValue.String()
				item.Ipv4Host.Null = false
			}
			data.Ipv4Hosts = append(data.Ipv4Hosts, item)
			return true
		})
	}
	if value := res.Get(prefix + "host.ipv4-host-vrf-list"); value.Exists() {
		data.Ipv4VrfHosts = make([]LoggingIpv4VrfHosts, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := LoggingIpv4VrfHosts{}
			if cValue := v.Get("ipv4-host"); cValue.Exists() {
				item.Ipv4Host.Value = cValue.String()
				item.Ipv4Host.Null = false
			}
			if cValue := v.Get("vrf"); cValue.Exists() {
				item.Vrf.Value = cValue.String()
				item.Vrf.Null = false
			}
			data.Ipv4VrfHosts = append(data.Ipv4VrfHosts, item)
			return true
		})
	}
	if value := res.Get(prefix + "host.ipv6.ipv6-host-list"); value.Exists() {
		data.Ipv6Hosts = make([]LoggingIpv6Hosts, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := LoggingIpv6Hosts{}
			if cValue := v.Get("ipv6-host"); cValue.Exists() {
				item.Ipv6Host.Value = cValue.String()
				item.Ipv6Host.Null = false
			}
			data.Ipv6Hosts = append(data.Ipv6Hosts, item)
			return true
		})
	}
	if value := res.Get(prefix + "host.ipv6.ipv6-host-vrf-list"); value.Exists() {
		data.Ipv6VrfHosts = make([]LoggingIpv6VrfHosts, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := LoggingIpv6VrfHosts{}
			if cValue := v.Get("ipv6-host"); cValue.Exists() {
				item.Ipv6Host.Value = cValue.String()
				item.Ipv6Host.Null = false
			}
			if cValue := v.Get("vrf"); cValue.Exists() {
				item.Vrf.Value = cValue.String()
				item.Vrf.Null = false
			}
			data.Ipv6VrfHosts = append(data.Ipv6VrfHosts, item)
			return true
		})
	}
}

func (data *Logging) setUnknownValues(ctx context.Context) {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.MonitorSeverity.Unknown {
		data.MonitorSeverity.Unknown = false
		data.MonitorSeverity.Null = true
	}
	if data.BufferedSize.Unknown {
		data.BufferedSize.Unknown = false
		data.BufferedSize.Null = true
	}
	if data.BufferedSeverity.Unknown {
		data.BufferedSeverity.Unknown = false
		data.BufferedSeverity.Null = true
	}
	if data.ConsoleSeverity.Unknown {
		data.ConsoleSeverity.Unknown = false
		data.ConsoleSeverity.Null = true
	}
	if data.Facility.Unknown {
		data.Facility.Unknown = false
		data.Facility.Null = true
	}
	if data.HistorySize.Unknown {
		data.HistorySize.Unknown = false
		data.HistorySize.Null = true
	}
	if data.HistorySeverity.Unknown {
		data.HistorySeverity.Unknown = false
		data.HistorySeverity.Null = true
	}
	if data.Trap.Unknown {
		data.Trap.Unknown = false
		data.Trap.Null = true
	}
	if data.TrapSeverity.Unknown {
		data.TrapSeverity.Unknown = false
		data.TrapSeverity.Null = true
	}
	if data.OriginIdType.Unknown {
		data.OriginIdType.Unknown = false
		data.OriginIdType.Null = true
	}
	if data.OriginIdName.Unknown {
		data.OriginIdName.Unknown = false
		data.OriginIdName.Null = true
	}
	if data.FileName.Unknown {
		data.FileName.Unknown = false
		data.FileName.Null = true
	}
	if data.FileMaxSize.Unknown {
		data.FileMaxSize.Unknown = false
		data.FileMaxSize.Null = true
	}
	if data.FileMinSize.Unknown {
		data.FileMinSize.Unknown = false
		data.FileMinSize.Null = true
	}
	if data.FileSeverity.Unknown {
		data.FileSeverity.Unknown = false
		data.FileSeverity.Null = true
	}
	if data.SourceInterface.Unknown {
		data.SourceInterface.Unknown = false
		data.SourceInterface.Null = true
	}
	for i := range data.SourceInterfacesVrf {
		if data.SourceInterfacesVrf[i].Vrf.Unknown {
			data.SourceInterfacesVrf[i].Vrf.Unknown = false
			data.SourceInterfacesVrf[i].Vrf.Null = true
		}
		if data.SourceInterfacesVrf[i].InterfaceName.Unknown {
			data.SourceInterfacesVrf[i].InterfaceName.Unknown = false
			data.SourceInterfacesVrf[i].InterfaceName.Null = true
		}
	}
	for i := range data.Ipv4Hosts {
		if data.Ipv4Hosts[i].Ipv4Host.Unknown {
			data.Ipv4Hosts[i].Ipv4Host.Unknown = false
			data.Ipv4Hosts[i].Ipv4Host.Null = true
		}
	}
	for i := range data.Ipv4VrfHosts {
		if data.Ipv4VrfHosts[i].Ipv4Host.Unknown {
			data.Ipv4VrfHosts[i].Ipv4Host.Unknown = false
			data.Ipv4VrfHosts[i].Ipv4Host.Null = true
		}
		if data.Ipv4VrfHosts[i].Vrf.Unknown {
			data.Ipv4VrfHosts[i].Vrf.Unknown = false
			data.Ipv4VrfHosts[i].Vrf.Null = true
		}
	}
	for i := range data.Ipv6Hosts {
		if data.Ipv6Hosts[i].Ipv6Host.Unknown {
			data.Ipv6Hosts[i].Ipv6Host.Unknown = false
			data.Ipv6Hosts[i].Ipv6Host.Null = true
		}
	}
	for i := range data.Ipv6VrfHosts {
		if data.Ipv6VrfHosts[i].Ipv6Host.Unknown {
			data.Ipv6VrfHosts[i].Ipv6Host.Unknown = false
			data.Ipv6VrfHosts[i].Ipv6Host.Null = true
		}
		if data.Ipv6VrfHosts[i].Vrf.Unknown {
			data.Ipv6VrfHosts[i].Vrf.Unknown = false
			data.Ipv6VrfHosts[i].Vrf.Null = true
		}
	}
}

func (data *Logging) getDeletedListItems(ctx context.Context, state Logging) []string {
	deletedListItems := make([]string, 0)
	for i := range state.SourceInterfacesVrf {
		stateKeyValues := [...]string{state.SourceInterfacesVrf[i].Vrf.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.SourceInterfacesVrf[i].Vrf.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.SourceInterfacesVrf {
			found = true
			if state.SourceInterfacesVrf[i].Vrf.Value != data.SourceInterfacesVrf[j].Vrf.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/source-interface-conf/source-interface-vrf=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.Ipv4Hosts {
		stateKeyValues := [...]string{state.Ipv4Hosts[i].Ipv4Host.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv4Hosts[i].Ipv4Host.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv4Hosts {
			found = true
			if state.Ipv4Hosts[i].Ipv4Host.Value != data.Ipv4Hosts[j].Ipv4Host.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/host/ipv4-host-list=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.Ipv4VrfHosts {
		stateKeyValues := [...]string{state.Ipv4VrfHosts[i].Ipv4Host.Value, state.Ipv4VrfHosts[i].Vrf.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv4VrfHosts[i].Ipv4Host.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv4VrfHosts[i].Vrf.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv4VrfHosts {
			found = true
			if state.Ipv4VrfHosts[i].Ipv4Host.Value != data.Ipv4VrfHosts[j].Ipv4Host.Value {
				found = false
			}
			if state.Ipv4VrfHosts[i].Vrf.Value != data.Ipv4VrfHosts[j].Vrf.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/host/ipv4-host-vrf-list=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.Ipv6Hosts {
		stateKeyValues := [...]string{state.Ipv6Hosts[i].Ipv6Host.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv6Hosts[i].Ipv6Host.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv6Hosts {
			found = true
			if state.Ipv6Hosts[i].Ipv6Host.Value != data.Ipv6Hosts[j].Ipv6Host.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/host/ipv6/ipv6-host-list=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.Ipv6VrfHosts {
		stateKeyValues := [...]string{state.Ipv6VrfHosts[i].Ipv6Host.Value, state.Ipv6VrfHosts[i].Vrf.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv6VrfHosts[i].Ipv6Host.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Ipv6VrfHosts[i].Vrf.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv6VrfHosts {
			found = true
			if state.Ipv6VrfHosts[i].Ipv6Host.Value != data.Ipv6VrfHosts[j].Ipv6Host.Value {
				found = false
			}
			if state.Ipv6VrfHosts[i].Vrf.Value != data.Ipv6VrfHosts[j].Vrf.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/host/ipv6/ipv6-host-vrf-list=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *Logging) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}
