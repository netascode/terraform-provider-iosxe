// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

type dataSourcePIMType struct{}

func (t dataSourcePIMType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the PIM configuration.",

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The path of the retrieved object.",
				Type:                types.StringType,
				Computed:            true,
			},
			"autorp": {
				MarkdownDescription: "Configure AutoRP global operations",
				Type:                types.BoolType,
				Computed:            true,
			},
			"autorp_listener": {
				MarkdownDescription: "Allow AutoRP packets across sparse mode interface",
				Type:                types.BoolType,
				Computed:            true,
			},
			"bsr_candidate_loopback": {
				MarkdownDescription: "Loopback interface",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"bsr_candidate_mask": {
				MarkdownDescription: "Hash Mask length for RP selection",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"bsr_candidate_priority": {
				MarkdownDescription: "Priority value for candidate bootstrap router",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"bsr_candidate_accept_rp_candidate": {
				MarkdownDescription: "BSR RP candidate filter",
				Type:                types.StringType,
				Computed:            true,
			},
			"ssm_range": {
				MarkdownDescription: "ACL for group range to be used for SSM",
				Type:                types.StringType,
				Computed:            true,
			},
			"ssm_default": {
				MarkdownDescription: "Use 232/8 group range for SSM",
				Type:                types.BoolType,
				Computed:            true,
			},
			"rp_address": {
				MarkdownDescription: "IP address of Rendezvous-point for group",
				Type:                types.StringType,
				Computed:            true,
			},
			"rp_address_override": {
				MarkdownDescription: "Overrides dynamically learnt RP mappings",
				Type:                types.BoolType,
				Computed:            true,
			},
			"rp_address_bidir": {
				MarkdownDescription: "Group range treated in bidirectional shared-tree mode",
				Type:                types.BoolType,
				Computed:            true,
			},
			"rp_addresses": {
				MarkdownDescription: "PIM RP-address (Rendezvous Point)",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"access_list": {
						MarkdownDescription: "IP Access-list",
						Type:                types.StringType,
						Computed:            true,
					},
					"rp_address": {
						MarkdownDescription: "IP address of Rendezvous-point for group",
						Type:                types.StringType,
						Computed:            true,
					},
					"override": {
						MarkdownDescription: "Overrides dynamically learnt RP mappings",
						Type:                types.BoolType,
						Computed:            true,
					},
					"bidir": {
						MarkdownDescription: "Group range treated in bidirectional shared-tree mode",
						Type:                types.BoolType,
						Computed:            true,
					},
				}),
			},
			"rp_candidates": {
				MarkdownDescription: "To be a PIM version 2 RP candidate",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"interface": {
						MarkdownDescription: "Autonomic-Networking virtual interface",
						Type:                types.StringType,
						Computed:            true,
					},
					"group_list": {
						MarkdownDescription: "IP Access list",
						Type:                types.StringType,
						Computed:            true,
					},
					"interval": {
						MarkdownDescription: "RP candidate advertisement interval",
						Type:                types.Int64Type,
						Computed:            true,
					},
					"priority": {
						MarkdownDescription: "RP candidate priority",
						Type:                types.Int64Type,
						Computed:            true,
					},
					"bidir": {
						MarkdownDescription: "Group range treated in bidirectional shared-tree mode",
						Type:                types.BoolType,
						Computed:            true,
					},
				}),
			},
		},
	}, nil
}

func (t dataSourcePIMType) NewDataSource(ctx context.Context, in provider.Provider) (datasource.DataSource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return dataSourcePIM{
		provider: provider,
	}, diags
}

type dataSourcePIM struct {
	provider iosxeProvider
}

func (d dataSourcePIM) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config PIM

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	res, err := d.provider.clients[config.Device.Value].GetData(config.getPath())
	if res.StatusCode == 404 {
		config = PIM{Device: config.Device}
	} else {
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
			return
		}

		config.fromBody(ctx, res.Res)
	}

	config.Id = types.String{Value: config.getPath()}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
