// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"net/url"
	"regexp"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type Username struct {
	Device             types.String `tfsdk:"device"`
	Id                 types.String `tfsdk:"id"`
	Name               types.String `tfsdk:"name"`
	Privilege          types.Int64  `tfsdk:"privilege"`
	Description        types.String `tfsdk:"description"`
	PasswordEncryption types.String `tfsdk:"password_encryption"`
	Password           types.String `tfsdk:"password"`
	SecretEncryption   types.String `tfsdk:"secret_encryption"`
	Secret             types.String `tfsdk:"secret"`
}

func (data Username) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/username=%s", url.QueryEscape(fmt.Sprintf("%v", data.Name.Value)))
}

// if last path element has a key -> remove it
func (data Username) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data Username) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Name.Null && !data.Name.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"name", data.Name.Value)
	}
	if !data.Privilege.Null && !data.Privilege.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"privilege", strconv.FormatInt(data.Privilege.Value, 10))
	}
	if !data.Description.Null && !data.Description.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"description", data.Description.Value)
	}
	if !data.PasswordEncryption.Null && !data.PasswordEncryption.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"password.encryption", data.PasswordEncryption.Value)
	}
	if !data.Password.Null && !data.Password.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"password.password", data.Password.Value)
	}
	if !data.SecretEncryption.Null && !data.SecretEncryption.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"secret.encryption", data.SecretEncryption.Value)
	}
	if !data.Secret.Null && !data.Secret.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"secret.secret", data.Secret.Value)
	}
	return body
}

func (data *Username) updateFromBody(res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "name"); value.Exists() {
		data.Name.Value = value.String()
	} else {
		data.Name.Null = true
	}
	if value := res.Get(prefix + "privilege"); value.Exists() {
		data.Privilege.Value = value.Int()
	} else {
		data.Privilege.Null = true
	}
	if value := res.Get(prefix + "description"); value.Exists() {
		data.Description.Value = value.String()
	} else {
		data.Description.Null = true
	}
	if value := res.Get(prefix + "password.encryption"); value.Exists() {
		data.PasswordEncryption.Value = value.String()
	} else {
		data.PasswordEncryption.Null = true
	}
	if value := res.Get(prefix + "password.password"); value.Exists() {
		data.Password.Value = value.String()
	} else {
		data.Password.Null = true
	}
	if value := res.Get(prefix + "secret.encryption"); value.Exists() {
		data.SecretEncryption.Value = value.String()
	} else {
		data.SecretEncryption.Null = true
	}
	if value := res.Get(prefix + "secret.secret"); value.Exists() {
		data.Secret.Value = value.String()
	} else {
		data.Secret.Null = true
	}
}

func (data *Username) fromBody(res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "privilege"); value.Exists() {
		data.Privilege.Value = value.Int()
		data.Privilege.Null = false
	}
	if value := res.Get(prefix + "description"); value.Exists() {
		data.Description.Value = value.String()
		data.Description.Null = false
	}
	if value := res.Get(prefix + "password.encryption"); value.Exists() {
		data.PasswordEncryption.Value = value.String()
		data.PasswordEncryption.Null = false
	}
	if value := res.Get(prefix + "password.password"); value.Exists() {
		data.Password.Value = value.String()
		data.Password.Null = false
	}
	if value := res.Get(prefix + "secret.encryption"); value.Exists() {
		data.SecretEncryption.Value = value.String()
		data.SecretEncryption.Null = false
	}
	if value := res.Get(prefix + "secret.secret"); value.Exists() {
		data.Secret.Value = value.String()
		data.Secret.Null = false
	}
}

func (data *Username) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Name.Unknown {
		data.Name.Unknown = false
		data.Name.Null = true
	}
	if data.Privilege.Unknown {
		data.Privilege.Unknown = false
		data.Privilege.Null = true
	}
	if data.Description.Unknown {
		data.Description.Unknown = false
		data.Description.Null = true
	}
	if data.PasswordEncryption.Unknown {
		data.PasswordEncryption.Unknown = false
		data.PasswordEncryption.Null = true
	}
	if data.Password.Unknown {
		data.Password.Unknown = false
		data.Password.Null = true
	}
	if data.SecretEncryption.Unknown {
		data.SecretEncryption.Unknown = false
		data.SecretEncryption.Null = true
	}
	if data.Secret.Unknown {
		data.Secret.Unknown = false
		data.Secret.Null = true
	}
}

func (data *Username) getDeletedListItems(state Username) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}
