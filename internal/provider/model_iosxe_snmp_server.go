// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type SNMPServer struct {
	Device                                        types.String                `tfsdk:"device"`
	Id                                            types.String                `tfsdk:"id"`
	ChassisId                                     types.String                `tfsdk:"chassis_id"`
	Contact                                       types.String                `tfsdk:"contact"`
	IfindexPersist                                types.Bool                  `tfsdk:"ifindex_persist"`
	Location                                      types.String                `tfsdk:"location"`
	Packetsize                                    types.Int64                 `tfsdk:"packetsize"`
	QueueLength                                   types.Int64                 `tfsdk:"queue_length"`
	EnableLoggingGetop                            types.Bool                  `tfsdk:"enable_logging_getop"`
	EnableLoggingSetop                            types.Bool                  `tfsdk:"enable_logging_setop"`
	EnableInforms                                 types.Bool                  `tfsdk:"enable_informs"`
	EnableTraps                                   types.Bool                  `tfsdk:"enable_traps"`
	EnableTrapsSnmpAuthentication                 types.Bool                  `tfsdk:"enable_traps_snmp_authentication"`
	EnableTrapsSnmpColdstart                      types.Bool                  `tfsdk:"enable_traps_snmp_coldstart"`
	EnableTrapsSnmpLinkdown                       types.Bool                  `tfsdk:"enable_traps_snmp_linkdown"`
	EnableTrapsSnmpLinkup                         types.Bool                  `tfsdk:"enable_traps_snmp_linkup"`
	EnableTrapsSnmpWarmstart                      types.Bool                  `tfsdk:"enable_traps_snmp_warmstart"`
	SourceInterfaceInformsGigabitEthernet         types.String                `tfsdk:"source_interface_informs_gigabit_ethernet"`
	SourceInterfaceInformsTenGigabitEthernet      types.String                `tfsdk:"source_interface_informs_ten_gigabit_ethernet"`
	SourceInterfaceInformsFortyGigabitEthernet    types.String                `tfsdk:"source_interface_informs_forty_gigabit_ethernet"`
	SourceInterfaceInformsHundredGigE             types.String                `tfsdk:"source_interface_informs_hundred_gig_e"`
	SourceInterfaceInformsLoopback                types.Int64                 `tfsdk:"source_interface_informs_loopback"`
	SourceInterfaceInformsPortChannel             types.Int64                 `tfsdk:"source_interface_informs_port_channel"`
	SourceInterfaceInformsPortChannelSubinterface types.String                `tfsdk:"source_interface_informs_port_channel_subinterface"`
	SourceInterfaceInformsVlan                    types.Int64                 `tfsdk:"source_interface_informs_vlan"`
	SourceInterfaceTrapsGigabitEthernet           types.String                `tfsdk:"source_interface_traps_gigabit_ethernet"`
	SourceInterfaceTrapsTenGigabitEthernet        types.String                `tfsdk:"source_interface_traps_ten_gigabit_ethernet"`
	SourceInterfaceTrapsFortyGigabitEthernet      types.String                `tfsdk:"source_interface_traps_forty_gigabit_ethernet"`
	SourceInterfaceTrapsHundredGigE               types.String                `tfsdk:"source_interface_traps_hundred_gig_e"`
	SourceInterfaceTrapsLoopback                  types.Int64                 `tfsdk:"source_interface_traps_loopback"`
	SourceInterfaceTrapsPortChannel               types.Int64                 `tfsdk:"source_interface_traps_port_channel"`
	SourceInterfaceTrapsPortChannelSubinterface   types.String                `tfsdk:"source_interface_traps_port_channel_subinterface"`
	SourceInterfaceTrapsVlan                      types.Int64                 `tfsdk:"source_interface_traps_vlan"`
	TrapSourceGigabitEthernet                     types.String                `tfsdk:"trap_source_gigabit_ethernet"`
	TrapSourceTenGigabitEthernet                  types.String                `tfsdk:"trap_source_ten_gigabit_ethernet"`
	TrapSourceFortyGigabitEthernet                types.String                `tfsdk:"trap_source_forty_gigabit_ethernet"`
	TrapSourceHundredGigE                         types.String                `tfsdk:"trap_source_hundred_gig_e"`
	TrapSourceLoopback                            types.Int64                 `tfsdk:"trap_source_loopback"`
	TrapSourcePortChannel                         types.Int64                 `tfsdk:"trap_source_port_channel"`
	TrapSourcePortChannelSubinterface             types.String                `tfsdk:"trap_source_port_channel_subinterface"`
	TrapSourceVlan                                types.Int64                 `tfsdk:"trap_source_vlan"`
	SnmpCommunities                               []SNMPServerSnmpCommunities `tfsdk:"snmp_communities"`
	Contexts                                      []SNMPServerContexts        `tfsdk:"contexts"`
	Views                                         []SNMPServerViews           `tfsdk:"views"`
}
type SNMPServerSnmpCommunities struct {
	Name           types.String `tfsdk:"name"`
	View           types.String `tfsdk:"view"`
	Permission     types.String `tfsdk:"permission"`
	Ipv6           types.String `tfsdk:"ipv6"`
	AccessListName types.String `tfsdk:"access_list_name"`
}
type SNMPServerContexts struct {
	Name types.String `tfsdk:"name"`
}
type SNMPServerViews struct {
	Name   types.String `tfsdk:"name"`
	Mib    types.String `tfsdk:"mib"`
	IncExl types.String `tfsdk:"inc_exl"`
}

func (data SNMPServer) getPath() string {
	return "Cisco-IOS-XE-native:native/snmp-server"
}

// if last path element has a key -> remove it
func (data SNMPServer) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data SNMPServer) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.ChassisId.Null && !data.ChassisId.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:chassis-id", data.ChassisId.Value)
	}
	if !data.Contact.Null && !data.Contact.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:contact", data.Contact.Value)
	}
	if !data.IfindexPersist.Null && !data.IfindexPersist.Unknown {
		if data.IfindexPersist.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:ifindex.persist", map[string]string{})
		}
	}
	if !data.Location.Null && !data.Location.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:location", data.Location.Value)
	}
	if !data.Packetsize.Null && !data.Packetsize.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:packetsize", strconv.FormatInt(data.Packetsize.Value, 10))
	}
	if !data.QueueLength.Null && !data.QueueLength.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:queue-length", strconv.FormatInt(data.QueueLength.Value, 10))
	}
	if !data.EnableLoggingGetop.Null && !data.EnableLoggingGetop.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.logging.getop", data.EnableLoggingGetop.Value)
	}
	if !data.EnableLoggingSetop.Null && !data.EnableLoggingSetop.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.logging.setop", data.EnableLoggingSetop.Value)
	}
	if !data.EnableInforms.Null && !data.EnableInforms.Unknown {
		if data.EnableInforms.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.informs", map[string]string{})
		}
	}
	if !data.EnableTraps.Null && !data.EnableTraps.Unknown {
		if data.EnableTraps.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.traps", map[string]string{})
		}
	}
	if !data.EnableTrapsSnmpAuthentication.Null && !data.EnableTrapsSnmpAuthentication.Unknown {
		if data.EnableTrapsSnmpAuthentication.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.authentication", map[string]string{})
		}
	}
	if !data.EnableTrapsSnmpColdstart.Null && !data.EnableTrapsSnmpColdstart.Unknown {
		if data.EnableTrapsSnmpColdstart.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.coldstart", map[string]string{})
		}
	}
	if !data.EnableTrapsSnmpLinkdown.Null && !data.EnableTrapsSnmpLinkdown.Unknown {
		if data.EnableTrapsSnmpLinkdown.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.linkdown", map[string]string{})
		}
	}
	if !data.EnableTrapsSnmpLinkup.Null && !data.EnableTrapsSnmpLinkup.Unknown {
		if data.EnableTrapsSnmpLinkup.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.linkup", map[string]string{})
		}
	}
	if !data.EnableTrapsSnmpWarmstart.Null && !data.EnableTrapsSnmpWarmstart.Unknown {
		if data.EnableTrapsSnmpWarmstart.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.warmstart", map[string]string{})
		}
	}
	if !data.SourceInterfaceInformsGigabitEthernet.Null && !data.SourceInterfaceInformsGigabitEthernet.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.GigabitEthernet", data.SourceInterfaceInformsGigabitEthernet.Value)
	}
	if !data.SourceInterfaceInformsTenGigabitEthernet.Null && !data.SourceInterfaceInformsTenGigabitEthernet.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.TenGigabitEthernet", data.SourceInterfaceInformsTenGigabitEthernet.Value)
	}
	if !data.SourceInterfaceInformsFortyGigabitEthernet.Null && !data.SourceInterfaceInformsFortyGigabitEthernet.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.FortyGigabitEthernet", data.SourceInterfaceInformsFortyGigabitEthernet.Value)
	}
	if !data.SourceInterfaceInformsHundredGigE.Null && !data.SourceInterfaceInformsHundredGigE.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.HundredGigE", data.SourceInterfaceInformsHundredGigE.Value)
	}
	if !data.SourceInterfaceInformsLoopback.Null && !data.SourceInterfaceInformsLoopback.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.Loopback", strconv.FormatInt(data.SourceInterfaceInformsLoopback.Value, 10))
	}
	if !data.SourceInterfaceInformsPortChannel.Null && !data.SourceInterfaceInformsPortChannel.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.Port-channel", strconv.FormatInt(data.SourceInterfaceInformsPortChannel.Value, 10))
	}
	if !data.SourceInterfaceInformsPortChannelSubinterface.Null && !data.SourceInterfaceInformsPortChannelSubinterface.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.Port-channel-subinterface.Port-channel", data.SourceInterfaceInformsPortChannelSubinterface.Value)
	}
	if !data.SourceInterfaceInformsVlan.Null && !data.SourceInterfaceInformsVlan.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.Vlan", strconv.FormatInt(data.SourceInterfaceInformsVlan.Value, 10))
	}
	if !data.SourceInterfaceTrapsGigabitEthernet.Null && !data.SourceInterfaceTrapsGigabitEthernet.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.GigabitEthernet", data.SourceInterfaceTrapsGigabitEthernet.Value)
	}
	if !data.SourceInterfaceTrapsTenGigabitEthernet.Null && !data.SourceInterfaceTrapsTenGigabitEthernet.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.TenGigabitEthernet", data.SourceInterfaceTrapsTenGigabitEthernet.Value)
	}
	if !data.SourceInterfaceTrapsFortyGigabitEthernet.Null && !data.SourceInterfaceTrapsFortyGigabitEthernet.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.FortyGigabitEthernet", data.SourceInterfaceTrapsFortyGigabitEthernet.Value)
	}
	if !data.SourceInterfaceTrapsHundredGigE.Null && !data.SourceInterfaceTrapsHundredGigE.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.HundredGigE", data.SourceInterfaceTrapsHundredGigE.Value)
	}
	if !data.SourceInterfaceTrapsLoopback.Null && !data.SourceInterfaceTrapsLoopback.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.Loopback", strconv.FormatInt(data.SourceInterfaceTrapsLoopback.Value, 10))
	}
	if !data.SourceInterfaceTrapsPortChannel.Null && !data.SourceInterfaceTrapsPortChannel.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.Port-channel", strconv.FormatInt(data.SourceInterfaceTrapsPortChannel.Value, 10))
	}
	if !data.SourceInterfaceTrapsPortChannelSubinterface.Null && !data.SourceInterfaceTrapsPortChannelSubinterface.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.Port-channel-subinterface.Port-channel", data.SourceInterfaceTrapsPortChannelSubinterface.Value)
	}
	if !data.SourceInterfaceTrapsVlan.Null && !data.SourceInterfaceTrapsVlan.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.Vlan", strconv.FormatInt(data.SourceInterfaceTrapsVlan.Value, 10))
	}
	if !data.TrapSourceGigabitEthernet.Null && !data.TrapSourceGigabitEthernet.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.GigabitEthernet", data.TrapSourceGigabitEthernet.Value)
	}
	if !data.TrapSourceTenGigabitEthernet.Null && !data.TrapSourceTenGigabitEthernet.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.TenGigabitEthernet", data.TrapSourceTenGigabitEthernet.Value)
	}
	if !data.TrapSourceFortyGigabitEthernet.Null && !data.TrapSourceFortyGigabitEthernet.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.FortyGigabitEthernet", data.TrapSourceFortyGigabitEthernet.Value)
	}
	if !data.TrapSourceHundredGigE.Null && !data.TrapSourceHundredGigE.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.HundredGigE", data.TrapSourceHundredGigE.Value)
	}
	if !data.TrapSourceLoopback.Null && !data.TrapSourceLoopback.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.Loopback", strconv.FormatInt(data.TrapSourceLoopback.Value, 10))
	}
	if !data.TrapSourcePortChannel.Null && !data.TrapSourcePortChannel.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.Port-channel", strconv.FormatInt(data.TrapSourcePortChannel.Value, 10))
	}
	if !data.TrapSourcePortChannelSubinterface.Null && !data.TrapSourcePortChannelSubinterface.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.Port-channel-subinterface.Port-channel", data.TrapSourcePortChannelSubinterface.Value)
	}
	if !data.TrapSourceVlan.Null && !data.TrapSourceVlan.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.Vlan", strconv.FormatInt(data.TrapSourceVlan.Value, 10))
	}
	if len(data.SnmpCommunities) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:community-config", []interface{}{})
		for index, item := range data.SnmpCommunities {
			if !item.Name.Null && !item.Name.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:community-config"+"."+strconv.Itoa(index)+"."+"name", item.Name.Value)
			}
			if !item.View.Null && !item.View.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:community-config"+"."+strconv.Itoa(index)+"."+"view", item.View.Value)
			}
			if !item.Permission.Null && !item.Permission.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:community-config"+"."+strconv.Itoa(index)+"."+"permission", item.Permission.Value)
			}
			if !item.Ipv6.Null && !item.Ipv6.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:community-config"+"."+strconv.Itoa(index)+"."+"ipv6", item.Ipv6.Value)
			}
			if !item.AccessListName.Null && !item.AccessListName.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:community-config"+"."+strconv.Itoa(index)+"."+"access-list-name", item.AccessListName.Value)
			}
		}
	}
	if len(data.Contexts) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:context", []interface{}{})
		for index, item := range data.Contexts {
			if !item.Name.Null && !item.Name.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:context"+"."+strconv.Itoa(index)+"."+"name", item.Name.Value)
			}
		}
	}
	if len(data.Views) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:view", []interface{}{})
		for index, item := range data.Views {
			if !item.Name.Null && !item.Name.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:view"+"."+strconv.Itoa(index)+"."+"name", item.Name.Value)
			}
			if !item.Mib.Null && !item.Mib.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:view"+"."+strconv.Itoa(index)+"."+"mib", item.Mib.Value)
			}
			if !item.IncExl.Null && !item.IncExl.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:view"+"."+strconv.Itoa(index)+"."+"inc-exl", item.IncExl.Value)
			}
		}
	}
	return body
}

func (data *SNMPServer) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:chassis-id"); value.Exists() {
		data.ChassisId.Value = value.String()
	} else {
		data.ChassisId.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:contact"); value.Exists() {
		data.Contact.Value = value.String()
	} else {
		data.Contact.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:ifindex.persist"); value.Exists() {
		data.IfindexPersist.Value = true
	} else {
		data.IfindexPersist.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:location"); value.Exists() {
		data.Location.Value = value.String()
	} else {
		data.Location.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:packetsize"); value.Exists() {
		data.Packetsize.Value = value.Int()
	} else {
		data.Packetsize.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:queue-length"); value.Exists() {
		data.QueueLength.Value = value.Int()
	} else {
		data.QueueLength.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.logging.getop"); value.Exists() {
		data.EnableLoggingGetop.Value = value.Bool()
	} else {
		data.EnableLoggingGetop.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.logging.setop"); value.Exists() {
		data.EnableLoggingSetop.Value = value.Bool()
	} else {
		data.EnableLoggingSetop.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.informs"); value.Exists() {
		data.EnableInforms.Value = true
	} else {
		data.EnableInforms.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps"); value.Exists() {
		data.EnableTraps.Value = true
	} else {
		data.EnableTraps.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.authentication"); value.Exists() {
		data.EnableTrapsSnmpAuthentication.Value = true
	} else {
		data.EnableTrapsSnmpAuthentication.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.coldstart"); value.Exists() {
		data.EnableTrapsSnmpColdstart.Value = true
	} else {
		data.EnableTrapsSnmpColdstart.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.linkdown"); value.Exists() {
		data.EnableTrapsSnmpLinkdown.Value = true
	} else {
		data.EnableTrapsSnmpLinkdown.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.linkup"); value.Exists() {
		data.EnableTrapsSnmpLinkup.Value = true
	} else {
		data.EnableTrapsSnmpLinkup.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.warmstart"); value.Exists() {
		data.EnableTrapsSnmpWarmstart.Value = true
	} else {
		data.EnableTrapsSnmpWarmstart.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.GigabitEthernet"); value.Exists() {
		data.SourceInterfaceInformsGigabitEthernet.Value = value.String()
	} else {
		data.SourceInterfaceInformsGigabitEthernet.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.TenGigabitEthernet"); value.Exists() {
		data.SourceInterfaceInformsTenGigabitEthernet.Value = value.String()
	} else {
		data.SourceInterfaceInformsTenGigabitEthernet.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.FortyGigabitEthernet"); value.Exists() {
		data.SourceInterfaceInformsFortyGigabitEthernet.Value = value.String()
	} else {
		data.SourceInterfaceInformsFortyGigabitEthernet.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.HundredGigE"); value.Exists() {
		data.SourceInterfaceInformsHundredGigE.Value = value.String()
	} else {
		data.SourceInterfaceInformsHundredGigE.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Loopback"); value.Exists() {
		data.SourceInterfaceInformsLoopback.Value = value.Int()
	} else {
		data.SourceInterfaceInformsLoopback.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Port-channel"); value.Exists() {
		data.SourceInterfaceInformsPortChannel.Value = value.Int()
	} else {
		data.SourceInterfaceInformsPortChannel.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Port-channel-subinterface.Port-channel"); value.Exists() {
		data.SourceInterfaceInformsPortChannelSubinterface.Value = value.String()
	} else {
		data.SourceInterfaceInformsPortChannelSubinterface.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Vlan"); value.Exists() {
		data.SourceInterfaceInformsVlan.Value = value.Int()
	} else {
		data.SourceInterfaceInformsVlan.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.GigabitEthernet"); value.Exists() {
		data.SourceInterfaceTrapsGigabitEthernet.Value = value.String()
	} else {
		data.SourceInterfaceTrapsGigabitEthernet.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.TenGigabitEthernet"); value.Exists() {
		data.SourceInterfaceTrapsTenGigabitEthernet.Value = value.String()
	} else {
		data.SourceInterfaceTrapsTenGigabitEthernet.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.FortyGigabitEthernet"); value.Exists() {
		data.SourceInterfaceTrapsFortyGigabitEthernet.Value = value.String()
	} else {
		data.SourceInterfaceTrapsFortyGigabitEthernet.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.HundredGigE"); value.Exists() {
		data.SourceInterfaceTrapsHundredGigE.Value = value.String()
	} else {
		data.SourceInterfaceTrapsHundredGigE.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Loopback"); value.Exists() {
		data.SourceInterfaceTrapsLoopback.Value = value.Int()
	} else {
		data.SourceInterfaceTrapsLoopback.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Port-channel"); value.Exists() {
		data.SourceInterfaceTrapsPortChannel.Value = value.Int()
	} else {
		data.SourceInterfaceTrapsPortChannel.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Port-channel-subinterface.Port-channel"); value.Exists() {
		data.SourceInterfaceTrapsPortChannelSubinterface.Value = value.String()
	} else {
		data.SourceInterfaceTrapsPortChannelSubinterface.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Vlan"); value.Exists() {
		data.SourceInterfaceTrapsVlan.Value = value.Int()
	} else {
		data.SourceInterfaceTrapsVlan.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.GigabitEthernet"); value.Exists() {
		data.TrapSourceGigabitEthernet.Value = value.String()
	} else {
		data.TrapSourceGigabitEthernet.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.TenGigabitEthernet"); value.Exists() {
		data.TrapSourceTenGigabitEthernet.Value = value.String()
	} else {
		data.TrapSourceTenGigabitEthernet.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.FortyGigabitEthernet"); value.Exists() {
		data.TrapSourceFortyGigabitEthernet.Value = value.String()
	} else {
		data.TrapSourceFortyGigabitEthernet.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.HundredGigE"); value.Exists() {
		data.TrapSourceHundredGigE.Value = value.String()
	} else {
		data.TrapSourceHundredGigE.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Loopback"); value.Exists() {
		data.TrapSourceLoopback.Value = value.Int()
	} else {
		data.TrapSourceLoopback.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Port-channel"); value.Exists() {
		data.TrapSourcePortChannel.Value = value.Int()
	} else {
		data.TrapSourcePortChannel.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Port-channel-subinterface.Port-channel"); value.Exists() {
		data.TrapSourcePortChannelSubinterface.Value = value.String()
	} else {
		data.TrapSourcePortChannelSubinterface.Null = true
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Vlan"); value.Exists() {
		data.TrapSourceVlan.Value = value.Int()
	} else {
		data.TrapSourceVlan.Null = true
	}
	for i := range data.SnmpCommunities {
		keys := [...]string{"name"}
		keyValues := [...]string{data.SnmpCommunities[i].Name.Value}

		var r gjson.Result
		res.Get(prefix + "Cisco-IOS-XE-snmp:community-config").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() {
			data.SnmpCommunities[i].Name.Value = value.String()
		} else {
			data.SnmpCommunities[i].Name.Null = true
		}
		if value := r.Get("view"); value.Exists() {
			data.SnmpCommunities[i].View.Value = value.String()
		} else {
			data.SnmpCommunities[i].View.Null = true
		}
		if value := r.Get("permission"); value.Exists() {
			data.SnmpCommunities[i].Permission.Value = value.String()
		} else {
			data.SnmpCommunities[i].Permission.Null = true
		}
		if value := r.Get("ipv6"); value.Exists() {
			data.SnmpCommunities[i].Ipv6.Value = value.String()
		} else {
			data.SnmpCommunities[i].Ipv6.Null = true
		}
		if value := r.Get("access-list-name"); value.Exists() {
			data.SnmpCommunities[i].AccessListName.Value = value.String()
		} else {
			data.SnmpCommunities[i].AccessListName.Null = true
		}
	}
	for i := range data.Contexts {
		keys := [...]string{"name"}
		keyValues := [...]string{data.Contexts[i].Name.Value}

		var r gjson.Result
		res.Get(prefix + "Cisco-IOS-XE-snmp:context").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() {
			data.Contexts[i].Name.Value = value.String()
		} else {
			data.Contexts[i].Name.Null = true
		}
	}
	for i := range data.Views {
		keys := [...]string{"name", "mib"}
		keyValues := [...]string{data.Views[i].Name.Value, data.Views[i].Mib.Value}

		var r gjson.Result
		res.Get(prefix + "Cisco-IOS-XE-snmp:view").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() {
			data.Views[i].Name.Value = value.String()
		} else {
			data.Views[i].Name.Null = true
		}
		if value := r.Get("mib"); value.Exists() {
			data.Views[i].Mib.Value = value.String()
		} else {
			data.Views[i].Mib.Null = true
		}
		if value := r.Get("inc-exl"); value.Exists() {
			data.Views[i].IncExl.Value = value.String()
		} else {
			data.Views[i].IncExl.Null = true
		}
	}
}

func (data *SNMPServer) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:chassis-id"); value.Exists() {
		data.ChassisId.Value = value.String()
		data.ChassisId.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:contact"); value.Exists() {
		data.Contact.Value = value.String()
		data.Contact.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:ifindex.persist"); value.Exists() {
		data.IfindexPersist.Value = true
		data.IfindexPersist.Null = false
	} else {
		data.IfindexPersist.Value = false
		data.IfindexPersist.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:location"); value.Exists() {
		data.Location.Value = value.String()
		data.Location.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:packetsize"); value.Exists() {
		data.Packetsize.Value = value.Int()
		data.Packetsize.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:queue-length"); value.Exists() {
		data.QueueLength.Value = value.Int()
		data.QueueLength.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.logging.getop"); value.Exists() {
		data.EnableLoggingGetop.Value = value.Bool()
		data.EnableLoggingGetop.Null = false
	} else {
		data.EnableLoggingGetop.Value = false
		data.EnableLoggingGetop.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.logging.setop"); value.Exists() {
		data.EnableLoggingSetop.Value = value.Bool()
		data.EnableLoggingSetop.Null = false
	} else {
		data.EnableLoggingSetop.Value = false
		data.EnableLoggingSetop.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.informs"); value.Exists() {
		data.EnableInforms.Value = true
		data.EnableInforms.Null = false
	} else {
		data.EnableInforms.Value = false
		data.EnableInforms.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps"); value.Exists() {
		data.EnableTraps.Value = true
		data.EnableTraps.Null = false
	} else {
		data.EnableTraps.Value = false
		data.EnableTraps.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.authentication"); value.Exists() {
		data.EnableTrapsSnmpAuthentication.Value = true
		data.EnableTrapsSnmpAuthentication.Null = false
	} else {
		data.EnableTrapsSnmpAuthentication.Value = false
		data.EnableTrapsSnmpAuthentication.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.coldstart"); value.Exists() {
		data.EnableTrapsSnmpColdstart.Value = true
		data.EnableTrapsSnmpColdstart.Null = false
	} else {
		data.EnableTrapsSnmpColdstart.Value = false
		data.EnableTrapsSnmpColdstart.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.linkdown"); value.Exists() {
		data.EnableTrapsSnmpLinkdown.Value = true
		data.EnableTrapsSnmpLinkdown.Null = false
	} else {
		data.EnableTrapsSnmpLinkdown.Value = false
		data.EnableTrapsSnmpLinkdown.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.linkup"); value.Exists() {
		data.EnableTrapsSnmpLinkup.Value = true
		data.EnableTrapsSnmpLinkup.Null = false
	} else {
		data.EnableTrapsSnmpLinkup.Value = false
		data.EnableTrapsSnmpLinkup.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.warmstart"); value.Exists() {
		data.EnableTrapsSnmpWarmstart.Value = true
		data.EnableTrapsSnmpWarmstart.Null = false
	} else {
		data.EnableTrapsSnmpWarmstart.Value = false
		data.EnableTrapsSnmpWarmstart.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.GigabitEthernet"); value.Exists() {
		data.SourceInterfaceInformsGigabitEthernet.Value = value.String()
		data.SourceInterfaceInformsGigabitEthernet.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.TenGigabitEthernet"); value.Exists() {
		data.SourceInterfaceInformsTenGigabitEthernet.Value = value.String()
		data.SourceInterfaceInformsTenGigabitEthernet.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.FortyGigabitEthernet"); value.Exists() {
		data.SourceInterfaceInformsFortyGigabitEthernet.Value = value.String()
		data.SourceInterfaceInformsFortyGigabitEthernet.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.HundredGigE"); value.Exists() {
		data.SourceInterfaceInformsHundredGigE.Value = value.String()
		data.SourceInterfaceInformsHundredGigE.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Loopback"); value.Exists() {
		data.SourceInterfaceInformsLoopback.Value = value.Int()
		data.SourceInterfaceInformsLoopback.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Port-channel"); value.Exists() {
		data.SourceInterfaceInformsPortChannel.Value = value.Int()
		data.SourceInterfaceInformsPortChannel.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Port-channel-subinterface.Port-channel"); value.Exists() {
		data.SourceInterfaceInformsPortChannelSubinterface.Value = value.String()
		data.SourceInterfaceInformsPortChannelSubinterface.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Vlan"); value.Exists() {
		data.SourceInterfaceInformsVlan.Value = value.Int()
		data.SourceInterfaceInformsVlan.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.GigabitEthernet"); value.Exists() {
		data.SourceInterfaceTrapsGigabitEthernet.Value = value.String()
		data.SourceInterfaceTrapsGigabitEthernet.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.TenGigabitEthernet"); value.Exists() {
		data.SourceInterfaceTrapsTenGigabitEthernet.Value = value.String()
		data.SourceInterfaceTrapsTenGigabitEthernet.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.FortyGigabitEthernet"); value.Exists() {
		data.SourceInterfaceTrapsFortyGigabitEthernet.Value = value.String()
		data.SourceInterfaceTrapsFortyGigabitEthernet.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.HundredGigE"); value.Exists() {
		data.SourceInterfaceTrapsHundredGigE.Value = value.String()
		data.SourceInterfaceTrapsHundredGigE.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Loopback"); value.Exists() {
		data.SourceInterfaceTrapsLoopback.Value = value.Int()
		data.SourceInterfaceTrapsLoopback.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Port-channel"); value.Exists() {
		data.SourceInterfaceTrapsPortChannel.Value = value.Int()
		data.SourceInterfaceTrapsPortChannel.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Port-channel-subinterface.Port-channel"); value.Exists() {
		data.SourceInterfaceTrapsPortChannelSubinterface.Value = value.String()
		data.SourceInterfaceTrapsPortChannelSubinterface.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Vlan"); value.Exists() {
		data.SourceInterfaceTrapsVlan.Value = value.Int()
		data.SourceInterfaceTrapsVlan.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.GigabitEthernet"); value.Exists() {
		data.TrapSourceGigabitEthernet.Value = value.String()
		data.TrapSourceGigabitEthernet.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.TenGigabitEthernet"); value.Exists() {
		data.TrapSourceTenGigabitEthernet.Value = value.String()
		data.TrapSourceTenGigabitEthernet.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.FortyGigabitEthernet"); value.Exists() {
		data.TrapSourceFortyGigabitEthernet.Value = value.String()
		data.TrapSourceFortyGigabitEthernet.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.HundredGigE"); value.Exists() {
		data.TrapSourceHundredGigE.Value = value.String()
		data.TrapSourceHundredGigE.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Loopback"); value.Exists() {
		data.TrapSourceLoopback.Value = value.Int()
		data.TrapSourceLoopback.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Port-channel"); value.Exists() {
		data.TrapSourcePortChannel.Value = value.Int()
		data.TrapSourcePortChannel.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Port-channel-subinterface.Port-channel"); value.Exists() {
		data.TrapSourcePortChannelSubinterface.Value = value.String()
		data.TrapSourcePortChannelSubinterface.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Vlan"); value.Exists() {
		data.TrapSourceVlan.Value = value.Int()
		data.TrapSourceVlan.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:community-config"); value.Exists() {
		data.SnmpCommunities = make([]SNMPServerSnmpCommunities, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SNMPServerSnmpCommunities{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name.Value = cValue.String()
				item.Name.Null = false
			}
			if cValue := v.Get("view"); cValue.Exists() {
				item.View.Value = cValue.String()
				item.View.Null = false
			}
			if cValue := v.Get("permission"); cValue.Exists() {
				item.Permission.Value = cValue.String()
				item.Permission.Null = false
			}
			if cValue := v.Get("ipv6"); cValue.Exists() {
				item.Ipv6.Value = cValue.String()
				item.Ipv6.Null = false
			}
			if cValue := v.Get("access-list-name"); cValue.Exists() {
				item.AccessListName.Value = cValue.String()
				item.AccessListName.Null = false
			}
			data.SnmpCommunities = append(data.SnmpCommunities, item)
			return true
		})
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:context"); value.Exists() {
		data.Contexts = make([]SNMPServerContexts, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SNMPServerContexts{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name.Value = cValue.String()
				item.Name.Null = false
			}
			data.Contexts = append(data.Contexts, item)
			return true
		})
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:view"); value.Exists() {
		data.Views = make([]SNMPServerViews, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SNMPServerViews{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name.Value = cValue.String()
				item.Name.Null = false
			}
			if cValue := v.Get("mib"); cValue.Exists() {
				item.Mib.Value = cValue.String()
				item.Mib.Null = false
			}
			if cValue := v.Get("inc-exl"); cValue.Exists() {
				item.IncExl.Value = cValue.String()
				item.IncExl.Null = false
			}
			data.Views = append(data.Views, item)
			return true
		})
	}
}

func (data *SNMPServer) setUnknownValues(ctx context.Context) {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.ChassisId.Unknown {
		data.ChassisId.Unknown = false
		data.ChassisId.Null = true
	}
	if data.Contact.Unknown {
		data.Contact.Unknown = false
		data.Contact.Null = true
	}
	if data.IfindexPersist.Unknown {
		data.IfindexPersist.Unknown = false
		data.IfindexPersist.Null = true
	}
	if data.Location.Unknown {
		data.Location.Unknown = false
		data.Location.Null = true
	}
	if data.Packetsize.Unknown {
		data.Packetsize.Unknown = false
		data.Packetsize.Null = true
	}
	if data.QueueLength.Unknown {
		data.QueueLength.Unknown = false
		data.QueueLength.Null = true
	}
	if data.EnableLoggingGetop.Unknown {
		data.EnableLoggingGetop.Unknown = false
		data.EnableLoggingGetop.Null = true
	}
	if data.EnableLoggingSetop.Unknown {
		data.EnableLoggingSetop.Unknown = false
		data.EnableLoggingSetop.Null = true
	}
	if data.EnableInforms.Unknown {
		data.EnableInforms.Unknown = false
		data.EnableInforms.Null = true
	}
	if data.EnableTraps.Unknown {
		data.EnableTraps.Unknown = false
		data.EnableTraps.Null = true
	}
	if data.EnableTrapsSnmpAuthentication.Unknown {
		data.EnableTrapsSnmpAuthentication.Unknown = false
		data.EnableTrapsSnmpAuthentication.Null = true
	}
	if data.EnableTrapsSnmpColdstart.Unknown {
		data.EnableTrapsSnmpColdstart.Unknown = false
		data.EnableTrapsSnmpColdstart.Null = true
	}
	if data.EnableTrapsSnmpLinkdown.Unknown {
		data.EnableTrapsSnmpLinkdown.Unknown = false
		data.EnableTrapsSnmpLinkdown.Null = true
	}
	if data.EnableTrapsSnmpLinkup.Unknown {
		data.EnableTrapsSnmpLinkup.Unknown = false
		data.EnableTrapsSnmpLinkup.Null = true
	}
	if data.EnableTrapsSnmpWarmstart.Unknown {
		data.EnableTrapsSnmpWarmstart.Unknown = false
		data.EnableTrapsSnmpWarmstart.Null = true
	}
	if data.SourceInterfaceInformsGigabitEthernet.Unknown {
		data.SourceInterfaceInformsGigabitEthernet.Unknown = false
		data.SourceInterfaceInformsGigabitEthernet.Null = true
	}
	if data.SourceInterfaceInformsTenGigabitEthernet.Unknown {
		data.SourceInterfaceInformsTenGigabitEthernet.Unknown = false
		data.SourceInterfaceInformsTenGigabitEthernet.Null = true
	}
	if data.SourceInterfaceInformsFortyGigabitEthernet.Unknown {
		data.SourceInterfaceInformsFortyGigabitEthernet.Unknown = false
		data.SourceInterfaceInformsFortyGigabitEthernet.Null = true
	}
	if data.SourceInterfaceInformsHundredGigE.Unknown {
		data.SourceInterfaceInformsHundredGigE.Unknown = false
		data.SourceInterfaceInformsHundredGigE.Null = true
	}
	if data.SourceInterfaceInformsLoopback.Unknown {
		data.SourceInterfaceInformsLoopback.Unknown = false
		data.SourceInterfaceInformsLoopback.Null = true
	}
	if data.SourceInterfaceInformsPortChannel.Unknown {
		data.SourceInterfaceInformsPortChannel.Unknown = false
		data.SourceInterfaceInformsPortChannel.Null = true
	}
	if data.SourceInterfaceInformsPortChannelSubinterface.Unknown {
		data.SourceInterfaceInformsPortChannelSubinterface.Unknown = false
		data.SourceInterfaceInformsPortChannelSubinterface.Null = true
	}
	if data.SourceInterfaceInformsVlan.Unknown {
		data.SourceInterfaceInformsVlan.Unknown = false
		data.SourceInterfaceInformsVlan.Null = true
	}
	if data.SourceInterfaceTrapsGigabitEthernet.Unknown {
		data.SourceInterfaceTrapsGigabitEthernet.Unknown = false
		data.SourceInterfaceTrapsGigabitEthernet.Null = true
	}
	if data.SourceInterfaceTrapsTenGigabitEthernet.Unknown {
		data.SourceInterfaceTrapsTenGigabitEthernet.Unknown = false
		data.SourceInterfaceTrapsTenGigabitEthernet.Null = true
	}
	if data.SourceInterfaceTrapsFortyGigabitEthernet.Unknown {
		data.SourceInterfaceTrapsFortyGigabitEthernet.Unknown = false
		data.SourceInterfaceTrapsFortyGigabitEthernet.Null = true
	}
	if data.SourceInterfaceTrapsHundredGigE.Unknown {
		data.SourceInterfaceTrapsHundredGigE.Unknown = false
		data.SourceInterfaceTrapsHundredGigE.Null = true
	}
	if data.SourceInterfaceTrapsLoopback.Unknown {
		data.SourceInterfaceTrapsLoopback.Unknown = false
		data.SourceInterfaceTrapsLoopback.Null = true
	}
	if data.SourceInterfaceTrapsPortChannel.Unknown {
		data.SourceInterfaceTrapsPortChannel.Unknown = false
		data.SourceInterfaceTrapsPortChannel.Null = true
	}
	if data.SourceInterfaceTrapsPortChannelSubinterface.Unknown {
		data.SourceInterfaceTrapsPortChannelSubinterface.Unknown = false
		data.SourceInterfaceTrapsPortChannelSubinterface.Null = true
	}
	if data.SourceInterfaceTrapsVlan.Unknown {
		data.SourceInterfaceTrapsVlan.Unknown = false
		data.SourceInterfaceTrapsVlan.Null = true
	}
	if data.TrapSourceGigabitEthernet.Unknown {
		data.TrapSourceGigabitEthernet.Unknown = false
		data.TrapSourceGigabitEthernet.Null = true
	}
	if data.TrapSourceTenGigabitEthernet.Unknown {
		data.TrapSourceTenGigabitEthernet.Unknown = false
		data.TrapSourceTenGigabitEthernet.Null = true
	}
	if data.TrapSourceFortyGigabitEthernet.Unknown {
		data.TrapSourceFortyGigabitEthernet.Unknown = false
		data.TrapSourceFortyGigabitEthernet.Null = true
	}
	if data.TrapSourceHundredGigE.Unknown {
		data.TrapSourceHundredGigE.Unknown = false
		data.TrapSourceHundredGigE.Null = true
	}
	if data.TrapSourceLoopback.Unknown {
		data.TrapSourceLoopback.Unknown = false
		data.TrapSourceLoopback.Null = true
	}
	if data.TrapSourcePortChannel.Unknown {
		data.TrapSourcePortChannel.Unknown = false
		data.TrapSourcePortChannel.Null = true
	}
	if data.TrapSourcePortChannelSubinterface.Unknown {
		data.TrapSourcePortChannelSubinterface.Unknown = false
		data.TrapSourcePortChannelSubinterface.Null = true
	}
	if data.TrapSourceVlan.Unknown {
		data.TrapSourceVlan.Unknown = false
		data.TrapSourceVlan.Null = true
	}
	for i := range data.SnmpCommunities {
		if data.SnmpCommunities[i].Name.Unknown {
			data.SnmpCommunities[i].Name.Unknown = false
			data.SnmpCommunities[i].Name.Null = true
		}
		if data.SnmpCommunities[i].View.Unknown {
			data.SnmpCommunities[i].View.Unknown = false
			data.SnmpCommunities[i].View.Null = true
		}
		if data.SnmpCommunities[i].Permission.Unknown {
			data.SnmpCommunities[i].Permission.Unknown = false
			data.SnmpCommunities[i].Permission.Null = true
		}
		if data.SnmpCommunities[i].Ipv6.Unknown {
			data.SnmpCommunities[i].Ipv6.Unknown = false
			data.SnmpCommunities[i].Ipv6.Null = true
		}
		if data.SnmpCommunities[i].AccessListName.Unknown {
			data.SnmpCommunities[i].AccessListName.Unknown = false
			data.SnmpCommunities[i].AccessListName.Null = true
		}
	}
	for i := range data.Contexts {
		if data.Contexts[i].Name.Unknown {
			data.Contexts[i].Name.Unknown = false
			data.Contexts[i].Name.Null = true
		}
	}
	for i := range data.Views {
		if data.Views[i].Name.Unknown {
			data.Views[i].Name.Unknown = false
			data.Views[i].Name.Null = true
		}
		if data.Views[i].Mib.Unknown {
			data.Views[i].Mib.Unknown = false
			data.Views[i].Mib.Null = true
		}
		if data.Views[i].IncExl.Unknown {
			data.Views[i].IncExl.Unknown = false
			data.Views[i].IncExl.Null = true
		}
	}
}

func (data *SNMPServer) getDeletedListItems(ctx context.Context, state SNMPServer) []string {
	deletedListItems := make([]string, 0)
	for i := range state.SnmpCommunities {
		stateKeyValues := [...]string{state.SnmpCommunities[i].Name.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.SnmpCommunities[i].Name.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.SnmpCommunities {
			found = true
			if state.SnmpCommunities[i].Name.Value != data.SnmpCommunities[j].Name.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:community-config=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.Contexts {
		stateKeyValues := [...]string{state.Contexts[i].Name.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.Contexts[i].Name.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Contexts {
			found = true
			if state.Contexts[i].Name.Value != data.Contexts[j].Name.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:context=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.Views {
		stateKeyValues := [...]string{state.Views[i].Name.Value, state.Views[i].Mib.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.Views[i].Name.Value).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Views[i].Mib.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Views {
			found = true
			if state.Views[i].Name.Value != data.Views[j].Name.Value {
				found = false
			}
			if state.Views[i].Mib.Value != data.Views[j].Mib.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:view=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *SNMPServer) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.IfindexPersist.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:ifindex/persist", data.getPath()))
	}
	if !data.EnableInforms.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/informs", data.getPath()))
	}
	if !data.EnableTrapsSnmpAuthentication.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/authentication", data.getPath()))
	}
	if !data.EnableTrapsSnmpColdstart.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/coldstart", data.getPath()))
	}
	if !data.EnableTrapsSnmpLinkdown.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/linkdown", data.getPath()))
	}
	if !data.EnableTrapsSnmpLinkup.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/linkup", data.getPath()))
	}
	if !data.EnableTrapsSnmpWarmstart.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/warmstart", data.getPath()))
	}

	return emptyLeafsDelete
}
