// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceIosxeSystem(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "hostname", "ROUTER-1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "ipv6_unicast_routing", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "ip_source_route", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "ip_domain_lookup", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "ip_domain_name", "test.com"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "login_delay", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "login_on_failure", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "login_on_failure_log", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "login_on_success", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "login_on_success_log", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "multicast_routing", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "multicast_routing_distributed", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "multicast_routing_vrfs.0.vrf", "VRF1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_system.test", "multicast_routing_vrfs.0.distributed", "true"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxeSystemPrerequisitesConfig + testAccDataSourceIosxeSystemConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

const testAccDataSourceIosxeSystemPrerequisitesConfig = `
resource "iosxe_restconf" "PreReq0" {
	path = "Cisco-IOS-XE-native:native/vrf/definition=VRF1"
	delete = false
	attributes = {
		"name" = "VRF1"
		"address-family/ipv4" = ""
	}
}

`

func testAccDataSourceIosxeSystemConfig() string {
	config := `resource "iosxe_system" "test" {` + "\n"
	config += `	hostname = "ROUTER-1"` + "\n"
	config += `	ipv6_unicast_routing = true` + "\n"
	config += `	ip_source_route = false` + "\n"
	config += `	ip_domain_lookup = false` + "\n"
	config += `	ip_domain_name = "test.com"` + "\n"
	config += `	login_delay = 10` + "\n"
	config += `	login_on_failure = true` + "\n"
	config += `	login_on_failure_log = true` + "\n"
	config += `	login_on_success = true` + "\n"
	config += `	login_on_success_log = true` + "\n"
	config += `	multicast_routing = true` + "\n"
	config += `	multicast_routing_distributed = true` + "\n"
	config += `	multicast_routing_vrfs = [{` + "\n"
	config += `		vrf = "VRF1"` + "\n"
	config += `		distributed = true` + "\n"
	config += `	}]` + "\n"
	config += `	depends_on = [iosxe_restconf.PreReq0, ]` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxe_system" "test" {
			depends_on = [iosxe_system.test]
		}
	`
	return config
}
