// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"net/url"
	"regexp"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type InterfaceSwitchport struct {
	Device                     types.String `tfsdk:"device"`
	Id                         types.String `tfsdk:"id"`
	Type                       types.String `tfsdk:"type"`
	Name                       types.String `tfsdk:"name"`
	ModeAccess                 types.Bool   `tfsdk:"mode_access"`
	ModeDot1qTunnel            types.Bool   `tfsdk:"mode_dot1q_tunnel"`
	ModePrivateVlanTrunk       types.Bool   `tfsdk:"mode_private_vlan_trunk"`
	ModePrivateVlanHost        types.Bool   `tfsdk:"mode_private_vlan_host"`
	ModePrivateVlanPromiscuous types.Bool   `tfsdk:"mode_private_vlan_promiscuous"`
	ModeTrunk                  types.Bool   `tfsdk:"mode_trunk"`
	Nonegotiate                types.Bool   `tfsdk:"nonegotiate"`
	AccessVlan                 types.String `tfsdk:"access_vlan"`
	TrunkAllowedVlans          types.String `tfsdk:"trunk_allowed_vlans"`
	TrunkNativeVlanTag         types.Bool   `tfsdk:"trunk_native_vlan_tag"`
	TrunkNativeVlan            types.Int64  `tfsdk:"trunk_native_vlan"`
	Host                       types.Bool   `tfsdk:"host"`
}

func (data InterfaceSwitchport) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/interface/%s=%v/switchport-config/switchport", url.QueryEscape(fmt.Sprintf("%v", data.Type.Value)), url.QueryEscape(fmt.Sprintf("%v", data.Name.Value)))
}

// if last path element has a key -> remove it
func (data InterfaceSwitchport) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data InterfaceSwitchport) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.ModeAccess.Null && !data.ModeAccess.Unknown {
		if data.ModeAccess.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-switch:mode.access", map[string]string{})
		}
	}
	if !data.ModeDot1qTunnel.Null && !data.ModeDot1qTunnel.Unknown {
		if data.ModeDot1qTunnel.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-switch:mode.dot1q-tunnel", map[string]string{})
		}
	}
	if !data.ModePrivateVlanTrunk.Null && !data.ModePrivateVlanTrunk.Unknown {
		if data.ModePrivateVlanTrunk.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-switch:mode.private-vlan.trunk", map[string]string{})
		}
	}
	if !data.ModePrivateVlanHost.Null && !data.ModePrivateVlanHost.Unknown {
		if data.ModePrivateVlanHost.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-switch:mode.private-vlan.host", map[string]string{})
		}
	}
	if !data.ModePrivateVlanPromiscuous.Null && !data.ModePrivateVlanPromiscuous.Unknown {
		if data.ModePrivateVlanPromiscuous.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-switch:mode.private-vlan.promiscuous", map[string]string{})
		}
	}
	if !data.ModeTrunk.Null && !data.ModeTrunk.Unknown {
		if data.ModeTrunk.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-switch:mode.trunk", map[string]string{})
		}
	}
	if !data.Nonegotiate.Null && !data.Nonegotiate.Unknown {
		if data.Nonegotiate.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-switch:nonegotiate", map[string]string{})
		}
	}
	if !data.AccessVlan.Null && !data.AccessVlan.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-switch:access.vlan.vlan", data.AccessVlan.Value)
	}
	if !data.TrunkAllowedVlans.Null && !data.TrunkAllowedVlans.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-switch:trunk.allowed.vlan.vlans", data.TrunkAllowedVlans.Value)
	}
	if !data.TrunkNativeVlanTag.Null && !data.TrunkNativeVlanTag.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-switch:trunk.native.vlan.tag", data.TrunkNativeVlanTag.Value)
	}
	if !data.TrunkNativeVlan.Null && !data.TrunkNativeVlan.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-switch:trunk.native.vlan.vlan-id", strconv.FormatInt(data.TrunkNativeVlan.Value, 10))
	}
	if !data.Host.Null && !data.Host.Unknown {
		if data.Host.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host", map[string]string{})
		}
	}
	return body
}

func (data *InterfaceSwitchport) updateFromBody(res gjson.Result) {
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:mode.access"); value.Exists() {
		data.ModeAccess.Value = true
	} else {
		data.ModeAccess.Value = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:mode.dot1q-tunnel"); value.Exists() {
		data.ModeDot1qTunnel.Value = true
	} else {
		data.ModeDot1qTunnel.Value = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:mode.private-vlan.trunk"); value.Exists() {
		data.ModePrivateVlanTrunk.Value = true
	} else {
		data.ModePrivateVlanTrunk.Value = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:mode.private-vlan.host"); value.Exists() {
		data.ModePrivateVlanHost.Value = true
	} else {
		data.ModePrivateVlanHost.Value = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:mode.private-vlan.promiscuous"); value.Exists() {
		data.ModePrivateVlanPromiscuous.Value = true
	} else {
		data.ModePrivateVlanPromiscuous.Value = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:mode.trunk"); value.Exists() {
		data.ModeTrunk.Value = true
	} else {
		data.ModeTrunk.Value = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:nonegotiate"); value.Exists() {
		data.Nonegotiate.Value = true
	} else {
		data.Nonegotiate.Value = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:access.vlan.vlan"); value.Exists() {
		data.AccessVlan.Value = value.String()
	} else {
		data.AccessVlan.Null = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:trunk.allowed.vlan.vlans"); value.Exists() {
		data.TrunkAllowedVlans.Value = value.String()
	} else {
		data.TrunkAllowedVlans.Null = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:trunk.native.vlan.tag"); value.Exists() {
		data.TrunkNativeVlanTag.Value = value.Bool()
	} else {
		data.TrunkNativeVlanTag.Value = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:trunk.native.vlan.vlan-id"); value.Exists() {
		data.TrunkNativeVlan.Value = value.Int()
	} else {
		data.TrunkNativeVlan.Null = true
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "host"); value.Exists() {
		data.Host.Value = true
	} else {
		data.Host.Value = false
	}
}

func (data *InterfaceSwitchport) fromBody(res gjson.Result) {
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:mode.access"); value.Exists() {
		data.ModeAccess.Value = true
		data.ModeAccess.Null = false
	} else {
		data.ModeAccess.Value = false
		data.ModeAccess.Null = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:mode.dot1q-tunnel"); value.Exists() {
		data.ModeDot1qTunnel.Value = true
		data.ModeDot1qTunnel.Null = false
	} else {
		data.ModeDot1qTunnel.Value = false
		data.ModeDot1qTunnel.Null = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:mode.private-vlan.trunk"); value.Exists() {
		data.ModePrivateVlanTrunk.Value = true
		data.ModePrivateVlanTrunk.Null = false
	} else {
		data.ModePrivateVlanTrunk.Value = false
		data.ModePrivateVlanTrunk.Null = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:mode.private-vlan.host"); value.Exists() {
		data.ModePrivateVlanHost.Value = true
		data.ModePrivateVlanHost.Null = false
	} else {
		data.ModePrivateVlanHost.Value = false
		data.ModePrivateVlanHost.Null = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:mode.private-vlan.promiscuous"); value.Exists() {
		data.ModePrivateVlanPromiscuous.Value = true
		data.ModePrivateVlanPromiscuous.Null = false
	} else {
		data.ModePrivateVlanPromiscuous.Value = false
		data.ModePrivateVlanPromiscuous.Null = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:mode.trunk"); value.Exists() {
		data.ModeTrunk.Value = true
		data.ModeTrunk.Null = false
	} else {
		data.ModeTrunk.Value = false
		data.ModeTrunk.Null = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:nonegotiate"); value.Exists() {
		data.Nonegotiate.Value = true
		data.Nonegotiate.Null = false
	} else {
		data.Nonegotiate.Value = false
		data.Nonegotiate.Null = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:access.vlan.vlan"); value.Exists() {
		data.AccessVlan.Value = value.String()
		data.AccessVlan.Null = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:trunk.allowed.vlan.vlans"); value.Exists() {
		data.TrunkAllowedVlans.Value = value.String()
		data.TrunkAllowedVlans.Null = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:trunk.native.vlan.tag"); value.Exists() {
		data.TrunkNativeVlanTag.Value = value.Bool()
		data.TrunkNativeVlanTag.Null = false
	} else {
		data.TrunkNativeVlanTag.Value = false
		data.TrunkNativeVlanTag.Null = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "Cisco-IOS-XE-switch:trunk.native.vlan.vlan-id"); value.Exists() {
		data.TrunkNativeVlan.Value = value.Int()
		data.TrunkNativeVlan.Null = false
	}
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "host"); value.Exists() {
		data.Host.Value = true
		data.Host.Null = false
	} else {
		data.Host.Value = false
		data.Host.Null = false
	}
}

func (data *InterfaceSwitchport) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Type.Unknown {
		data.Type.Unknown = false
		data.Type.Null = true
	}
	if data.Name.Unknown {
		data.Name.Unknown = false
		data.Name.Null = true
	}
	if data.ModeAccess.Unknown {
		data.ModeAccess.Unknown = false
		data.ModeAccess.Null = true
	}
	if data.ModeDot1qTunnel.Unknown {
		data.ModeDot1qTunnel.Unknown = false
		data.ModeDot1qTunnel.Null = true
	}
	if data.ModePrivateVlanTrunk.Unknown {
		data.ModePrivateVlanTrunk.Unknown = false
		data.ModePrivateVlanTrunk.Null = true
	}
	if data.ModePrivateVlanHost.Unknown {
		data.ModePrivateVlanHost.Unknown = false
		data.ModePrivateVlanHost.Null = true
	}
	if data.ModePrivateVlanPromiscuous.Unknown {
		data.ModePrivateVlanPromiscuous.Unknown = false
		data.ModePrivateVlanPromiscuous.Null = true
	}
	if data.ModeTrunk.Unknown {
		data.ModeTrunk.Unknown = false
		data.ModeTrunk.Null = true
	}
	if data.Nonegotiate.Unknown {
		data.Nonegotiate.Unknown = false
		data.Nonegotiate.Null = true
	}
	if data.AccessVlan.Unknown {
		data.AccessVlan.Unknown = false
		data.AccessVlan.Null = true
	}
	if data.TrunkAllowedVlans.Unknown {
		data.TrunkAllowedVlans.Unknown = false
		data.TrunkAllowedVlans.Null = true
	}
	if data.TrunkNativeVlanTag.Unknown {
		data.TrunkNativeVlanTag.Unknown = false
		data.TrunkNativeVlanTag.Null = true
	}
	if data.TrunkNativeVlan.Unknown {
		data.TrunkNativeVlan.Unknown = false
		data.TrunkNativeVlan.Null = true
	}
	if data.Host.Unknown {
		data.Host.Unknown = false
		data.Host.Null = true
	}
}

func (data *InterfaceSwitchport) getDeletedListItems(state InterfaceSwitchport) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}
