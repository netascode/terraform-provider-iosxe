// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type SNMPServerGroup struct {
	Device     types.String                `tfsdk:"device"`
	Id         types.String                `tfsdk:"id"`
	Name       types.String                `tfsdk:"name"`
	V3Security []SNMPServerGroupV3Security `tfsdk:"v3_security"`
}
type SNMPServerGroupV3Security struct {
	SecurityLevel     types.String `tfsdk:"security_level"`
	ContextNode       types.String `tfsdk:"context_node"`
	MatchNode         types.String `tfsdk:"match_node"`
	ReadNode          types.String `tfsdk:"read_node"`
	WriteNode         types.String `tfsdk:"write_node"`
	NotifyNode        types.String `tfsdk:"notify_node"`
	AccessIpv6Acl     types.String `tfsdk:"access_ipv6_acl"`
	AccessStandardAcl types.Int64  `tfsdk:"access_standard_acl"`
	AccessAclName     types.String `tfsdk:"access_acl_name"`
}

func (data SNMPServerGroup) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/snmp-server/Cisco-IOS-XE-snmp:group=%s", url.QueryEscape(fmt.Sprintf("%v", data.Name.Value)))
}

// if last path element has a key -> remove it
func (data SNMPServerGroup) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data SNMPServerGroup) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Name.Null && !data.Name.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"id", data.Name.Value)
	}
	if len(data.V3Security) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.security-level-list", []interface{}{})
		for index, item := range data.V3Security {
			if !item.SecurityLevel.Null && !item.SecurityLevel.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.security-level-list"+"."+strconv.Itoa(index)+"."+"security-level", item.SecurityLevel.Value)
			}
			if !item.ContextNode.Null && !item.ContextNode.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.security-level-list"+"."+strconv.Itoa(index)+"."+"context-node", item.ContextNode.Value)
			}
			if !item.MatchNode.Null && !item.MatchNode.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.security-level-list"+"."+strconv.Itoa(index)+"."+"match-node", item.MatchNode.Value)
			}
			if !item.ReadNode.Null && !item.ReadNode.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.security-level-list"+"."+strconv.Itoa(index)+"."+"read-node", item.ReadNode.Value)
			}
			if !item.WriteNode.Null && !item.WriteNode.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.security-level-list"+"."+strconv.Itoa(index)+"."+"write-node", item.WriteNode.Value)
			}
			if !item.NotifyNode.Null && !item.NotifyNode.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.security-level-list"+"."+strconv.Itoa(index)+"."+"notify-node", item.NotifyNode.Value)
			}
			if !item.AccessIpv6Acl.Null && !item.AccessIpv6Acl.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.security-level-list"+"."+strconv.Itoa(index)+"."+"access-config.ipv6-acl", item.AccessIpv6Acl.Value)
			}
			if !item.AccessStandardAcl.Null && !item.AccessStandardAcl.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.security-level-list"+"."+strconv.Itoa(index)+"."+"access-config.standard-acl", strconv.FormatInt(item.AccessStandardAcl.Value, 10))
			}
			if !item.AccessAclName.Null && !item.AccessAclName.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.security-level-list"+"."+strconv.Itoa(index)+"."+"access-config.acl-name", item.AccessAclName.Value)
			}
		}
	}
	return body
}

func (data *SNMPServerGroup) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "id"); value.Exists() {
		data.Name.Value = value.String()
	} else {
		data.Name.Null = true
	}
	for i := range data.V3Security {
		keys := [...]string{"security-level"}
		keyValues := [...]string{data.V3Security[i].SecurityLevel.Value}

		var r gjson.Result
		res.Get(prefix + "v3.security-level-list").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("security-level"); value.Exists() {
			data.V3Security[i].SecurityLevel.Value = value.String()
		} else {
			data.V3Security[i].SecurityLevel.Null = true
		}
		if value := r.Get("context-node"); value.Exists() {
			data.V3Security[i].ContextNode.Value = value.String()
		} else {
			data.V3Security[i].ContextNode.Null = true
		}
		if value := r.Get("match-node"); value.Exists() {
			data.V3Security[i].MatchNode.Value = value.String()
		} else {
			data.V3Security[i].MatchNode.Null = true
		}
		if value := r.Get("read-node"); value.Exists() {
			data.V3Security[i].ReadNode.Value = value.String()
		} else {
			data.V3Security[i].ReadNode.Null = true
		}
		if value := r.Get("write-node"); value.Exists() {
			data.V3Security[i].WriteNode.Value = value.String()
		} else {
			data.V3Security[i].WriteNode.Null = true
		}
		if value := r.Get("notify-node"); value.Exists() {
			data.V3Security[i].NotifyNode.Value = value.String()
		} else {
			data.V3Security[i].NotifyNode.Null = true
		}
		if value := r.Get("access-config.ipv6-acl"); value.Exists() {
			data.V3Security[i].AccessIpv6Acl.Value = value.String()
		} else {
			data.V3Security[i].AccessIpv6Acl.Null = true
		}
		if value := r.Get("access-config.standard-acl"); value.Exists() {
			data.V3Security[i].AccessStandardAcl.Value = value.Int()
		} else {
			data.V3Security[i].AccessStandardAcl.Null = true
		}
		if value := r.Get("access-config.acl-name"); value.Exists() {
			data.V3Security[i].AccessAclName.Value = value.String()
		} else {
			data.V3Security[i].AccessAclName.Null = true
		}
	}
}

func (data *SNMPServerGroup) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "v3.security-level-list"); value.Exists() {
		data.V3Security = make([]SNMPServerGroupV3Security, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SNMPServerGroupV3Security{}
			if cValue := v.Get("security-level"); cValue.Exists() {
				item.SecurityLevel.Value = cValue.String()
				item.SecurityLevel.Null = false
			}
			if cValue := v.Get("context-node"); cValue.Exists() {
				item.ContextNode.Value = cValue.String()
				item.ContextNode.Null = false
			}
			if cValue := v.Get("match-node"); cValue.Exists() {
				item.MatchNode.Value = cValue.String()
				item.MatchNode.Null = false
			}
			if cValue := v.Get("read-node"); cValue.Exists() {
				item.ReadNode.Value = cValue.String()
				item.ReadNode.Null = false
			}
			if cValue := v.Get("write-node"); cValue.Exists() {
				item.WriteNode.Value = cValue.String()
				item.WriteNode.Null = false
			}
			if cValue := v.Get("notify-node"); cValue.Exists() {
				item.NotifyNode.Value = cValue.String()
				item.NotifyNode.Null = false
			}
			if cValue := v.Get("access-config.ipv6-acl"); cValue.Exists() {
				item.AccessIpv6Acl.Value = cValue.String()
				item.AccessIpv6Acl.Null = false
			}
			if cValue := v.Get("access-config.standard-acl"); cValue.Exists() {
				item.AccessStandardAcl.Value = cValue.Int()
				item.AccessStandardAcl.Null = false
			}
			if cValue := v.Get("access-config.acl-name"); cValue.Exists() {
				item.AccessAclName.Value = cValue.String()
				item.AccessAclName.Null = false
			}
			data.V3Security = append(data.V3Security, item)
			return true
		})
	}
}

func (data *SNMPServerGroup) setUnknownValues(ctx context.Context) {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Name.Unknown {
		data.Name.Unknown = false
		data.Name.Null = true
	}
	for i := range data.V3Security {
		if data.V3Security[i].SecurityLevel.Unknown {
			data.V3Security[i].SecurityLevel.Unknown = false
			data.V3Security[i].SecurityLevel.Null = true
		}
		if data.V3Security[i].ContextNode.Unknown {
			data.V3Security[i].ContextNode.Unknown = false
			data.V3Security[i].ContextNode.Null = true
		}
		if data.V3Security[i].MatchNode.Unknown {
			data.V3Security[i].MatchNode.Unknown = false
			data.V3Security[i].MatchNode.Null = true
		}
		if data.V3Security[i].ReadNode.Unknown {
			data.V3Security[i].ReadNode.Unknown = false
			data.V3Security[i].ReadNode.Null = true
		}
		if data.V3Security[i].WriteNode.Unknown {
			data.V3Security[i].WriteNode.Unknown = false
			data.V3Security[i].WriteNode.Null = true
		}
		if data.V3Security[i].NotifyNode.Unknown {
			data.V3Security[i].NotifyNode.Unknown = false
			data.V3Security[i].NotifyNode.Null = true
		}
		if data.V3Security[i].AccessIpv6Acl.Unknown {
			data.V3Security[i].AccessIpv6Acl.Unknown = false
			data.V3Security[i].AccessIpv6Acl.Null = true
		}
		if data.V3Security[i].AccessStandardAcl.Unknown {
			data.V3Security[i].AccessStandardAcl.Unknown = false
			data.V3Security[i].AccessStandardAcl.Null = true
		}
		if data.V3Security[i].AccessAclName.Unknown {
			data.V3Security[i].AccessAclName.Unknown = false
			data.V3Security[i].AccessAclName.Null = true
		}
	}
}

func (data *SNMPServerGroup) getDeletedListItems(ctx context.Context, state SNMPServerGroup) []string {
	deletedListItems := make([]string, 0)
	for i := range state.V3Security {
		stateKeyValues := [...]string{state.V3Security[i].SecurityLevel.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.V3Security[i].SecurityLevel.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.V3Security {
			found = true
			if state.V3Security[i].SecurityLevel.Value != data.V3Security[j].SecurityLevel.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/security-model/v3/v3/security-level-list=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *SNMPServerGroup) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}
