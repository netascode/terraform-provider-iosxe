// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

type dataSourceVRFType struct{}

func (t dataSourceVRFType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the VRF configuration.",

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The path of the retrieved object.",
				Type:                types.StringType,
				Computed:            true,
			},
			"name": {
				MarkdownDescription: "WORD;;VRF name",
				Type:                types.StringType,
				Required:            true,
			},
			"description": {
				MarkdownDescription: "VRF specific description",
				Type:                types.StringType,
				Computed:            true,
			},
			"rd": {
				MarkdownDescription: "Specify Route Distinguisher",
				Type:                types.StringType,
				Computed:            true,
			},
			"address_family_ipv4": {
				MarkdownDescription: "Address family",
				Type:                types.BoolType,
				Computed:            true,
			},
			"address_family_ipv6": {
				MarkdownDescription: "Address family",
				Type:                types.BoolType,
				Computed:            true,
			},
			"vpn_id": {
				MarkdownDescription: "Configure VPN ID in rfc2685 format",
				Type:                types.StringType,
				Computed:            true,
			},
			"route_target_import": {
				MarkdownDescription: "Import Target-VPN community",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"value": {
						MarkdownDescription: "Value",
						Type:                types.StringType,
						Computed:            true,
					},
					"stitching": {
						MarkdownDescription: "VXLAN route target set",
						Type:                types.BoolType,
						Computed:            true,
					},
				}),
			},
			"route_target_export": {
				MarkdownDescription: "Export Target-VPN community",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"value": {
						MarkdownDescription: "Value",
						Type:                types.StringType,
						Computed:            true,
					},
					"stitching": {
						MarkdownDescription: "VXLAN route target set",
						Type:                types.BoolType,
						Computed:            true,
					},
				}),
			},
			"ipv4_route_target_import": {
				MarkdownDescription: "Import Target-VPN community",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"value": {
						MarkdownDescription: "Value",
						Type:                types.StringType,
						Computed:            true,
					},
				}),
			},
			"ipv4_route_target_import_stitching": {
				MarkdownDescription: "Import Target-VPN community",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"value": {
						MarkdownDescription: "Value",
						Type:                types.StringType,
						Computed:            true,
					},
					"stitching": {
						MarkdownDescription: "VXLAN route target set",
						Type:                types.BoolType,
						Computed:            true,
					},
				}),
			},
			"ipv4_route_target_export": {
				MarkdownDescription: "Export Target-VPN community",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"value": {
						MarkdownDescription: "Value",
						Type:                types.StringType,
						Computed:            true,
					},
				}),
			},
			"ipv4_route_target_export_stitching": {
				MarkdownDescription: "Export Target-VPN community",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"value": {
						MarkdownDescription: "Value",
						Type:                types.StringType,
						Computed:            true,
					},
					"stitching": {
						MarkdownDescription: "VXLAN route target set",
						Type:                types.BoolType,
						Computed:            true,
					},
				}),
			},
			"ipv6_route_target_import": {
				MarkdownDescription: "Import Target-VPN community",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"value": {
						MarkdownDescription: "Value",
						Type:                types.StringType,
						Computed:            true,
					},
				}),
			},
			"ipv6_route_target_import_stitching": {
				MarkdownDescription: "Import Target-VPN community",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"value": {
						MarkdownDescription: "Value",
						Type:                types.StringType,
						Computed:            true,
					},
					"stitching": {
						MarkdownDescription: "VXLAN route target set",
						Type:                types.BoolType,
						Computed:            true,
					},
				}),
			},
			"ipv6_route_target_export": {
				MarkdownDescription: "Export Target-VPN community",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"value": {
						MarkdownDescription: "Value",
						Type:                types.StringType,
						Computed:            true,
					},
				}),
			},
			"ipv6_route_target_export_stitching": {
				MarkdownDescription: "Export Target-VPN community",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"value": {
						MarkdownDescription: "Value",
						Type:                types.StringType,
						Computed:            true,
					},
					"stitching": {
						MarkdownDescription: "VXLAN route target set",
						Type:                types.BoolType,
						Computed:            true,
					},
				}),
			},
		},
	}, nil
}

func (t dataSourceVRFType) NewDataSource(ctx context.Context, in tfsdk.Provider) (tfsdk.DataSource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return dataSourceVRF{
		provider: provider,
	}, diags
}

type dataSourceVRF struct {
	provider provider
}

func (d dataSourceVRF) Read(ctx context.Context, req tfsdk.ReadDataSourceRequest, resp *tfsdk.ReadDataSourceResponse) {
	var config VRF

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	res, err := d.provider.clients[config.Device.Value].GetData(config.getPath())
	if res.StatusCode == 404 {
		config = VRF{Device: config.Device}
	} else {
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
			return
		}

		config.fromBody(res.Res)
	}

	config.Id = types.String{Value: config.getPath()}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
