// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"regexp"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type InterfacePIM struct {
	Device          types.String `tfsdk:"device"`
	Id              types.String `tfsdk:"id"`
	Type            types.String `tfsdk:"type"`
	Name            types.String `tfsdk:"name"`
	Passive         types.Bool   `tfsdk:"passive"`
	DenseMode       types.Bool   `tfsdk:"dense_mode"`
	SparseMode      types.Bool   `tfsdk:"sparse_mode"`
	SparseDenseMode types.Bool   `tfsdk:"sparse_dense_mode"`
	Bfd             types.Bool   `tfsdk:"bfd"`
	Border          types.Bool   `tfsdk:"border"`
	BsrBorder       types.Bool   `tfsdk:"bsr_border"`
	DrPriority      types.Int64  `tfsdk:"dr_priority"`
}

func (data InterfacePIM) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/interface/%s=%v/ip/pim", url.QueryEscape(fmt.Sprintf("%v", data.Type.Value)), url.QueryEscape(fmt.Sprintf("%v", data.Name.Value)))
}

// if last path element has a key -> remove it
func (data InterfacePIM) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data InterfacePIM) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Passive.Null && !data.Passive.Unknown {
		if data.Passive.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:pim-mode-choice-cfg.passive", map[string]string{})
		}
	}
	if !data.DenseMode.Null && !data.DenseMode.Unknown {
		if data.DenseMode.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:pim-mode-choice-cfg.dense-mode", map[string]string{})
		}
	}
	if !data.SparseMode.Null && !data.SparseMode.Unknown {
		if data.SparseMode.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:pim-mode-choice-cfg.sparse-mode", map[string]string{})
		}
	}
	if !data.SparseDenseMode.Null && !data.SparseDenseMode.Unknown {
		if data.SparseDenseMode.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:pim-mode-choice-cfg.sparse-dense-mode", map[string]string{})
		}
	}
	if !data.Bfd.Null && !data.Bfd.Unknown {
		if data.Bfd.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:bfd", map[string]string{})
		}
	}
	if !data.Border.Null && !data.Border.Unknown {
		if data.Border.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:border", map[string]string{})
		}
	}
	if !data.BsrBorder.Null && !data.BsrBorder.Unknown {
		if data.BsrBorder.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:bsr-border", map[string]string{})
		}
	}
	if !data.DrPriority.Null && !data.DrPriority.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-multicast:dr-priority", strconv.FormatInt(data.DrPriority.Value, 10))
	}
	return body
}

func (data *InterfacePIM) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:pim-mode-choice-cfg.passive"); value.Exists() {
		data.Passive.Value = true
	} else {
		data.Passive.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:pim-mode-choice-cfg.dense-mode"); value.Exists() {
		data.DenseMode.Value = true
	} else {
		data.DenseMode.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:pim-mode-choice-cfg.sparse-mode"); value.Exists() {
		data.SparseMode.Value = true
	} else {
		data.SparseMode.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:pim-mode-choice-cfg.sparse-dense-mode"); value.Exists() {
		data.SparseDenseMode.Value = true
	} else {
		data.SparseDenseMode.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:bfd"); value.Exists() {
		data.Bfd.Value = true
	} else {
		data.Bfd.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:border"); value.Exists() {
		data.Border.Value = true
	} else {
		data.Border.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:bsr-border"); value.Exists() {
		data.BsrBorder.Value = true
	} else {
		data.BsrBorder.Value = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:dr-priority"); value.Exists() {
		data.DrPriority.Value = value.Int()
	} else {
		data.DrPriority.Null = true
	}
}

func (data *InterfacePIM) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:pim-mode-choice-cfg.passive"); value.Exists() {
		data.Passive.Value = true
		data.Passive.Null = false
	} else {
		data.Passive.Value = false
		data.Passive.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:pim-mode-choice-cfg.dense-mode"); value.Exists() {
		data.DenseMode.Value = true
		data.DenseMode.Null = false
	} else {
		data.DenseMode.Value = false
		data.DenseMode.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:pim-mode-choice-cfg.sparse-mode"); value.Exists() {
		data.SparseMode.Value = true
		data.SparseMode.Null = false
	} else {
		data.SparseMode.Value = false
		data.SparseMode.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:pim-mode-choice-cfg.sparse-dense-mode"); value.Exists() {
		data.SparseDenseMode.Value = true
		data.SparseDenseMode.Null = false
	} else {
		data.SparseDenseMode.Value = false
		data.SparseDenseMode.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:bfd"); value.Exists() {
		data.Bfd.Value = true
		data.Bfd.Null = false
	} else {
		data.Bfd.Value = false
		data.Bfd.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:border"); value.Exists() {
		data.Border.Value = true
		data.Border.Null = false
	} else {
		data.Border.Value = false
		data.Border.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:bsr-border"); value.Exists() {
		data.BsrBorder.Value = true
		data.BsrBorder.Null = false
	} else {
		data.BsrBorder.Value = false
		data.BsrBorder.Null = false
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-multicast:dr-priority"); value.Exists() {
		data.DrPriority.Value = value.Int()
		data.DrPriority.Null = false
	}
}

func (data *InterfacePIM) setUnknownValues(ctx context.Context) {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Type.Unknown {
		data.Type.Unknown = false
		data.Type.Null = true
	}
	if data.Name.Unknown {
		data.Name.Unknown = false
		data.Name.Null = true
	}
	if data.Passive.Unknown {
		data.Passive.Unknown = false
		data.Passive.Null = true
	}
	if data.DenseMode.Unknown {
		data.DenseMode.Unknown = false
		data.DenseMode.Null = true
	}
	if data.SparseMode.Unknown {
		data.SparseMode.Unknown = false
		data.SparseMode.Null = true
	}
	if data.SparseDenseMode.Unknown {
		data.SparseDenseMode.Unknown = false
		data.SparseDenseMode.Null = true
	}
	if data.Bfd.Unknown {
		data.Bfd.Unknown = false
		data.Bfd.Null = true
	}
	if data.Border.Unknown {
		data.Border.Unknown = false
		data.Border.Null = true
	}
	if data.BsrBorder.Unknown {
		data.BsrBorder.Unknown = false
		data.BsrBorder.Null = true
	}
	if data.DrPriority.Unknown {
		data.DrPriority.Unknown = false
		data.DrPriority.Null = true
	}
}

func (data *InterfacePIM) getDeletedListItems(ctx context.Context, state InterfacePIM) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *InterfacePIM) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.Passive.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-multicast:pim-mode-choice-cfg/pim-mode-choice/passive-mode/passive", data.getPath()))
	}
	if !data.SparseDenseMode.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-multicast:pim-mode-choice-cfg/pim-mode-choice/sparse-dense/sparse-dense-mode", data.getPath()))
	}
	if !data.Bfd.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-multicast:bfd", data.getPath()))
	}
	if !data.Border.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-multicast:border", data.getPath()))
	}
	if !data.BsrBorder.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-multicast:bsr-border", data.getPath()))
	}
	return emptyLeafsDelete
}
