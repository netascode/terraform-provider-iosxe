// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type LoggingIPv6HostTransport struct {
	Device            types.String                                `tfsdk:"device"`
	Id                types.String                                `tfsdk:"id"`
	Ipv6Host          types.String                                `tfsdk:"ipv6_host"`
	TransportUdpPorts []LoggingIPv6HostTransportTransportUdpPorts `tfsdk:"transport_udp_ports"`
	TransportTcpPorts []LoggingIPv6HostTransportTransportTcpPorts `tfsdk:"transport_tcp_ports"`
	TransportTlsPorts []LoggingIPv6HostTransportTransportTlsPorts `tfsdk:"transport_tls_ports"`
}
type LoggingIPv6HostTransportTransportUdpPorts struct {
	PortNumber types.Int64 `tfsdk:"port_number"`
}
type LoggingIPv6HostTransportTransportTcpPorts struct {
	PortNumber types.Int64 `tfsdk:"port_number"`
}
type LoggingIPv6HostTransportTransportTlsPorts struct {
	PortNumber types.Int64  `tfsdk:"port_number"`
	Profile    types.String `tfsdk:"profile"`
}

func (data LoggingIPv6HostTransport) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/logging/host/ipv6/ipv6-host-transport-list=%s", url.QueryEscape(fmt.Sprintf("%v", data.Ipv6Host.Value)))
}

// if last path element has a key -> remove it
func (data LoggingIPv6HostTransport) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data LoggingIPv6HostTransport) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Ipv6Host.Null && !data.Ipv6Host.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6-host", data.Ipv6Host.Value)
	}
	if len(data.TransportUdpPorts) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"transport.udp.port-config", []interface{}{})
		for index, item := range data.TransportUdpPorts {
			if !item.PortNumber.Null && !item.PortNumber.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"transport.udp.port-config"+"."+strconv.Itoa(index)+"."+"port-number", strconv.FormatInt(item.PortNumber.Value, 10))
			}
		}
	}
	if len(data.TransportTcpPorts) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"transport.tcp.port-config", []interface{}{})
		for index, item := range data.TransportTcpPorts {
			if !item.PortNumber.Null && !item.PortNumber.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"transport.tcp.port-config"+"."+strconv.Itoa(index)+"."+"port-number", strconv.FormatInt(item.PortNumber.Value, 10))
			}
		}
	}
	if len(data.TransportTlsPorts) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"transport.tls.port", []interface{}{})
		for index, item := range data.TransportTlsPorts {
			if !item.PortNumber.Null && !item.PortNumber.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"transport.tls.port"+"."+strconv.Itoa(index)+"."+"port-number", strconv.FormatInt(item.PortNumber.Value, 10))
			}
			if !item.Profile.Null && !item.Profile.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"transport.tls.port"+"."+strconv.Itoa(index)+"."+"profile", item.Profile.Value)
			}
		}
	}
	return body
}

func (data *LoggingIPv6HostTransport) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "ipv6-host"); value.Exists() {
		data.Ipv6Host.Value = value.String()
	} else {
		data.Ipv6Host.Null = true
	}
	for i := range data.TransportUdpPorts {
		keys := [...]string{"port-number"}
		keyValues := [...]string{strconv.FormatInt(data.TransportUdpPorts[i].PortNumber.Value, 10)}

		var r gjson.Result
		res.Get(prefix + "transport.udp.port-config").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("port-number"); value.Exists() {
			data.TransportUdpPorts[i].PortNumber.Value = value.Int()
		} else {
			data.TransportUdpPorts[i].PortNumber.Null = true
		}
	}
	for i := range data.TransportTcpPorts {
		keys := [...]string{"port-number"}
		keyValues := [...]string{strconv.FormatInt(data.TransportTcpPorts[i].PortNumber.Value, 10)}

		var r gjson.Result
		res.Get(prefix + "transport.tcp.port-config").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("port-number"); value.Exists() {
			data.TransportTcpPorts[i].PortNumber.Value = value.Int()
		} else {
			data.TransportTcpPorts[i].PortNumber.Null = true
		}
	}
	for i := range data.TransportTlsPorts {
		keys := [...]string{"port-number"}
		keyValues := [...]string{strconv.FormatInt(data.TransportTlsPorts[i].PortNumber.Value, 10)}

		var r gjson.Result
		res.Get(prefix + "transport.tls.port").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("port-number"); value.Exists() {
			data.TransportTlsPorts[i].PortNumber.Value = value.Int()
		} else {
			data.TransportTlsPorts[i].PortNumber.Null = true
		}
		if value := r.Get("profile"); value.Exists() {
			data.TransportTlsPorts[i].Profile.Value = value.String()
		} else {
			data.TransportTlsPorts[i].Profile.Null = true
		}
	}
}

func (data *LoggingIPv6HostTransport) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "transport.udp.port-config"); value.Exists() {
		data.TransportUdpPorts = make([]LoggingIPv6HostTransportTransportUdpPorts, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := LoggingIPv6HostTransportTransportUdpPorts{}
			if cValue := v.Get("port-number"); cValue.Exists() {
				item.PortNumber.Value = cValue.Int()
				item.PortNumber.Null = false
			}
			data.TransportUdpPorts = append(data.TransportUdpPorts, item)
			return true
		})
	}
	if value := res.Get(prefix + "transport.tcp.port-config"); value.Exists() {
		data.TransportTcpPorts = make([]LoggingIPv6HostTransportTransportTcpPorts, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := LoggingIPv6HostTransportTransportTcpPorts{}
			if cValue := v.Get("port-number"); cValue.Exists() {
				item.PortNumber.Value = cValue.Int()
				item.PortNumber.Null = false
			}
			data.TransportTcpPorts = append(data.TransportTcpPorts, item)
			return true
		})
	}
	if value := res.Get(prefix + "transport.tls.port"); value.Exists() {
		data.TransportTlsPorts = make([]LoggingIPv6HostTransportTransportTlsPorts, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := LoggingIPv6HostTransportTransportTlsPorts{}
			if cValue := v.Get("port-number"); cValue.Exists() {
				item.PortNumber.Value = cValue.Int()
				item.PortNumber.Null = false
			}
			if cValue := v.Get("profile"); cValue.Exists() {
				item.Profile.Value = cValue.String()
				item.Profile.Null = false
			}
			data.TransportTlsPorts = append(data.TransportTlsPorts, item)
			return true
		})
	}
}

func (data *LoggingIPv6HostTransport) setUnknownValues(ctx context.Context) {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Ipv6Host.Unknown {
		data.Ipv6Host.Unknown = false
		data.Ipv6Host.Null = true
	}
	for i := range data.TransportUdpPorts {
		if data.TransportUdpPorts[i].PortNumber.Unknown {
			data.TransportUdpPorts[i].PortNumber.Unknown = false
			data.TransportUdpPorts[i].PortNumber.Null = true
		}
	}
	for i := range data.TransportTcpPorts {
		if data.TransportTcpPorts[i].PortNumber.Unknown {
			data.TransportTcpPorts[i].PortNumber.Unknown = false
			data.TransportTcpPorts[i].PortNumber.Null = true
		}
	}
	for i := range data.TransportTlsPorts {
		if data.TransportTlsPorts[i].PortNumber.Unknown {
			data.TransportTlsPorts[i].PortNumber.Unknown = false
			data.TransportTlsPorts[i].PortNumber.Null = true
		}
		if data.TransportTlsPorts[i].Profile.Unknown {
			data.TransportTlsPorts[i].Profile.Unknown = false
			data.TransportTlsPorts[i].Profile.Null = true
		}
	}
}

func (data *LoggingIPv6HostTransport) getDeletedListItems(ctx context.Context, state LoggingIPv6HostTransport) []string {
	deletedListItems := make([]string, 0)
	for i := range state.TransportUdpPorts {
		stateKeyValues := [...]string{strconv.FormatInt(state.TransportUdpPorts[i].PortNumber.Value, 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.TransportUdpPorts[i].PortNumber.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.TransportUdpPorts {
			found = true
			if state.TransportUdpPorts[i].PortNumber.Value != data.TransportUdpPorts[j].PortNumber.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/transport/udp/port-config=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.TransportTcpPorts {
		stateKeyValues := [...]string{strconv.FormatInt(state.TransportTcpPorts[i].PortNumber.Value, 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.TransportTcpPorts[i].PortNumber.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.TransportTcpPorts {
			found = true
			if state.TransportTcpPorts[i].PortNumber.Value != data.TransportTcpPorts[j].PortNumber.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/transport/tcp/port-config=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.TransportTlsPorts {
		stateKeyValues := [...]string{strconv.FormatInt(state.TransportTlsPorts[i].PortNumber.Value, 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.TransportTlsPorts[i].PortNumber.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.TransportTlsPorts {
			found = true
			if state.TransportTlsPorts[i].PortNumber.Value != data.TransportTlsPorts[j].PortNumber.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/transport/tls/port=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *LoggingIPv6HostTransport) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}
