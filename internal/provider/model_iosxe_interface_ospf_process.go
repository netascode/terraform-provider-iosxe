// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type InterfaceOSPFProcess struct {
	Device    types.String               `tfsdk:"device"`
	Id        types.String               `tfsdk:"id"`
	Type      types.String               `tfsdk:"type"`
	Name      types.String               `tfsdk:"name"`
	ProcessId types.Int64                `tfsdk:"process_id"`
	Area      []InterfaceOSPFProcessArea `tfsdk:"area"`
}
type InterfaceOSPFProcessArea struct {
	AreaId types.String `tfsdk:"area_id"`
}

func (data InterfaceOSPFProcess) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/interface/%s=%v/ip/Cisco-IOS-XE-ospf:router-ospf/ospf/process-id=%v", url.QueryEscape(fmt.Sprintf("%v", data.Type.Value)), url.QueryEscape(fmt.Sprintf("%v", data.Name.Value)), url.QueryEscape(fmt.Sprintf("%v", data.ProcessId.Value)))
}

// if last path element has a key -> remove it
func (data InterfaceOSPFProcess) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data InterfaceOSPFProcess) toBody() string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.ProcessId.Null && !data.ProcessId.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"id", strconv.FormatInt(data.ProcessId.Value, 10))
	}
	if len(data.Area) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"area", []interface{}{})
		for index, item := range data.Area {
			if !item.AreaId.Null && !item.AreaId.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"area"+"."+strconv.Itoa(index)+"."+"area-id", item.AreaId.Value)
			}
		}
	}
	return body
}

func (data *InterfaceOSPFProcess) updateFromBody(res gjson.Result) {
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "id"); value.Exists() {
		data.ProcessId.Value = value.Int()
	} else {
		data.ProcessId.Null = true
	}
	for i := range data.Area {
		key := data.Area[i].AreaId.Value
		if value := res.Get(fmt.Sprintf("%v.area.#(area-id==\"%v\").area-id", helpers.LastElement(data.getPath()), key)); value.Exists() {
			data.Area[i].AreaId.Value = value.String()
		} else {
			data.Area[i].AreaId.Null = true
		}
	}
}

func (data *InterfaceOSPFProcess) fromBody(res gjson.Result) {
	if value := res.Get(helpers.LastElement(data.getPath()) + "." + "area"); value.Exists() {
		data.Area = make([]InterfaceOSPFProcessArea, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceOSPFProcessArea{}
			if cValue := v.Get("area-id"); cValue.Exists() {
				item.AreaId.Value = cValue.String()
				item.AreaId.Null = false
			}
			data.Area = append(data.Area, item)
			return true
		})
	}
}

func (data *InterfaceOSPFProcess) setUnknownValues() {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Type.Unknown {
		data.Type.Unknown = false
		data.Type.Null = true
	}
	if data.Name.Unknown {
		data.Name.Unknown = false
		data.Name.Null = true
	}
	if data.ProcessId.Unknown {
		data.ProcessId.Unknown = false
		data.ProcessId.Null = true
	}
	for i := range data.Area {
		if data.Area[i].AreaId.Unknown {
			data.Area[i].AreaId.Unknown = false
			data.Area[i].AreaId.Null = true
		}
	}
}

func (data *InterfaceOSPFProcess) getDeletedListItems(state InterfaceOSPFProcess) []string {
	deletedListItems := make([]string, 0)
	for _, i := range state.Area {
		if reflect.ValueOf(i.AreaId.Value).IsZero() {
			continue
		}
		found := false
		for _, j := range data.Area {
			if i.AreaId.Value == j.AreaId.Value {
				found = true
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/area=%v", state.getPath(), i.AreaId.Value))
		}
	}
	return deletedListItems
}
