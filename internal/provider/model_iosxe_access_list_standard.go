// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type AccessListStandard struct {
	Device  types.String                `tfsdk:"device"`
	Id      types.String                `tfsdk:"id"`
	Name    types.String                `tfsdk:"name"`
	Entries []AccessListStandardEntries `tfsdk:"entries"`
}
type AccessListStandardEntries struct {
	Sequence         types.Int64  `tfsdk:"sequence"`
	Remark           types.String `tfsdk:"remark"`
	DenyPrefix       types.String `tfsdk:"deny_prefix"`
	DenyPrefixMask   types.String `tfsdk:"deny_prefix_mask"`
	DenyAny          types.Bool   `tfsdk:"deny_any"`
	DenyHost         types.String `tfsdk:"deny_host"`
	PermitPrefix     types.String `tfsdk:"permit_prefix"`
	PermitPrefixMask types.String `tfsdk:"permit_prefix_mask"`
	PermitAny        types.Bool   `tfsdk:"permit_any"`
	PermitHost       types.String `tfsdk:"permit_host"`
}

func (data AccessListStandard) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/ip/access-list/Cisco-IOS-XE-acl:standard=%v", url.QueryEscape(fmt.Sprintf("%v", data.Name.Value)))
}

// if last path element has a key -> remove it
func (data AccessListStandard) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data AccessListStandard) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Name.Null && !data.Name.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"name", data.Name.Value)
	}
	if len(data.Entries) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule", []interface{}{})
		for index, item := range data.Entries {
			if !item.Sequence.Null && !item.Sequence.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"sequence", strconv.FormatInt(item.Sequence.Value, 10))
			}
			if !item.Remark.Null && !item.Remark.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"remark", item.Remark.Value)
			}
			if !item.DenyPrefix.Null && !item.DenyPrefix.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"deny.std-ace.ipv4-prefix", item.DenyPrefix.Value)
			}
			if !item.DenyPrefixMask.Null && !item.DenyPrefixMask.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"deny.std-ace.mask", item.DenyPrefixMask.Value)
			}
			if !item.DenyAny.Null && !item.DenyAny.Unknown {
				if item.DenyAny.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"deny.std-ace.any", map[string]string{})
				}
			}
			if !item.DenyHost.Null && !item.DenyHost.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"deny.std-ace.host", item.DenyHost.Value)
			}
			if !item.PermitPrefix.Null && !item.PermitPrefix.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"permit.std-ace.ipv4-prefix", item.PermitPrefix.Value)
			}
			if !item.PermitPrefixMask.Null && !item.PermitPrefixMask.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"permit.std-ace.mask", item.PermitPrefixMask.Value)
			}
			if !item.PermitAny.Null && !item.PermitAny.Unknown {
				if item.PermitAny.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"permit.std-ace.any", map[string]string{})
				}
			}
			if !item.PermitHost.Null && !item.PermitHost.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"permit.std-ace.host", item.PermitHost.Value)
			}
		}
	}
	return body
}

func (data *AccessListStandard) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "name"); value.Exists() {
		data.Name.Value = value.String()
	} else {
		data.Name.Null = true
	}
	for i := range data.Entries {
		keys := [...]string{"sequence"}
		keyValues := [...]string{strconv.FormatInt(data.Entries[i].Sequence.Value, 10)}

		var r gjson.Result
		res.Get(prefix + "access-list-seq-rule").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("sequence"); value.Exists() {
			data.Entries[i].Sequence.Value = value.Int()
		} else {
			data.Entries[i].Sequence.Null = true
		}
		if value := r.Get("remark"); value.Exists() {
			data.Entries[i].Remark.Value = value.String()
		} else {
			data.Entries[i].Remark.Null = true
		}
		if value := r.Get("deny.std-ace.ipv4-prefix"); value.Exists() {
			data.Entries[i].DenyPrefix.Value = value.String()
		} else {
			data.Entries[i].DenyPrefix.Null = true
		}
		if value := r.Get("deny.std-ace.mask"); value.Exists() {
			data.Entries[i].DenyPrefixMask.Value = value.String()
		} else {
			data.Entries[i].DenyPrefixMask.Null = true
		}
		if value := r.Get("deny.std-ace.any"); value.Exists() {
			data.Entries[i].DenyAny.Value = true
		} else {
			data.Entries[i].DenyAny.Value = false
		}
		if value := r.Get("deny.std-ace.host"); value.Exists() {
			data.Entries[i].DenyHost.Value = value.String()
		} else {
			data.Entries[i].DenyHost.Null = true
		}
		if value := r.Get("permit.std-ace.ipv4-prefix"); value.Exists() {
			data.Entries[i].PermitPrefix.Value = value.String()
		} else {
			data.Entries[i].PermitPrefix.Null = true
		}
		if value := r.Get("permit.std-ace.mask"); value.Exists() {
			data.Entries[i].PermitPrefixMask.Value = value.String()
		} else {
			data.Entries[i].PermitPrefixMask.Null = true
		}
		if value := r.Get("permit.std-ace.any"); value.Exists() {
			data.Entries[i].PermitAny.Value = true
		} else {
			data.Entries[i].PermitAny.Value = false
		}
		if value := r.Get("permit.std-ace.host"); value.Exists() {
			data.Entries[i].PermitHost.Value = value.String()
		} else {
			data.Entries[i].PermitHost.Null = true
		}
	}
}

func (data *AccessListStandard) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "access-list-seq-rule"); value.Exists() {
		data.Entries = make([]AccessListStandardEntries, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := AccessListStandardEntries{}
			if cValue := v.Get("sequence"); cValue.Exists() {
				item.Sequence.Value = cValue.Int()
				item.Sequence.Null = false
			}
			if cValue := v.Get("remark"); cValue.Exists() {
				item.Remark.Value = cValue.String()
				item.Remark.Null = false
			}
			if cValue := v.Get("deny.std-ace.ipv4-prefix"); cValue.Exists() {
				item.DenyPrefix.Value = cValue.String()
				item.DenyPrefix.Null = false
			}
			if cValue := v.Get("deny.std-ace.mask"); cValue.Exists() {
				item.DenyPrefixMask.Value = cValue.String()
				item.DenyPrefixMask.Null = false
			}
			if cValue := v.Get("deny.std-ace.any"); cValue.Exists() {
				item.DenyAny.Value = true
				item.DenyAny.Null = false
			}
			if cValue := v.Get("deny.std-ace.host"); cValue.Exists() {
				item.DenyHost.Value = cValue.String()
				item.DenyHost.Null = false
			}
			if cValue := v.Get("permit.std-ace.ipv4-prefix"); cValue.Exists() {
				item.PermitPrefix.Value = cValue.String()
				item.PermitPrefix.Null = false
			}
			if cValue := v.Get("permit.std-ace.mask"); cValue.Exists() {
				item.PermitPrefixMask.Value = cValue.String()
				item.PermitPrefixMask.Null = false
			}
			if cValue := v.Get("permit.std-ace.any"); cValue.Exists() {
				item.PermitAny.Value = true
				item.PermitAny.Null = false
			}
			if cValue := v.Get("permit.std-ace.host"); cValue.Exists() {
				item.PermitHost.Value = cValue.String()
				item.PermitHost.Null = false
			}
			data.Entries = append(data.Entries, item)
			return true
		})
	}
}

func (data *AccessListStandard) setUnknownValues(ctx context.Context) {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Name.Unknown {
		data.Name.Unknown = false
		data.Name.Null = true
	}
	for i := range data.Entries {
		if data.Entries[i].Sequence.Unknown {
			data.Entries[i].Sequence.Unknown = false
			data.Entries[i].Sequence.Null = true
		}
		if data.Entries[i].Remark.Unknown {
			data.Entries[i].Remark.Unknown = false
			data.Entries[i].Remark.Null = true
		}
		if data.Entries[i].DenyPrefix.Unknown {
			data.Entries[i].DenyPrefix.Unknown = false
			data.Entries[i].DenyPrefix.Null = true
		}
		if data.Entries[i].DenyPrefixMask.Unknown {
			data.Entries[i].DenyPrefixMask.Unknown = false
			data.Entries[i].DenyPrefixMask.Null = true
		}
		if data.Entries[i].DenyAny.Unknown {
			data.Entries[i].DenyAny.Unknown = false
			data.Entries[i].DenyAny.Null = true
		}
		if data.Entries[i].DenyHost.Unknown {
			data.Entries[i].DenyHost.Unknown = false
			data.Entries[i].DenyHost.Null = true
		}
		if data.Entries[i].PermitPrefix.Unknown {
			data.Entries[i].PermitPrefix.Unknown = false
			data.Entries[i].PermitPrefix.Null = true
		}
		if data.Entries[i].PermitPrefixMask.Unknown {
			data.Entries[i].PermitPrefixMask.Unknown = false
			data.Entries[i].PermitPrefixMask.Null = true
		}
		if data.Entries[i].PermitAny.Unknown {
			data.Entries[i].PermitAny.Unknown = false
			data.Entries[i].PermitAny.Null = true
		}
		if data.Entries[i].PermitHost.Unknown {
			data.Entries[i].PermitHost.Unknown = false
			data.Entries[i].PermitHost.Null = true
		}
	}
}

func (data *AccessListStandard) getDeletedListItems(ctx context.Context, state AccessListStandard) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Entries {
		stateKeyValues := [...]string{strconv.FormatInt(state.Entries[i].Sequence.Value, 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.Entries[i].Sequence.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Entries {
			found = true
			if state.Entries[i].Sequence.Value != data.Entries[j].Sequence.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/access-list-seq-rule=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *AccessListStandard) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	for i := range data.Entries {
		keyValues := [...]string{strconv.FormatInt(data.Entries[i].Sequence.Value, 10)}
		if !data.Entries[i].DenyAny.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/access-list-seq-rule=%v/deny-permit/deny/deny/std-ace/source-choice/any-case/any", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Entries[i].PermitAny.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/access-list-seq-rule=%v/deny-permit/permit/permit/std-ace/source-choice/any-case/any", data.getPath(), strings.Join(keyValues[:], ",")))
		}
	}
	return emptyLeafsDelete
}
