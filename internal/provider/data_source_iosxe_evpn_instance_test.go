// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceIosxeEVPNInstance(t *testing.T) {
	if os.Getenv("C9000V") == "" {
		t.Skip("skipping test, set environment variable C9000V")
	}
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxeEVPNInstanceConfig,
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_replication_type_ingress", "false"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_replication_type_static", "true"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_replication_type_p2mp", "false"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_replication_type_mp2mp", "false"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_encapsulation", "vxlan"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_auto_route_target", "false"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_rd", "10:10"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_route_target", "10:10"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_route_target_both", "10:10"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_route_target_import", "10:10"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_route_target_export", "10:10"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_ip_local_learning_disable", "false"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_ip_local_learning_enable", "true"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_default_gateway_advertise", "enable"),
					resource.TestCheckResourceAttr("data.iosxe_evpn_instance.test", "vlan_based_re_originate_route_type5", "true"),
				),
			},
		},
	})
}

const testAccDataSourceIosxeEVPNInstanceConfig = `

resource "iosxe_evpn_instance" "test" {
	delete_mode = "attributes"
	evpn_instance_num = 10
	vlan_based_replication_type_ingress = false
	vlan_based_replication_type_static = true
	vlan_based_replication_type_p2mp = false
	vlan_based_replication_type_mp2mp = false
	vlan_based_encapsulation = "vxlan"
	vlan_based_auto_route_target = false
	vlan_based_rd = "10:10"
	vlan_based_route_target = "10:10"
	vlan_based_route_target_both = "10:10"
	vlan_based_route_target_import = "10:10"
	vlan_based_route_target_export = "10:10"
	vlan_based_ip_local_learning_disable = false
	vlan_based_ip_local_learning_enable = true
	vlan_based_default_gateway_advertise = "enable"
	vlan_based_re_originate_route_type5 = true
}

data "iosxe_evpn_instance" "test" {
	evpn_instance_num = 10
	depends_on = [iosxe_evpn_instance.test]
}
`
