// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

type dataSourceStaticRouteType struct{}

func (t dataSourceStaticRouteType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Static Route configuration.",

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The path of the retrieved object.",
				Type:                types.StringType,
				Computed:            true,
			},
			"prefix": {
				MarkdownDescription: "",
				Type:                types.StringType,
				Required:            true,
			},
			"mask": {
				MarkdownDescription: "",
				Type:                types.StringType,
				Required:            true,
			},
			"next_hops": {
				MarkdownDescription: "",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"next_hop": {
						MarkdownDescription: "",
						Type:                types.StringType,
						Computed:            true,
					},
					"metric": {
						MarkdownDescription: "",
						Type:                types.Int64Type,
						Computed:            true,
					},
					"global": {
						MarkdownDescription: "Next hop address is global",
						Type:                types.BoolType,
						Computed:            true,
					},
					"name": {
						MarkdownDescription: "Specify name of the next hop",
						Type:                types.StringType,
						Computed:            true,
					},
					"permanent": {
						MarkdownDescription: "permanent route",
						Type:                types.BoolType,
						Computed:            true,
					},
					"tag": {
						MarkdownDescription: "Set tag for this route",
						Type:                types.Int64Type,
						Computed:            true,
					},
				}, tfsdk.ListNestedAttributesOptions{}),
			},
		},
	}, nil
}

func (t dataSourceStaticRouteType) NewDataSource(ctx context.Context, in tfsdk.Provider) (tfsdk.DataSource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return dataSourceStaticRoute{
		provider: provider,
	}, diags
}

type dataSourceStaticRoute struct {
	provider provider
}

func (d dataSourceStaticRoute) Read(ctx context.Context, req tfsdk.ReadDataSourceRequest, resp *tfsdk.ReadDataSourceResponse) {
	var config StaticRoute

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	res, err := d.provider.clients[config.Device.Value].GetData(config.getPath())
	if res.StatusCode == 404 {
		config = StaticRoute{Device: config.Device}
	} else {
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
			return
		}

		config.fromBody(res.Res)
	}

	config.Id = types.String{Value: config.getPath()}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
