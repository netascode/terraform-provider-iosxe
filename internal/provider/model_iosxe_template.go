// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type Template struct {
	Device                                             types.String                                 `tfsdk:"device"`
	Id                                                 types.String                                 `tfsdk:"id"`
	TemplateName                                       types.String                                 `tfsdk:"template_name"`
	Dot1xPae                                           types.String                                 `tfsdk:"dot1x_pae"`
	Dot1xMaxReauthReq                                  types.Int64                                  `tfsdk:"dot1x_max_reauth_req"`
	Dot1xMaxReq                                        types.Int64                                  `tfsdk:"dot1x_max_req"`
	ServicePolicyInput                                 types.String                                 `tfsdk:"service_policy_input"`
	ServicePolicyOutput                                types.String                                 `tfsdk:"service_policy_output"`
	SourceTemplate                                     types.String                                 `tfsdk:"source_template"`
	SwitchportModeTrunk                                types.Bool                                   `tfsdk:"switchport_mode_trunk"`
	SwitchportModeAccess                               types.Bool                                   `tfsdk:"switchport_mode_access"`
	SwitchportNonegotiate                              types.Bool                                   `tfsdk:"switchport_nonegotiate"`
	SwitchportBlockUnicast                             types.Bool                                   `tfsdk:"switchport_block_unicast"`
	SwitchportPortSecurity                             types.Bool                                   `tfsdk:"switchport_port_security"`
	SwitchportPortSecurityAgingStatic                  types.Bool                                   `tfsdk:"switchport_port_security_aging_static"`
	SwitchportPortSecurityAgingTime                    types.Int64                                  `tfsdk:"switchport_port_security_aging_time"`
	SwitchportPortSecurityAgingType                    types.Bool                                   `tfsdk:"switchport_port_security_aging_type"`
	SwitchportPortSecurityAgingTypeInactivity          types.Bool                                   `tfsdk:"switchport_port_security_aging_type_inactivity"`
	SwitchportPortSecurityMaximumRange                 []TemplateSwitchportPortSecurityMaximumRange `tfsdk:"switchport_port_security_maximum_range"`
	SwitchportPortSecurityViolationProtect             types.Bool                                   `tfsdk:"switchport_port_security_violation_protect"`
	SwitchportPortSecurityViolationRestrict            types.Bool                                   `tfsdk:"switchport_port_security_violation_restrict"`
	SwitchportPortSecurityViolationShutdown            types.Bool                                   `tfsdk:"switchport_port_security_violation_shutdown"`
	SwitchportAccessVlan                               types.Int64                                  `tfsdk:"switchport_access_vlan"`
	SwitchportVoiceVlan                                types.Int64                                  `tfsdk:"switchport_voice_vlan"`
	SwitchportPrivateVlanHostAssociationPrimaryRange   types.Int64                                  `tfsdk:"switchport_private_vlan_host_association_primary_range"`
	SwitchportPrivateVlanHostAssociationSecondaryRange types.Int64                                  `tfsdk:"switchport_private_vlan_host_association_secondary_range"`
	SwitchportTrunkAllowedVlans                        types.String                                 `tfsdk:"switchport_trunk_allowed_vlans"`
	SwitchportTrunkNativeVlanTag                       types.Bool                                   `tfsdk:"switchport_trunk_native_vlan_tag"`
	SwitchportTrunkNativeVlanVlanId                    types.Int64                                  `tfsdk:"switchport_trunk_native_vlan_vlan_id"`
	Mab                                                types.Bool                                   `tfsdk:"mab"`
	MabEap                                             types.Bool                                   `tfsdk:"mab_eap"`
	AccessSessionClosed                                types.Bool                                   `tfsdk:"access_session_closed"`
	AccessSessionMonitor                               types.Bool                                   `tfsdk:"access_session_monitor"`
	AccessSessionPortControl                           types.String                                 `tfsdk:"access_session_port_control"`
	AccessSessionControlDirection                      types.String                                 `tfsdk:"access_session_control_direction"`
	AccessSessionHostMode                              types.String                                 `tfsdk:"access_session_host_mode"`
	AccessSessionInterfaceTemplateSticky               types.Bool                                   `tfsdk:"access_session_interface_template_sticky"`
	AccessSessionInterfaceTemplateStickyTimer          types.Int64                                  `tfsdk:"access_session_interface_template_sticky_timer"`
	AuthenticationPeriodic                             types.Bool                                   `tfsdk:"authentication_periodic"`
	AuthenticationTimerReauthenticateServer            types.Bool                                   `tfsdk:"authentication_timer_reauthenticate_server"`
	AuthenticationTimerReauthenticateRange             types.Int64                                  `tfsdk:"authentication_timer_reauthenticate_range"`
	SpanningTreeBpduguardEnable                        types.Bool                                   `tfsdk:"spanning_tree_bpduguard_enable"`
	SpanningTreeServicePolicy                          types.Bool                                   `tfsdk:"spanning_tree_service_policy"`
	SpanningTreePortfast                               types.Bool                                   `tfsdk:"spanning_tree_portfast"`
	SpanningTreePortfastDisable                        types.Bool                                   `tfsdk:"spanning_tree_portfast_disable"`
	SpanningTreePortfastEdge                           types.Bool                                   `tfsdk:"spanning_tree_portfast_edge"`
	SpanningTreePortfastNetwork                        types.Bool                                   `tfsdk:"spanning_tree_portfast_network"`
	StormControlBroadcastLevelPpsThreshold             types.String                                 `tfsdk:"storm_control_broadcast_level_pps_threshold"`
	StormControlBroadcastLevelBpsThreshold             types.Float64                                `tfsdk:"storm_control_broadcast_level_bps_threshold"`
	StormControlBroadcastLevelThreshold                types.Float64                                `tfsdk:"storm_control_broadcast_level_threshold"`
	StormControlMulticastLevelPpsThreshold             types.String                                 `tfsdk:"storm_control_multicast_level_pps_threshold"`
	StormControlMulticastLevelBpsThreshold             types.Float64                                `tfsdk:"storm_control_multicast_level_bps_threshold"`
	StormControlMulticastLevelThreshold                types.Float64                                `tfsdk:"storm_control_multicast_level_threshold"`
	StormControlActionShutdown                         types.Bool                                   `tfsdk:"storm_control_action_shutdown"`
	StormControlActionTrap                             types.Bool                                   `tfsdk:"storm_control_action_trap"`
	LoadInterval                                       types.Int64                                  `tfsdk:"load_interval"`
	IpDhcpSnoopingLimitRate                            types.Int64                                  `tfsdk:"ip_dhcp_snooping_limit_rate"`
	IpDhcpSnoopingTrust                                types.Bool                                   `tfsdk:"ip_dhcp_snooping_trust"`
	IpAccessGroup                                      []TemplateIpAccessGroup                      `tfsdk:"ip_access_group"`
	SubscriberAgingInactivityTimerValue                types.Int64                                  `tfsdk:"subscriber_aging_inactivity_timer_value"`
	SubscriberAgingInactivityTimerProbe                types.Bool                                   `tfsdk:"subscriber_aging_inactivity_timer_probe"`
	SubscriberAgingProbe                               types.Bool                                   `tfsdk:"subscriber_aging_probe"`
	DeviceTracking                                     types.Bool                                   `tfsdk:"device_tracking"`
	DeviceTrackingAttachPolicy                         []TemplateDeviceTrackingAttachPolicy         `tfsdk:"device_tracking_attach_policy"`
	DeviceTrackingVlanRange                            types.String                                 `tfsdk:"device_tracking_vlan_range"`
	CtsManual                                          types.Bool                                   `tfsdk:"cts_manual"`
	CtsManualPolicyStaticSgt                           types.Int64                                  `tfsdk:"cts_manual_policy_static_sgt"`
	CtsManualPolicyStaticTrusted                       types.Bool                                   `tfsdk:"cts_manual_policy_static_trusted"`
	CtsManualPropagateSgt                              types.Bool                                   `tfsdk:"cts_manual_propagate_sgt"`
	CtsRoleBasedEnforcement                            types.Bool                                   `tfsdk:"cts_role_based_enforcement"`
}
type TemplateSwitchportPortSecurityMaximumRange struct {
	Range      types.Int64 `tfsdk:"range"`
	Vlan       types.Bool  `tfsdk:"vlan"`
	VlanAccess types.Bool  `tfsdk:"vlan_access"`
}
type TemplateIpAccessGroup struct {
	Direction  types.String `tfsdk:"direction"`
	AccessList types.String `tfsdk:"access_list"`
}
type TemplateDeviceTrackingAttachPolicy struct {
	PolicyName types.String `tfsdk:"policy_name"`
	VlanRange  types.String `tfsdk:"vlan_range"`
}

func (data Template) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/template/Cisco-IOS-XE-template:template_details=%v", url.QueryEscape(fmt.Sprintf("%v", data.TemplateName.Value)))
}

// if last path element has a key -> remove it
func (data Template) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data Template) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.TemplateName.Null && !data.TemplateName.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"template_name", data.TemplateName.Value)
	}
	if !data.Dot1xPae.Null && !data.Dot1xPae.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"dot1x.pae", data.Dot1xPae.Value)
	}
	if !data.Dot1xMaxReauthReq.Null && !data.Dot1xMaxReauthReq.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"dot1x.max-reauth-req", strconv.FormatInt(data.Dot1xMaxReauthReq.Value, 10))
	}
	if !data.Dot1xMaxReq.Null && !data.Dot1xMaxReq.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"dot1x.max-req", strconv.FormatInt(data.Dot1xMaxReq.Value, 10))
	}
	if !data.ServicePolicyInput.Null && !data.ServicePolicyInput.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"service-policy.input.policy-map-name", data.ServicePolicyInput.Value)
	}
	if !data.ServicePolicyOutput.Null && !data.ServicePolicyOutput.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"service-policy.output.policy-map-name", data.ServicePolicyOutput.Value)
	}
	if !data.SourceTemplate.Null && !data.SourceTemplate.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"source.template", data.SourceTemplate.Value)
	}
	if !data.SwitchportModeTrunk.Null && !data.SwitchportModeTrunk.Unknown {
		if data.SwitchportModeTrunk.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.mode.trunk", map[string]string{})
		}
	}
	if !data.SwitchportModeAccess.Null && !data.SwitchportModeAccess.Unknown {
		if data.SwitchportModeAccess.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.mode.access", map[string]string{})
		}
	}
	if !data.SwitchportNonegotiate.Null && !data.SwitchportNonegotiate.Unknown {
		if data.SwitchportNonegotiate.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.nonegotiate", map[string]string{})
		}
	}
	if !data.SwitchportBlockUnicast.Null && !data.SwitchportBlockUnicast.Unknown {
		if data.SwitchportBlockUnicast.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.block.unicast", map[string]string{})
		}
	}
	if !data.SwitchportPortSecurity.Null && !data.SwitchportPortSecurity.Unknown {
		if data.SwitchportPortSecurity.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.port-security", map[string]string{})
		}
	}
	if !data.SwitchportPortSecurityAgingStatic.Null && !data.SwitchportPortSecurityAgingStatic.Unknown {
		if data.SwitchportPortSecurityAgingStatic.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.port-security.aging.static", map[string]string{})
		}
	}
	if !data.SwitchportPortSecurityAgingTime.Null && !data.SwitchportPortSecurityAgingTime.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.port-security.aging.time", strconv.FormatInt(data.SwitchportPortSecurityAgingTime.Value, 10))
	}
	if !data.SwitchportPortSecurityAgingType.Null && !data.SwitchportPortSecurityAgingType.Unknown {
		if data.SwitchportPortSecurityAgingType.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.port-security.aging.type", map[string]string{})
		}
	}
	if !data.SwitchportPortSecurityAgingTypeInactivity.Null && !data.SwitchportPortSecurityAgingTypeInactivity.Unknown {
		if data.SwitchportPortSecurityAgingTypeInactivity.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.port-security.aging.type.inactivity", map[string]string{})
		}
	}
	if !data.SwitchportPortSecurityViolationProtect.Null && !data.SwitchportPortSecurityViolationProtect.Unknown {
		if data.SwitchportPortSecurityViolationProtect.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.port-security.violation.protect", map[string]string{})
		}
	}
	if !data.SwitchportPortSecurityViolationRestrict.Null && !data.SwitchportPortSecurityViolationRestrict.Unknown {
		if data.SwitchportPortSecurityViolationRestrict.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.port-security.violation.restrict", map[string]string{})
		}
	}
	if !data.SwitchportPortSecurityViolationShutdown.Null && !data.SwitchportPortSecurityViolationShutdown.Unknown {
		if data.SwitchportPortSecurityViolationShutdown.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.port-security.violation.shutdown", map[string]string{})
		}
	}
	if !data.SwitchportAccessVlan.Null && !data.SwitchportAccessVlan.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.access.vlan", strconv.FormatInt(data.SwitchportAccessVlan.Value, 10))
	}
	if !data.SwitchportVoiceVlan.Null && !data.SwitchportVoiceVlan.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.voice.vlan", strconv.FormatInt(data.SwitchportVoiceVlan.Value, 10))
	}
	if !data.SwitchportPrivateVlanHostAssociationPrimaryRange.Null && !data.SwitchportPrivateVlanHostAssociationPrimaryRange.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.private-vlan.host-association.primary-range", strconv.FormatInt(data.SwitchportPrivateVlanHostAssociationPrimaryRange.Value, 10))
	}
	if !data.SwitchportPrivateVlanHostAssociationSecondaryRange.Null && !data.SwitchportPrivateVlanHostAssociationSecondaryRange.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.private-vlan.host-association.secondary-range", strconv.FormatInt(data.SwitchportPrivateVlanHostAssociationSecondaryRange.Value, 10))
	}
	if !data.SwitchportTrunkAllowedVlans.Null && !data.SwitchportTrunkAllowedVlans.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.trunk.allowed.vlan.vlans", data.SwitchportTrunkAllowedVlans.Value)
	}
	if !data.SwitchportTrunkNativeVlanTag.Null && !data.SwitchportTrunkNativeVlanTag.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.trunk.native.vlan.tag", data.SwitchportTrunkNativeVlanTag.Value)
	}
	if !data.SwitchportTrunkNativeVlanVlanId.Null && !data.SwitchportTrunkNativeVlanVlanId.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.trunk.native.vlan.vlan-id", strconv.FormatInt(data.SwitchportTrunkNativeVlanVlanId.Value, 10))
	}
	if !data.Mab.Null && !data.Mab.Unknown {
		if data.Mab.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"mab", map[string]string{})
		}
	}
	if !data.MabEap.Null && !data.MabEap.Unknown {
		if data.MabEap.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"mab.eap", map[string]string{})
		}
	}
	if !data.AccessSessionClosed.Null && !data.AccessSessionClosed.Unknown {
		if data.AccessSessionClosed.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-session.closed", map[string]string{})
		}
	}
	if !data.AccessSessionMonitor.Null && !data.AccessSessionMonitor.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-session.monitor", data.AccessSessionMonitor.Value)
	}
	if !data.AccessSessionPortControl.Null && !data.AccessSessionPortControl.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-session.port-control", data.AccessSessionPortControl.Value)
	}
	if !data.AccessSessionControlDirection.Null && !data.AccessSessionControlDirection.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-session.control-direction", data.AccessSessionControlDirection.Value)
	}
	if !data.AccessSessionHostMode.Null && !data.AccessSessionHostMode.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-session.host-mode", data.AccessSessionHostMode.Value)
	}
	if !data.AccessSessionInterfaceTemplateSticky.Null && !data.AccessSessionInterfaceTemplateSticky.Unknown {
		if data.AccessSessionInterfaceTemplateSticky.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-session.interface-template.sticky", map[string]string{})
		}
	}
	if !data.AccessSessionInterfaceTemplateStickyTimer.Null && !data.AccessSessionInterfaceTemplateStickyTimer.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-session.interface-template.sticky.timer", strconv.FormatInt(data.AccessSessionInterfaceTemplateStickyTimer.Value, 10))
	}
	if !data.AuthenticationPeriodic.Null && !data.AuthenticationPeriodic.Unknown {
		if data.AuthenticationPeriodic.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"authentication.periodic", map[string]string{})
		}
	}
	if !data.AuthenticationTimerReauthenticateServer.Null && !data.AuthenticationTimerReauthenticateServer.Unknown {
		if data.AuthenticationTimerReauthenticateServer.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"authentication.timer.reauthenticate.server", map[string]string{})
		}
	}
	if !data.AuthenticationTimerReauthenticateRange.Null && !data.AuthenticationTimerReauthenticateRange.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"authentication.timer.reauthenticate.range", strconv.FormatInt(data.AuthenticationTimerReauthenticateRange.Value, 10))
	}
	if !data.SpanningTreeBpduguardEnable.Null && !data.SpanningTreeBpduguardEnable.Unknown {
		if data.SpanningTreeBpduguardEnable.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"spanning-tree.bpduguard.enable", map[string]string{})
		}
	}
	if !data.SpanningTreeServicePolicy.Null && !data.SpanningTreeServicePolicy.Unknown {
		if data.SpanningTreeServicePolicy.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"spanning-tree.service-policy", map[string]string{})
		}
	}
	if !data.SpanningTreePortfast.Null && !data.SpanningTreePortfast.Unknown {
		if data.SpanningTreePortfast.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"spanning-tree.portfast", map[string]string{})
		}
	}
	if !data.SpanningTreePortfastDisable.Null && !data.SpanningTreePortfastDisable.Unknown {
		if data.SpanningTreePortfastDisable.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"spanning-tree.portfast.disable", map[string]string{})
		}
	}
	if !data.SpanningTreePortfastEdge.Null && !data.SpanningTreePortfastEdge.Unknown {
		if data.SpanningTreePortfastEdge.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"spanning-tree.portfast.edge", map[string]string{})
		}
	}
	if !data.SpanningTreePortfastNetwork.Null && !data.SpanningTreePortfastNetwork.Unknown {
		if data.SpanningTreePortfastNetwork.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"spanning-tree.portfast.network", map[string]string{})
		}
	}
	if !data.StormControlBroadcastLevelPpsThreshold.Null && !data.StormControlBroadcastLevelPpsThreshold.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"storm-control.broadcast.level.pps.threshold", data.StormControlBroadcastLevelPpsThreshold.Value)
	}
	if !data.StormControlBroadcastLevelBpsThreshold.Null && !data.StormControlBroadcastLevelBpsThreshold.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"storm-control.broadcast.level.bps.threshold", strconv.FormatFloat(data.StormControlBroadcastLevelBpsThreshold.Value, 'f', 1, 64))
	}
	if !data.StormControlBroadcastLevelThreshold.Null && !data.StormControlBroadcastLevelThreshold.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"storm-control.broadcast.level.threshold", strconv.FormatFloat(data.StormControlBroadcastLevelThreshold.Value, 'f', 1, 64))
	}
	if !data.StormControlMulticastLevelPpsThreshold.Null && !data.StormControlMulticastLevelPpsThreshold.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"storm-control.multicast.level.pps.threshold", data.StormControlMulticastLevelPpsThreshold.Value)
	}
	if !data.StormControlMulticastLevelBpsThreshold.Null && !data.StormControlMulticastLevelBpsThreshold.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"storm-control.multicast.level.bps.threshold", strconv.FormatFloat(data.StormControlMulticastLevelBpsThreshold.Value, 'f', 1, 64))
	}
	if !data.StormControlMulticastLevelThreshold.Null && !data.StormControlMulticastLevelThreshold.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"storm-control.multicast.level.threshold", strconv.FormatFloat(data.StormControlMulticastLevelThreshold.Value, 'f', 1, 64))
	}
	if !data.StormControlActionShutdown.Null && !data.StormControlActionShutdown.Unknown {
		if data.StormControlActionShutdown.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"storm-control.action.shutdown", map[string]string{})
		}
	}
	if !data.StormControlActionTrap.Null && !data.StormControlActionTrap.Unknown {
		if data.StormControlActionTrap.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"storm-control.action.trap", map[string]string{})
		}
	}
	if !data.LoadInterval.Null && !data.LoadInterval.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"load-interval", strconv.FormatInt(data.LoadInterval.Value, 10))
	}
	if !data.IpDhcpSnoopingLimitRate.Null && !data.IpDhcpSnoopingLimitRate.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.dhcp.snooping.limit.rate", strconv.FormatInt(data.IpDhcpSnoopingLimitRate.Value, 10))
	}
	if !data.IpDhcpSnoopingTrust.Null && !data.IpDhcpSnoopingTrust.Unknown {
		if data.IpDhcpSnoopingTrust.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.dhcp.snooping.trust", map[string]string{})
		}
	}
	if !data.SubscriberAgingInactivityTimerValue.Null && !data.SubscriberAgingInactivityTimerValue.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"subscriber.aging.inactivity-timer.value", strconv.FormatInt(data.SubscriberAgingInactivityTimerValue.Value, 10))
	}
	if !data.SubscriberAgingInactivityTimerProbe.Null && !data.SubscriberAgingInactivityTimerProbe.Unknown {
		if data.SubscriberAgingInactivityTimerProbe.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"subscriber.aging.inactivity-timer.probe", map[string]string{})
		}
	}
	if !data.SubscriberAgingProbe.Null && !data.SubscriberAgingProbe.Unknown {
		if data.SubscriberAgingProbe.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"subscriber.aging.probe", map[string]string{})
		}
	}
	if !data.DeviceTracking.Null && !data.DeviceTracking.Unknown {
		if data.DeviceTracking.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"device-tracking", map[string]string{})
		}
	}
	if !data.DeviceTrackingVlanRange.Null && !data.DeviceTrackingVlanRange.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"device-tracking.vlan.vlan-range", data.DeviceTrackingVlanRange.Value)
	}
	if !data.CtsManual.Null && !data.CtsManual.Unknown {
		if data.CtsManual.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"cts.manual", map[string]string{})
		}
	}
	if !data.CtsManualPolicyStaticSgt.Null && !data.CtsManualPolicyStaticSgt.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"cts.manual.policy.static.sgt", strconv.FormatInt(data.CtsManualPolicyStaticSgt.Value, 10))
	}
	if !data.CtsManualPolicyStaticTrusted.Null && !data.CtsManualPolicyStaticTrusted.Unknown {
		if data.CtsManualPolicyStaticTrusted.Value {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"cts.manual.policy.static.trusted", map[string]string{})
		}
	}
	if !data.CtsManualPropagateSgt.Null && !data.CtsManualPropagateSgt.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"cts.manual.propagate.sgt", data.CtsManualPropagateSgt.Value)
	}
	if !data.CtsRoleBasedEnforcement.Null && !data.CtsRoleBasedEnforcement.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"cts.role-based.enforcement", data.CtsRoleBasedEnforcement.Value)
	}
	if len(data.SwitchportPortSecurityMaximumRange) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.port-security.maximum.range", []interface{}{})
		for index, item := range data.SwitchportPortSecurityMaximumRange {
			if !item.Range.Null && !item.Range.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.port-security.maximum.range"+"."+strconv.Itoa(index)+"."+"range", strconv.FormatInt(item.Range.Value, 10))
			}
			if !item.Vlan.Null && !item.Vlan.Unknown {
				if item.Vlan.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.port-security.maximum.range"+"."+strconv.Itoa(index)+"."+"vlan", map[string]string{})
				}
			}
			if !item.VlanAccess.Null && !item.VlanAccess.Unknown {
				if item.VlanAccess.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"switchport.port-security.maximum.range"+"."+strconv.Itoa(index)+"."+"vlan.access", map[string]string{})
				}
			}
		}
	}
	if len(data.IpAccessGroup) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.access-group", []interface{}{})
		for index, item := range data.IpAccessGroup {
			if !item.Direction.Null && !item.Direction.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.access-group"+"."+strconv.Itoa(index)+"."+"direction", item.Direction.Value)
			}
			if !item.AccessList.Null && !item.AccessList.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.access-group"+"."+strconv.Itoa(index)+"."+"access-list", item.AccessList.Value)
			}
		}
	}
	if len(data.DeviceTrackingAttachPolicy) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"device-tracking.attach-policy.policy-name", []interface{}{})
		for index, item := range data.DeviceTrackingAttachPolicy {
			if !item.PolicyName.Null && !item.PolicyName.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"device-tracking.attach-policy.policy-name"+"."+strconv.Itoa(index)+"."+"policy-name", item.PolicyName.Value)
			}
			if !item.VlanRange.Null && !item.VlanRange.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"device-tracking.attach-policy.policy-name"+"."+strconv.Itoa(index)+"."+"vlan.vlan-range", item.VlanRange.Value)
			}
		}
	}
	return body
}

func (data *Template) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "template_name"); value.Exists() {
		data.TemplateName.Value = value.String()
	} else {
		data.TemplateName.Null = true
	}
	if value := res.Get(prefix + "dot1x.pae"); value.Exists() {
		data.Dot1xPae.Value = value.String()
	} else {
		data.Dot1xPae.Null = true
	}
	if value := res.Get(prefix + "dot1x.max-reauth-req"); value.Exists() {
		data.Dot1xMaxReauthReq.Value = value.Int()
	} else {
		data.Dot1xMaxReauthReq.Null = true
	}
	if value := res.Get(prefix + "dot1x.max-req"); value.Exists() {
		data.Dot1xMaxReq.Value = value.Int()
	} else {
		data.Dot1xMaxReq.Null = true
	}
	if value := res.Get(prefix + "service-policy.input.policy-map-name"); value.Exists() {
		data.ServicePolicyInput.Value = value.String()
	} else {
		data.ServicePolicyInput.Null = true
	}
	if value := res.Get(prefix + "service-policy.output.policy-map-name"); value.Exists() {
		data.ServicePolicyOutput.Value = value.String()
	} else {
		data.ServicePolicyOutput.Null = true
	}
	if value := res.Get(prefix + "source.template"); value.Exists() {
		data.SourceTemplate.Value = value.String()
	} else {
		data.SourceTemplate.Null = true
	}
	if value := res.Get(prefix + "switchport.mode.trunk"); value.Exists() {
		data.SwitchportModeTrunk.Value = true
	} else {
		data.SwitchportModeTrunk.Value = false
	}
	if value := res.Get(prefix + "switchport.mode.access"); value.Exists() {
		data.SwitchportModeAccess.Value = true
	} else {
		data.SwitchportModeAccess.Value = false
	}
	if value := res.Get(prefix + "switchport.nonegotiate"); value.Exists() {
		data.SwitchportNonegotiate.Value = true
	} else {
		data.SwitchportNonegotiate.Value = false
	}
	if value := res.Get(prefix + "switchport.block.unicast"); value.Exists() {
		data.SwitchportBlockUnicast.Value = true
	} else {
		data.SwitchportBlockUnicast.Value = false
	}
	if value := res.Get(prefix + "switchport.port-security"); value.Exists() {
		data.SwitchportPortSecurity.Value = true
	} else {
		data.SwitchportPortSecurity.Value = false
	}
	if value := res.Get(prefix + "switchport.port-security.aging.static"); value.Exists() {
		data.SwitchportPortSecurityAgingStatic.Value = true
	} else {
		data.SwitchportPortSecurityAgingStatic.Value = false
	}
	if value := res.Get(prefix + "switchport.port-security.aging.time"); value.Exists() {
		data.SwitchportPortSecurityAgingTime.Value = value.Int()
	} else {
		data.SwitchportPortSecurityAgingTime.Null = true
	}
	if value := res.Get(prefix + "switchport.port-security.aging.type"); value.Exists() {
		data.SwitchportPortSecurityAgingType.Value = true
	} else {
		data.SwitchportPortSecurityAgingType.Value = false
	}
	if value := res.Get(prefix + "switchport.port-security.aging.type.inactivity"); value.Exists() {
		data.SwitchportPortSecurityAgingTypeInactivity.Value = true
	} else {
		data.SwitchportPortSecurityAgingTypeInactivity.Value = false
	}
	for i := range data.SwitchportPortSecurityMaximumRange {
		keys := [...]string{"range"}
		keyValues := [...]string{strconv.FormatInt(data.SwitchportPortSecurityMaximumRange[i].Range.Value, 10)}

		var r gjson.Result
		res.Get(prefix + "switchport.port-security.maximum.range").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("range"); value.Exists() {
			data.SwitchportPortSecurityMaximumRange[i].Range.Value = value.Int()
		} else {
			data.SwitchportPortSecurityMaximumRange[i].Range.Null = true
		}
		if value := r.Get("vlan"); value.Exists() {
			data.SwitchportPortSecurityMaximumRange[i].Vlan.Value = true
		} else {
			data.SwitchportPortSecurityMaximumRange[i].Vlan.Value = false
		}
		if value := r.Get("vlan.access"); value.Exists() {
			data.SwitchportPortSecurityMaximumRange[i].VlanAccess.Value = true
		} else {
			data.SwitchportPortSecurityMaximumRange[i].VlanAccess.Value = false
		}
	}
	if value := res.Get(prefix + "switchport.port-security.violation.protect"); value.Exists() {
		data.SwitchportPortSecurityViolationProtect.Value = true
	} else {
		data.SwitchportPortSecurityViolationProtect.Value = false
	}
	if value := res.Get(prefix + "switchport.port-security.violation.restrict"); value.Exists() {
		data.SwitchportPortSecurityViolationRestrict.Value = true
	} else {
		data.SwitchportPortSecurityViolationRestrict.Value = false
	}
	if value := res.Get(prefix + "switchport.port-security.violation.shutdown"); value.Exists() {
		data.SwitchportPortSecurityViolationShutdown.Value = true
	} else {
		data.SwitchportPortSecurityViolationShutdown.Value = false
	}
	if value := res.Get(prefix + "switchport.access.vlan"); value.Exists() {
		data.SwitchportAccessVlan.Value = value.Int()
	} else {
		data.SwitchportAccessVlan.Null = true
	}
	if value := res.Get(prefix + "switchport.voice.vlan"); value.Exists() {
		data.SwitchportVoiceVlan.Value = value.Int()
	} else {
		data.SwitchportVoiceVlan.Null = true
	}
	if value := res.Get(prefix + "switchport.private-vlan.host-association.primary-range"); value.Exists() {
		data.SwitchportPrivateVlanHostAssociationPrimaryRange.Value = value.Int()
	} else {
		data.SwitchportPrivateVlanHostAssociationPrimaryRange.Null = true
	}
	if value := res.Get(prefix + "switchport.private-vlan.host-association.secondary-range"); value.Exists() {
		data.SwitchportPrivateVlanHostAssociationSecondaryRange.Value = value.Int()
	} else {
		data.SwitchportPrivateVlanHostAssociationSecondaryRange.Null = true
	}
	if value := res.Get(prefix + "switchport.trunk.allowed.vlan.vlans"); value.Exists() {
		data.SwitchportTrunkAllowedVlans.Value = value.String()
	} else {
		data.SwitchportTrunkAllowedVlans.Null = true
	}
	if value := res.Get(prefix + "switchport.trunk.native.vlan.tag"); value.Exists() {
		data.SwitchportTrunkNativeVlanTag.Value = value.Bool()
	} else {
		data.SwitchportTrunkNativeVlanTag.Value = false
	}
	if value := res.Get(prefix + "switchport.trunk.native.vlan.vlan-id"); value.Exists() {
		data.SwitchportTrunkNativeVlanVlanId.Value = value.Int()
	} else {
		data.SwitchportTrunkNativeVlanVlanId.Null = true
	}
	if value := res.Get(prefix + "mab"); value.Exists() {
		data.Mab.Value = true
	} else {
		data.Mab.Value = false
	}
	if value := res.Get(prefix + "mab.eap"); value.Exists() {
		data.MabEap.Value = true
	} else {
		data.MabEap.Value = false
	}
	if value := res.Get(prefix + "access-session.closed"); value.Exists() {
		data.AccessSessionClosed.Value = true
	} else {
		data.AccessSessionClosed.Value = false
	}
	if value := res.Get(prefix + "access-session.monitor"); value.Exists() {
		data.AccessSessionMonitor.Value = value.Bool()
	} else {
		data.AccessSessionMonitor.Value = false
	}
	if value := res.Get(prefix + "access-session.port-control"); value.Exists() {
		data.AccessSessionPortControl.Value = value.String()
	} else {
		data.AccessSessionPortControl.Null = true
	}
	if value := res.Get(prefix + "access-session.control-direction"); value.Exists() {
		data.AccessSessionControlDirection.Value = value.String()
	} else {
		data.AccessSessionControlDirection.Null = true
	}
	if value := res.Get(prefix + "access-session.host-mode"); value.Exists() {
		data.AccessSessionHostMode.Value = value.String()
	} else {
		data.AccessSessionHostMode.Null = true
	}
	if value := res.Get(prefix + "access-session.interface-template.sticky"); value.Exists() {
		data.AccessSessionInterfaceTemplateSticky.Value = true
	} else {
		data.AccessSessionInterfaceTemplateSticky.Value = false
	}
	if value := res.Get(prefix + "access-session.interface-template.sticky.timer"); value.Exists() {
		data.AccessSessionInterfaceTemplateStickyTimer.Value = value.Int()
	} else {
		data.AccessSessionInterfaceTemplateStickyTimer.Null = true
	}
	if value := res.Get(prefix + "authentication.periodic"); value.Exists() {
		data.AuthenticationPeriodic.Value = true
	} else {
		data.AuthenticationPeriodic.Value = false
	}
	if value := res.Get(prefix + "authentication.timer.reauthenticate.server"); value.Exists() {
		data.AuthenticationTimerReauthenticateServer.Value = true
	} else {
		data.AuthenticationTimerReauthenticateServer.Value = false
	}
	if value := res.Get(prefix + "authentication.timer.reauthenticate.range"); value.Exists() {
		data.AuthenticationTimerReauthenticateRange.Value = value.Int()
	} else {
		data.AuthenticationTimerReauthenticateRange.Null = true
	}
	if value := res.Get(prefix + "spanning-tree.bpduguard.enable"); value.Exists() {
		data.SpanningTreeBpduguardEnable.Value = true
	} else {
		data.SpanningTreeBpduguardEnable.Value = false
	}
	if value := res.Get(prefix + "spanning-tree.service-policy"); value.Exists() {
		data.SpanningTreeServicePolicy.Value = true
	} else {
		data.SpanningTreeServicePolicy.Value = false
	}
	if value := res.Get(prefix + "spanning-tree.portfast"); value.Exists() {
		data.SpanningTreePortfast.Value = true
	} else {
		data.SpanningTreePortfast.Value = false
	}
	if value := res.Get(prefix + "spanning-tree.portfast.disable"); value.Exists() {
		data.SpanningTreePortfastDisable.Value = true
	} else {
		data.SpanningTreePortfastDisable.Value = false
	}
	if value := res.Get(prefix + "spanning-tree.portfast.edge"); value.Exists() {
		data.SpanningTreePortfastEdge.Value = true
	} else {
		data.SpanningTreePortfastEdge.Value = false
	}
	if value := res.Get(prefix + "spanning-tree.portfast.network"); value.Exists() {
		data.SpanningTreePortfastNetwork.Value = true
	} else {
		data.SpanningTreePortfastNetwork.Value = false
	}
	if value := res.Get(prefix + "storm-control.broadcast.level.pps.threshold"); value.Exists() {
		data.StormControlBroadcastLevelPpsThreshold.Value = value.String()
	} else {
		data.StormControlBroadcastLevelPpsThreshold.Null = true
	}
	if value := res.Get(prefix + "storm-control.broadcast.level.bps.threshold"); value.Exists() {
		data.StormControlBroadcastLevelBpsThreshold.Value = value.Float()
	} else {
		data.StormControlBroadcastLevelBpsThreshold.Null = true
	}
	if value := res.Get(prefix + "storm-control.broadcast.level.threshold"); value.Exists() {
		data.StormControlBroadcastLevelThreshold.Value = value.Float()
	} else {
		data.StormControlBroadcastLevelThreshold.Null = true
	}
	if value := res.Get(prefix + "storm-control.multicast.level.pps.threshold"); value.Exists() {
		data.StormControlMulticastLevelPpsThreshold.Value = value.String()
	} else {
		data.StormControlMulticastLevelPpsThreshold.Null = true
	}
	if value := res.Get(prefix + "storm-control.multicast.level.bps.threshold"); value.Exists() {
		data.StormControlMulticastLevelBpsThreshold.Value = value.Float()
	} else {
		data.StormControlMulticastLevelBpsThreshold.Null = true
	}
	if value := res.Get(prefix + "storm-control.multicast.level.threshold"); value.Exists() {
		data.StormControlMulticastLevelThreshold.Value = value.Float()
	} else {
		data.StormControlMulticastLevelThreshold.Null = true
	}
	if value := res.Get(prefix + "storm-control.action.shutdown"); value.Exists() {
		data.StormControlActionShutdown.Value = true
	} else {
		data.StormControlActionShutdown.Value = false
	}
	if value := res.Get(prefix + "storm-control.action.trap"); value.Exists() {
		data.StormControlActionTrap.Value = true
	} else {
		data.StormControlActionTrap.Value = false
	}
	if value := res.Get(prefix + "load-interval"); value.Exists() {
		data.LoadInterval.Value = value.Int()
	} else {
		data.LoadInterval.Null = true
	}
	if value := res.Get(prefix + "ip.dhcp.snooping.limit.rate"); value.Exists() {
		data.IpDhcpSnoopingLimitRate.Value = value.Int()
	} else {
		data.IpDhcpSnoopingLimitRate.Null = true
	}
	if value := res.Get(prefix + "ip.dhcp.snooping.trust"); value.Exists() {
		data.IpDhcpSnoopingTrust.Value = true
	} else {
		data.IpDhcpSnoopingTrust.Value = false
	}
	for i := range data.IpAccessGroup {
		keys := [...]string{"direction"}
		keyValues := [...]string{data.IpAccessGroup[i].Direction.Value}

		var r gjson.Result
		res.Get(prefix + "ip.access-group").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("direction"); value.Exists() {
			data.IpAccessGroup[i].Direction.Value = value.String()
		} else {
			data.IpAccessGroup[i].Direction.Null = true
		}
		if value := r.Get("access-list"); value.Exists() {
			data.IpAccessGroup[i].AccessList.Value = value.String()
		} else {
			data.IpAccessGroup[i].AccessList.Null = true
		}
	}
	if value := res.Get(prefix + "subscriber.aging.inactivity-timer.value"); value.Exists() {
		data.SubscriberAgingInactivityTimerValue.Value = value.Int()
	} else {
		data.SubscriberAgingInactivityTimerValue.Null = true
	}
	if value := res.Get(prefix + "subscriber.aging.inactivity-timer.probe"); value.Exists() {
		data.SubscriberAgingInactivityTimerProbe.Value = true
	} else {
		data.SubscriberAgingInactivityTimerProbe.Value = false
	}
	if value := res.Get(prefix + "subscriber.aging.probe"); value.Exists() {
		data.SubscriberAgingProbe.Value = true
	} else {
		data.SubscriberAgingProbe.Value = false
	}
	if value := res.Get(prefix + "device-tracking"); value.Exists() {
		data.DeviceTracking.Value = true
	} else {
		data.DeviceTracking.Value = false
	}
	for i := range data.DeviceTrackingAttachPolicy {
		keys := [...]string{"policy-name"}
		keyValues := [...]string{data.DeviceTrackingAttachPolicy[i].PolicyName.Value}

		var r gjson.Result
		res.Get(prefix + "device-tracking.attach-policy.policy-name").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("policy-name"); value.Exists() {
			data.DeviceTrackingAttachPolicy[i].PolicyName.Value = value.String()
		} else {
			data.DeviceTrackingAttachPolicy[i].PolicyName.Null = true
		}
		if value := r.Get("vlan.vlan-range"); value.Exists() {
			data.DeviceTrackingAttachPolicy[i].VlanRange.Value = value.String()
		} else {
			data.DeviceTrackingAttachPolicy[i].VlanRange.Null = true
		}
	}
	if value := res.Get(prefix + "device-tracking.vlan.vlan-range"); value.Exists() {
		data.DeviceTrackingVlanRange.Value = value.String()
	} else {
		data.DeviceTrackingVlanRange.Null = true
	}
	if value := res.Get(prefix + "cts.manual"); value.Exists() {
		data.CtsManual.Value = true
	} else {
		data.CtsManual.Value = false
	}
	if value := res.Get(prefix + "cts.manual.policy.static.sgt"); value.Exists() {
		data.CtsManualPolicyStaticSgt.Value = value.Int()
	} else {
		data.CtsManualPolicyStaticSgt.Null = true
	}
	if value := res.Get(prefix + "cts.manual.policy.static.trusted"); value.Exists() {
		data.CtsManualPolicyStaticTrusted.Value = true
	} else {
		data.CtsManualPolicyStaticTrusted.Value = false
	}
	if value := res.Get(prefix + "cts.manual.propagate.sgt"); value.Exists() {
		data.CtsManualPropagateSgt.Value = value.Bool()
	} else {
		data.CtsManualPropagateSgt.Value = false
	}
	if value := res.Get(prefix + "cts.role-based.enforcement"); value.Exists() {
		data.CtsRoleBasedEnforcement.Value = value.Bool()
	} else {
		data.CtsRoleBasedEnforcement.Value = false
	}
}

func (data *Template) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "dot1x.pae"); value.Exists() {
		data.Dot1xPae.Value = value.String()
		data.Dot1xPae.Null = false
	}
	if value := res.Get(prefix + "dot1x.max-reauth-req"); value.Exists() {
		data.Dot1xMaxReauthReq.Value = value.Int()
		data.Dot1xMaxReauthReq.Null = false
	}
	if value := res.Get(prefix + "dot1x.max-req"); value.Exists() {
		data.Dot1xMaxReq.Value = value.Int()
		data.Dot1xMaxReq.Null = false
	}
	if value := res.Get(prefix + "service-policy.input.policy-map-name"); value.Exists() {
		data.ServicePolicyInput.Value = value.String()
		data.ServicePolicyInput.Null = false
	}
	if value := res.Get(prefix + "service-policy.output.policy-map-name"); value.Exists() {
		data.ServicePolicyOutput.Value = value.String()
		data.ServicePolicyOutput.Null = false
	}
	if value := res.Get(prefix + "source.template"); value.Exists() {
		data.SourceTemplate.Value = value.String()
		data.SourceTemplate.Null = false
	}
	if value := res.Get(prefix + "switchport.mode.trunk"); value.Exists() {
		data.SwitchportModeTrunk.Value = true
		data.SwitchportModeTrunk.Null = false
	} else {
		data.SwitchportModeTrunk.Value = false
		data.SwitchportModeTrunk.Null = false
	}
	if value := res.Get(prefix + "switchport.mode.access"); value.Exists() {
		data.SwitchportModeAccess.Value = true
		data.SwitchportModeAccess.Null = false
	} else {
		data.SwitchportModeAccess.Value = false
		data.SwitchportModeAccess.Null = false
	}
	if value := res.Get(prefix + "switchport.nonegotiate"); value.Exists() {
		data.SwitchportNonegotiate.Value = true
		data.SwitchportNonegotiate.Null = false
	} else {
		data.SwitchportNonegotiate.Value = false
		data.SwitchportNonegotiate.Null = false
	}
	if value := res.Get(prefix + "switchport.block.unicast"); value.Exists() {
		data.SwitchportBlockUnicast.Value = true
		data.SwitchportBlockUnicast.Null = false
	} else {
		data.SwitchportBlockUnicast.Value = false
		data.SwitchportBlockUnicast.Null = false
	}
	if value := res.Get(prefix + "switchport.port-security"); value.Exists() {
		data.SwitchportPortSecurity.Value = true
		data.SwitchportPortSecurity.Null = false
	} else {
		data.SwitchportPortSecurity.Value = false
		data.SwitchportPortSecurity.Null = false
	}
	if value := res.Get(prefix + "switchport.port-security.aging.static"); value.Exists() {
		data.SwitchportPortSecurityAgingStatic.Value = true
		data.SwitchportPortSecurityAgingStatic.Null = false
	} else {
		data.SwitchportPortSecurityAgingStatic.Value = false
		data.SwitchportPortSecurityAgingStatic.Null = false
	}
	if value := res.Get(prefix + "switchport.port-security.aging.time"); value.Exists() {
		data.SwitchportPortSecurityAgingTime.Value = value.Int()
		data.SwitchportPortSecurityAgingTime.Null = false
	}
	if value := res.Get(prefix + "switchport.port-security.aging.type"); value.Exists() {
		data.SwitchportPortSecurityAgingType.Value = true
		data.SwitchportPortSecurityAgingType.Null = false
	} else {
		data.SwitchportPortSecurityAgingType.Value = false
		data.SwitchportPortSecurityAgingType.Null = false
	}
	if value := res.Get(prefix + "switchport.port-security.aging.type.inactivity"); value.Exists() {
		data.SwitchportPortSecurityAgingTypeInactivity.Value = true
		data.SwitchportPortSecurityAgingTypeInactivity.Null = false
	} else {
		data.SwitchportPortSecurityAgingTypeInactivity.Value = false
		data.SwitchportPortSecurityAgingTypeInactivity.Null = false
	}
	if value := res.Get(prefix + "switchport.port-security.maximum.range"); value.Exists() {
		data.SwitchportPortSecurityMaximumRange = make([]TemplateSwitchportPortSecurityMaximumRange, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := TemplateSwitchportPortSecurityMaximumRange{}
			if cValue := v.Get("range"); cValue.Exists() {
				item.Range.Value = cValue.Int()
				item.Range.Null = false
			}
			if cValue := v.Get("vlan"); cValue.Exists() {
				item.Vlan.Value = true
				item.Vlan.Null = false
			}
			if cValue := v.Get("vlan.access"); cValue.Exists() {
				item.VlanAccess.Value = true
				item.VlanAccess.Null = false
			}
			data.SwitchportPortSecurityMaximumRange = append(data.SwitchportPortSecurityMaximumRange, item)
			return true
		})
	}
	if value := res.Get(prefix + "switchport.port-security.violation.protect"); value.Exists() {
		data.SwitchportPortSecurityViolationProtect.Value = true
		data.SwitchportPortSecurityViolationProtect.Null = false
	} else {
		data.SwitchportPortSecurityViolationProtect.Value = false
		data.SwitchportPortSecurityViolationProtect.Null = false
	}
	if value := res.Get(prefix + "switchport.port-security.violation.restrict"); value.Exists() {
		data.SwitchportPortSecurityViolationRestrict.Value = true
		data.SwitchportPortSecurityViolationRestrict.Null = false
	} else {
		data.SwitchportPortSecurityViolationRestrict.Value = false
		data.SwitchportPortSecurityViolationRestrict.Null = false
	}
	if value := res.Get(prefix + "switchport.port-security.violation.shutdown"); value.Exists() {
		data.SwitchportPortSecurityViolationShutdown.Value = true
		data.SwitchportPortSecurityViolationShutdown.Null = false
	} else {
		data.SwitchportPortSecurityViolationShutdown.Value = false
		data.SwitchportPortSecurityViolationShutdown.Null = false
	}
	if value := res.Get(prefix + "switchport.access.vlan"); value.Exists() {
		data.SwitchportAccessVlan.Value = value.Int()
		data.SwitchportAccessVlan.Null = false
	}
	if value := res.Get(prefix + "switchport.voice.vlan"); value.Exists() {
		data.SwitchportVoiceVlan.Value = value.Int()
		data.SwitchportVoiceVlan.Null = false
	}
	if value := res.Get(prefix + "switchport.private-vlan.host-association.primary-range"); value.Exists() {
		data.SwitchportPrivateVlanHostAssociationPrimaryRange.Value = value.Int()
		data.SwitchportPrivateVlanHostAssociationPrimaryRange.Null = false
	}
	if value := res.Get(prefix + "switchport.private-vlan.host-association.secondary-range"); value.Exists() {
		data.SwitchportPrivateVlanHostAssociationSecondaryRange.Value = value.Int()
		data.SwitchportPrivateVlanHostAssociationSecondaryRange.Null = false
	}
	if value := res.Get(prefix + "switchport.trunk.allowed.vlan.vlans"); value.Exists() {
		data.SwitchportTrunkAllowedVlans.Value = value.String()
		data.SwitchportTrunkAllowedVlans.Null = false
	}
	if value := res.Get(prefix + "switchport.trunk.native.vlan.tag"); value.Exists() {
		data.SwitchportTrunkNativeVlanTag.Value = value.Bool()
		data.SwitchportTrunkNativeVlanTag.Null = false
	} else {
		data.SwitchportTrunkNativeVlanTag.Value = false
		data.SwitchportTrunkNativeVlanTag.Null = false
	}
	if value := res.Get(prefix + "switchport.trunk.native.vlan.vlan-id"); value.Exists() {
		data.SwitchportTrunkNativeVlanVlanId.Value = value.Int()
		data.SwitchportTrunkNativeVlanVlanId.Null = false
	}
	if value := res.Get(prefix + "mab"); value.Exists() {
		data.Mab.Value = true
		data.Mab.Null = false
	} else {
		data.Mab.Value = false
		data.Mab.Null = false
	}
	if value := res.Get(prefix + "mab.eap"); value.Exists() {
		data.MabEap.Value = true
		data.MabEap.Null = false
	} else {
		data.MabEap.Value = false
		data.MabEap.Null = false
	}
	if value := res.Get(prefix + "access-session.closed"); value.Exists() {
		data.AccessSessionClosed.Value = true
		data.AccessSessionClosed.Null = false
	} else {
		data.AccessSessionClosed.Value = false
		data.AccessSessionClosed.Null = false
	}
	if value := res.Get(prefix + "access-session.monitor"); value.Exists() {
		data.AccessSessionMonitor.Value = value.Bool()
		data.AccessSessionMonitor.Null = false
	} else {
		data.AccessSessionMonitor.Value = false
		data.AccessSessionMonitor.Null = false
	}
	if value := res.Get(prefix + "access-session.port-control"); value.Exists() {
		data.AccessSessionPortControl.Value = value.String()
		data.AccessSessionPortControl.Null = false
	}
	if value := res.Get(prefix + "access-session.control-direction"); value.Exists() {
		data.AccessSessionControlDirection.Value = value.String()
		data.AccessSessionControlDirection.Null = false
	}
	if value := res.Get(prefix + "access-session.host-mode"); value.Exists() {
		data.AccessSessionHostMode.Value = value.String()
		data.AccessSessionHostMode.Null = false
	}
	if value := res.Get(prefix + "access-session.interface-template.sticky"); value.Exists() {
		data.AccessSessionInterfaceTemplateSticky.Value = true
		data.AccessSessionInterfaceTemplateSticky.Null = false
	} else {
		data.AccessSessionInterfaceTemplateSticky.Value = false
		data.AccessSessionInterfaceTemplateSticky.Null = false
	}
	if value := res.Get(prefix + "access-session.interface-template.sticky.timer"); value.Exists() {
		data.AccessSessionInterfaceTemplateStickyTimer.Value = value.Int()
		data.AccessSessionInterfaceTemplateStickyTimer.Null = false
	}
	if value := res.Get(prefix + "authentication.periodic"); value.Exists() {
		data.AuthenticationPeriodic.Value = true
		data.AuthenticationPeriodic.Null = false
	} else {
		data.AuthenticationPeriodic.Value = false
		data.AuthenticationPeriodic.Null = false
	}
	if value := res.Get(prefix + "authentication.timer.reauthenticate.server"); value.Exists() {
		data.AuthenticationTimerReauthenticateServer.Value = true
		data.AuthenticationTimerReauthenticateServer.Null = false
	} else {
		data.AuthenticationTimerReauthenticateServer.Value = false
		data.AuthenticationTimerReauthenticateServer.Null = false
	}
	if value := res.Get(prefix + "authentication.timer.reauthenticate.range"); value.Exists() {
		data.AuthenticationTimerReauthenticateRange.Value = value.Int()
		data.AuthenticationTimerReauthenticateRange.Null = false
	}
	if value := res.Get(prefix + "spanning-tree.bpduguard.enable"); value.Exists() {
		data.SpanningTreeBpduguardEnable.Value = true
		data.SpanningTreeBpduguardEnable.Null = false
	} else {
		data.SpanningTreeBpduguardEnable.Value = false
		data.SpanningTreeBpduguardEnable.Null = false
	}
	if value := res.Get(prefix + "spanning-tree.service-policy"); value.Exists() {
		data.SpanningTreeServicePolicy.Value = true
		data.SpanningTreeServicePolicy.Null = false
	} else {
		data.SpanningTreeServicePolicy.Value = false
		data.SpanningTreeServicePolicy.Null = false
	}
	if value := res.Get(prefix + "spanning-tree.portfast"); value.Exists() {
		data.SpanningTreePortfast.Value = true
		data.SpanningTreePortfast.Null = false
	} else {
		data.SpanningTreePortfast.Value = false
		data.SpanningTreePortfast.Null = false
	}
	if value := res.Get(prefix + "spanning-tree.portfast.disable"); value.Exists() {
		data.SpanningTreePortfastDisable.Value = true
		data.SpanningTreePortfastDisable.Null = false
	} else {
		data.SpanningTreePortfastDisable.Value = false
		data.SpanningTreePortfastDisable.Null = false
	}
	if value := res.Get(prefix + "spanning-tree.portfast.edge"); value.Exists() {
		data.SpanningTreePortfastEdge.Value = true
		data.SpanningTreePortfastEdge.Null = false
	} else {
		data.SpanningTreePortfastEdge.Value = false
		data.SpanningTreePortfastEdge.Null = false
	}
	if value := res.Get(prefix + "spanning-tree.portfast.network"); value.Exists() {
		data.SpanningTreePortfastNetwork.Value = true
		data.SpanningTreePortfastNetwork.Null = false
	} else {
		data.SpanningTreePortfastNetwork.Value = false
		data.SpanningTreePortfastNetwork.Null = false
	}
	if value := res.Get(prefix + "storm-control.broadcast.level.pps.threshold"); value.Exists() {
		data.StormControlBroadcastLevelPpsThreshold.Value = value.String()
		data.StormControlBroadcastLevelPpsThreshold.Null = false
	}
	if value := res.Get(prefix + "storm-control.broadcast.level.bps.threshold"); value.Exists() {
		data.StormControlBroadcastLevelBpsThreshold.Value = value.Float()
		data.StormControlBroadcastLevelBpsThreshold.Null = false
	}
	if value := res.Get(prefix + "storm-control.broadcast.level.threshold"); value.Exists() {
		data.StormControlBroadcastLevelThreshold.Value = value.Float()
		data.StormControlBroadcastLevelThreshold.Null = false
	}
	if value := res.Get(prefix + "storm-control.multicast.level.pps.threshold"); value.Exists() {
		data.StormControlMulticastLevelPpsThreshold.Value = value.String()
		data.StormControlMulticastLevelPpsThreshold.Null = false
	}
	if value := res.Get(prefix + "storm-control.multicast.level.bps.threshold"); value.Exists() {
		data.StormControlMulticastLevelBpsThreshold.Value = value.Float()
		data.StormControlMulticastLevelBpsThreshold.Null = false
	}
	if value := res.Get(prefix + "storm-control.multicast.level.threshold"); value.Exists() {
		data.StormControlMulticastLevelThreshold.Value = value.Float()
		data.StormControlMulticastLevelThreshold.Null = false
	}
	if value := res.Get(prefix + "storm-control.action.shutdown"); value.Exists() {
		data.StormControlActionShutdown.Value = true
		data.StormControlActionShutdown.Null = false
	} else {
		data.StormControlActionShutdown.Value = false
		data.StormControlActionShutdown.Null = false
	}
	if value := res.Get(prefix + "storm-control.action.trap"); value.Exists() {
		data.StormControlActionTrap.Value = true
		data.StormControlActionTrap.Null = false
	} else {
		data.StormControlActionTrap.Value = false
		data.StormControlActionTrap.Null = false
	}
	if value := res.Get(prefix + "load-interval"); value.Exists() {
		data.LoadInterval.Value = value.Int()
		data.LoadInterval.Null = false
	}
	if value := res.Get(prefix + "ip.dhcp.snooping.limit.rate"); value.Exists() {
		data.IpDhcpSnoopingLimitRate.Value = value.Int()
		data.IpDhcpSnoopingLimitRate.Null = false
	}
	if value := res.Get(prefix + "ip.dhcp.snooping.trust"); value.Exists() {
		data.IpDhcpSnoopingTrust.Value = true
		data.IpDhcpSnoopingTrust.Null = false
	} else {
		data.IpDhcpSnoopingTrust.Value = false
		data.IpDhcpSnoopingTrust.Null = false
	}
	if value := res.Get(prefix + "ip.access-group"); value.Exists() {
		data.IpAccessGroup = make([]TemplateIpAccessGroup, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := TemplateIpAccessGroup{}
			if cValue := v.Get("direction"); cValue.Exists() {
				item.Direction.Value = cValue.String()
				item.Direction.Null = false
			}
			if cValue := v.Get("access-list"); cValue.Exists() {
				item.AccessList.Value = cValue.String()
				item.AccessList.Null = false
			}
			data.IpAccessGroup = append(data.IpAccessGroup, item)
			return true
		})
	}
	if value := res.Get(prefix + "subscriber.aging.inactivity-timer.value"); value.Exists() {
		data.SubscriberAgingInactivityTimerValue.Value = value.Int()
		data.SubscriberAgingInactivityTimerValue.Null = false
	}
	if value := res.Get(prefix + "subscriber.aging.inactivity-timer.probe"); value.Exists() {
		data.SubscriberAgingInactivityTimerProbe.Value = true
		data.SubscriberAgingInactivityTimerProbe.Null = false
	} else {
		data.SubscriberAgingInactivityTimerProbe.Value = false
		data.SubscriberAgingInactivityTimerProbe.Null = false
	}
	if value := res.Get(prefix + "subscriber.aging.probe"); value.Exists() {
		data.SubscriberAgingProbe.Value = true
		data.SubscriberAgingProbe.Null = false
	} else {
		data.SubscriberAgingProbe.Value = false
		data.SubscriberAgingProbe.Null = false
	}
	if value := res.Get(prefix + "device-tracking"); value.Exists() {
		data.DeviceTracking.Value = true
		data.DeviceTracking.Null = false
	} else {
		data.DeviceTracking.Value = false
		data.DeviceTracking.Null = false
	}
	if value := res.Get(prefix + "device-tracking.attach-policy.policy-name"); value.Exists() {
		data.DeviceTrackingAttachPolicy = make([]TemplateDeviceTrackingAttachPolicy, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := TemplateDeviceTrackingAttachPolicy{}
			if cValue := v.Get("policy-name"); cValue.Exists() {
				item.PolicyName.Value = cValue.String()
				item.PolicyName.Null = false
			}
			if cValue := v.Get("vlan.vlan-range"); cValue.Exists() {
				item.VlanRange.Value = cValue.String()
				item.VlanRange.Null = false
			}
			data.DeviceTrackingAttachPolicy = append(data.DeviceTrackingAttachPolicy, item)
			return true
		})
	}
	if value := res.Get(prefix + "device-tracking.vlan.vlan-range"); value.Exists() {
		data.DeviceTrackingVlanRange.Value = value.String()
		data.DeviceTrackingVlanRange.Null = false
	}
	if value := res.Get(prefix + "cts.manual"); value.Exists() {
		data.CtsManual.Value = true
		data.CtsManual.Null = false
	} else {
		data.CtsManual.Value = false
		data.CtsManual.Null = false
	}
	if value := res.Get(prefix + "cts.manual.policy.static.sgt"); value.Exists() {
		data.CtsManualPolicyStaticSgt.Value = value.Int()
		data.CtsManualPolicyStaticSgt.Null = false
	}
	if value := res.Get(prefix + "cts.manual.policy.static.trusted"); value.Exists() {
		data.CtsManualPolicyStaticTrusted.Value = true
		data.CtsManualPolicyStaticTrusted.Null = false
	} else {
		data.CtsManualPolicyStaticTrusted.Value = false
		data.CtsManualPolicyStaticTrusted.Null = false
	}
	if value := res.Get(prefix + "cts.manual.propagate.sgt"); value.Exists() {
		data.CtsManualPropagateSgt.Value = value.Bool()
		data.CtsManualPropagateSgt.Null = false
	} else {
		data.CtsManualPropagateSgt.Value = false
		data.CtsManualPropagateSgt.Null = false
	}
	if value := res.Get(prefix + "cts.role-based.enforcement"); value.Exists() {
		data.CtsRoleBasedEnforcement.Value = value.Bool()
		data.CtsRoleBasedEnforcement.Null = false
	} else {
		data.CtsRoleBasedEnforcement.Value = false
		data.CtsRoleBasedEnforcement.Null = false
	}
}

func (data *Template) setUnknownValues(ctx context.Context) {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.TemplateName.Unknown {
		data.TemplateName.Unknown = false
		data.TemplateName.Null = true
	}
	if data.Dot1xPae.Unknown {
		data.Dot1xPae.Unknown = false
		data.Dot1xPae.Null = true
	}
	if data.Dot1xMaxReauthReq.Unknown {
		data.Dot1xMaxReauthReq.Unknown = false
		data.Dot1xMaxReauthReq.Null = true
	}
	if data.Dot1xMaxReq.Unknown {
		data.Dot1xMaxReq.Unknown = false
		data.Dot1xMaxReq.Null = true
	}
	if data.ServicePolicyInput.Unknown {
		data.ServicePolicyInput.Unknown = false
		data.ServicePolicyInput.Null = true
	}
	if data.ServicePolicyOutput.Unknown {
		data.ServicePolicyOutput.Unknown = false
		data.ServicePolicyOutput.Null = true
	}
	if data.SourceTemplate.Unknown {
		data.SourceTemplate.Unknown = false
		data.SourceTemplate.Null = true
	}
	if data.SwitchportModeTrunk.Unknown {
		data.SwitchportModeTrunk.Unknown = false
		data.SwitchportModeTrunk.Null = true
	}
	if data.SwitchportModeAccess.Unknown {
		data.SwitchportModeAccess.Unknown = false
		data.SwitchportModeAccess.Null = true
	}
	if data.SwitchportNonegotiate.Unknown {
		data.SwitchportNonegotiate.Unknown = false
		data.SwitchportNonegotiate.Null = true
	}
	if data.SwitchportBlockUnicast.Unknown {
		data.SwitchportBlockUnicast.Unknown = false
		data.SwitchportBlockUnicast.Null = true
	}
	if data.SwitchportPortSecurity.Unknown {
		data.SwitchportPortSecurity.Unknown = false
		data.SwitchportPortSecurity.Null = true
	}
	if data.SwitchportPortSecurityAgingStatic.Unknown {
		data.SwitchportPortSecurityAgingStatic.Unknown = false
		data.SwitchportPortSecurityAgingStatic.Null = true
	}
	if data.SwitchportPortSecurityAgingTime.Unknown {
		data.SwitchportPortSecurityAgingTime.Unknown = false
		data.SwitchportPortSecurityAgingTime.Null = true
	}
	if data.SwitchportPortSecurityAgingType.Unknown {
		data.SwitchportPortSecurityAgingType.Unknown = false
		data.SwitchportPortSecurityAgingType.Null = true
	}
	if data.SwitchportPortSecurityAgingTypeInactivity.Unknown {
		data.SwitchportPortSecurityAgingTypeInactivity.Unknown = false
		data.SwitchportPortSecurityAgingTypeInactivity.Null = true
	}
	for i := range data.SwitchportPortSecurityMaximumRange {
		if data.SwitchportPortSecurityMaximumRange[i].Range.Unknown {
			data.SwitchportPortSecurityMaximumRange[i].Range.Unknown = false
			data.SwitchportPortSecurityMaximumRange[i].Range.Null = true
		}
		if data.SwitchportPortSecurityMaximumRange[i].Vlan.Unknown {
			data.SwitchportPortSecurityMaximumRange[i].Vlan.Unknown = false
			data.SwitchportPortSecurityMaximumRange[i].Vlan.Null = true
		}
		if data.SwitchportPortSecurityMaximumRange[i].VlanAccess.Unknown {
			data.SwitchportPortSecurityMaximumRange[i].VlanAccess.Unknown = false
			data.SwitchportPortSecurityMaximumRange[i].VlanAccess.Null = true
		}
	}
	if data.SwitchportPortSecurityViolationProtect.Unknown {
		data.SwitchportPortSecurityViolationProtect.Unknown = false
		data.SwitchportPortSecurityViolationProtect.Null = true
	}
	if data.SwitchportPortSecurityViolationRestrict.Unknown {
		data.SwitchportPortSecurityViolationRestrict.Unknown = false
		data.SwitchportPortSecurityViolationRestrict.Null = true
	}
	if data.SwitchportPortSecurityViolationShutdown.Unknown {
		data.SwitchportPortSecurityViolationShutdown.Unknown = false
		data.SwitchportPortSecurityViolationShutdown.Null = true
	}
	if data.SwitchportAccessVlan.Unknown {
		data.SwitchportAccessVlan.Unknown = false
		data.SwitchportAccessVlan.Null = true
	}
	if data.SwitchportVoiceVlan.Unknown {
		data.SwitchportVoiceVlan.Unknown = false
		data.SwitchportVoiceVlan.Null = true
	}
	if data.SwitchportPrivateVlanHostAssociationPrimaryRange.Unknown {
		data.SwitchportPrivateVlanHostAssociationPrimaryRange.Unknown = false
		data.SwitchportPrivateVlanHostAssociationPrimaryRange.Null = true
	}
	if data.SwitchportPrivateVlanHostAssociationSecondaryRange.Unknown {
		data.SwitchportPrivateVlanHostAssociationSecondaryRange.Unknown = false
		data.SwitchportPrivateVlanHostAssociationSecondaryRange.Null = true
	}
	if data.SwitchportTrunkAllowedVlans.Unknown {
		data.SwitchportTrunkAllowedVlans.Unknown = false
		data.SwitchportTrunkAllowedVlans.Null = true
	}
	if data.SwitchportTrunkNativeVlanTag.Unknown {
		data.SwitchportTrunkNativeVlanTag.Unknown = false
		data.SwitchportTrunkNativeVlanTag.Null = true
	}
	if data.SwitchportTrunkNativeVlanVlanId.Unknown {
		data.SwitchportTrunkNativeVlanVlanId.Unknown = false
		data.SwitchportTrunkNativeVlanVlanId.Null = true
	}
	if data.Mab.Unknown {
		data.Mab.Unknown = false
		data.Mab.Null = true
	}
	if data.MabEap.Unknown {
		data.MabEap.Unknown = false
		data.MabEap.Null = true
	}
	if data.AccessSessionClosed.Unknown {
		data.AccessSessionClosed.Unknown = false
		data.AccessSessionClosed.Null = true
	}
	if data.AccessSessionMonitor.Unknown {
		data.AccessSessionMonitor.Unknown = false
		data.AccessSessionMonitor.Null = true
	}
	if data.AccessSessionPortControl.Unknown {
		data.AccessSessionPortControl.Unknown = false
		data.AccessSessionPortControl.Null = true
	}
	if data.AccessSessionControlDirection.Unknown {
		data.AccessSessionControlDirection.Unknown = false
		data.AccessSessionControlDirection.Null = true
	}
	if data.AccessSessionHostMode.Unknown {
		data.AccessSessionHostMode.Unknown = false
		data.AccessSessionHostMode.Null = true
	}
	if data.AccessSessionInterfaceTemplateSticky.Unknown {
		data.AccessSessionInterfaceTemplateSticky.Unknown = false
		data.AccessSessionInterfaceTemplateSticky.Null = true
	}
	if data.AccessSessionInterfaceTemplateStickyTimer.Unknown {
		data.AccessSessionInterfaceTemplateStickyTimer.Unknown = false
		data.AccessSessionInterfaceTemplateStickyTimer.Null = true
	}
	if data.AuthenticationPeriodic.Unknown {
		data.AuthenticationPeriodic.Unknown = false
		data.AuthenticationPeriodic.Null = true
	}
	if data.AuthenticationTimerReauthenticateServer.Unknown {
		data.AuthenticationTimerReauthenticateServer.Unknown = false
		data.AuthenticationTimerReauthenticateServer.Null = true
	}
	if data.AuthenticationTimerReauthenticateRange.Unknown {
		data.AuthenticationTimerReauthenticateRange.Unknown = false
		data.AuthenticationTimerReauthenticateRange.Null = true
	}
	if data.SpanningTreeBpduguardEnable.Unknown {
		data.SpanningTreeBpduguardEnable.Unknown = false
		data.SpanningTreeBpduguardEnable.Null = true
	}
	if data.SpanningTreeServicePolicy.Unknown {
		data.SpanningTreeServicePolicy.Unknown = false
		data.SpanningTreeServicePolicy.Null = true
	}
	if data.SpanningTreePortfast.Unknown {
		data.SpanningTreePortfast.Unknown = false
		data.SpanningTreePortfast.Null = true
	}
	if data.SpanningTreePortfastDisable.Unknown {
		data.SpanningTreePortfastDisable.Unknown = false
		data.SpanningTreePortfastDisable.Null = true
	}
	if data.SpanningTreePortfastEdge.Unknown {
		data.SpanningTreePortfastEdge.Unknown = false
		data.SpanningTreePortfastEdge.Null = true
	}
	if data.SpanningTreePortfastNetwork.Unknown {
		data.SpanningTreePortfastNetwork.Unknown = false
		data.SpanningTreePortfastNetwork.Null = true
	}
	if data.StormControlBroadcastLevelPpsThreshold.Unknown {
		data.StormControlBroadcastLevelPpsThreshold.Unknown = false
		data.StormControlBroadcastLevelPpsThreshold.Null = true
	}
	if data.StormControlBroadcastLevelBpsThreshold.Unknown {
		data.StormControlBroadcastLevelBpsThreshold.Unknown = false
		data.StormControlBroadcastLevelBpsThreshold.Null = true
	}
	if data.StormControlBroadcastLevelThreshold.Unknown {
		data.StormControlBroadcastLevelThreshold.Unknown = false
		data.StormControlBroadcastLevelThreshold.Null = true
	}
	if data.StormControlMulticastLevelPpsThreshold.Unknown {
		data.StormControlMulticastLevelPpsThreshold.Unknown = false
		data.StormControlMulticastLevelPpsThreshold.Null = true
	}
	if data.StormControlMulticastLevelBpsThreshold.Unknown {
		data.StormControlMulticastLevelBpsThreshold.Unknown = false
		data.StormControlMulticastLevelBpsThreshold.Null = true
	}
	if data.StormControlMulticastLevelThreshold.Unknown {
		data.StormControlMulticastLevelThreshold.Unknown = false
		data.StormControlMulticastLevelThreshold.Null = true
	}
	if data.StormControlActionShutdown.Unknown {
		data.StormControlActionShutdown.Unknown = false
		data.StormControlActionShutdown.Null = true
	}
	if data.StormControlActionTrap.Unknown {
		data.StormControlActionTrap.Unknown = false
		data.StormControlActionTrap.Null = true
	}
	if data.LoadInterval.Unknown {
		data.LoadInterval.Unknown = false
		data.LoadInterval.Null = true
	}
	if data.IpDhcpSnoopingLimitRate.Unknown {
		data.IpDhcpSnoopingLimitRate.Unknown = false
		data.IpDhcpSnoopingLimitRate.Null = true
	}
	if data.IpDhcpSnoopingTrust.Unknown {
		data.IpDhcpSnoopingTrust.Unknown = false
		data.IpDhcpSnoopingTrust.Null = true
	}
	for i := range data.IpAccessGroup {
		if data.IpAccessGroup[i].Direction.Unknown {
			data.IpAccessGroup[i].Direction.Unknown = false
			data.IpAccessGroup[i].Direction.Null = true
		}
		if data.IpAccessGroup[i].AccessList.Unknown {
			data.IpAccessGroup[i].AccessList.Unknown = false
			data.IpAccessGroup[i].AccessList.Null = true
		}
	}
	if data.SubscriberAgingInactivityTimerValue.Unknown {
		data.SubscriberAgingInactivityTimerValue.Unknown = false
		data.SubscriberAgingInactivityTimerValue.Null = true
	}
	if data.SubscriberAgingInactivityTimerProbe.Unknown {
		data.SubscriberAgingInactivityTimerProbe.Unknown = false
		data.SubscriberAgingInactivityTimerProbe.Null = true
	}
	if data.SubscriberAgingProbe.Unknown {
		data.SubscriberAgingProbe.Unknown = false
		data.SubscriberAgingProbe.Null = true
	}
	if data.DeviceTracking.Unknown {
		data.DeviceTracking.Unknown = false
		data.DeviceTracking.Null = true
	}
	for i := range data.DeviceTrackingAttachPolicy {
		if data.DeviceTrackingAttachPolicy[i].PolicyName.Unknown {
			data.DeviceTrackingAttachPolicy[i].PolicyName.Unknown = false
			data.DeviceTrackingAttachPolicy[i].PolicyName.Null = true
		}
		if data.DeviceTrackingAttachPolicy[i].VlanRange.Unknown {
			data.DeviceTrackingAttachPolicy[i].VlanRange.Unknown = false
			data.DeviceTrackingAttachPolicy[i].VlanRange.Null = true
		}
	}
	if data.DeviceTrackingVlanRange.Unknown {
		data.DeviceTrackingVlanRange.Unknown = false
		data.DeviceTrackingVlanRange.Null = true
	}
	if data.CtsManual.Unknown {
		data.CtsManual.Unknown = false
		data.CtsManual.Null = true
	}
	if data.CtsManualPolicyStaticSgt.Unknown {
		data.CtsManualPolicyStaticSgt.Unknown = false
		data.CtsManualPolicyStaticSgt.Null = true
	}
	if data.CtsManualPolicyStaticTrusted.Unknown {
		data.CtsManualPolicyStaticTrusted.Unknown = false
		data.CtsManualPolicyStaticTrusted.Null = true
	}
	if data.CtsManualPropagateSgt.Unknown {
		data.CtsManualPropagateSgt.Unknown = false
		data.CtsManualPropagateSgt.Null = true
	}
	if data.CtsRoleBasedEnforcement.Unknown {
		data.CtsRoleBasedEnforcement.Unknown = false
		data.CtsRoleBasedEnforcement.Null = true
	}
}

func (data *Template) getDeletedListItems(ctx context.Context, state Template) []string {
	deletedListItems := make([]string, 0)
	for i := range state.SwitchportPortSecurityMaximumRange {
		stateKeyValues := [...]string{strconv.FormatInt(state.SwitchportPortSecurityMaximumRange[i].Range.Value, 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.SwitchportPortSecurityMaximumRange[i].Range.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.SwitchportPortSecurityMaximumRange {
			found = true
			if state.SwitchportPortSecurityMaximumRange[i].Range.Value != data.SwitchportPortSecurityMaximumRange[j].Range.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/switchport/port-security/maximum/range=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.IpAccessGroup {
		stateKeyValues := [...]string{state.IpAccessGroup[i].Direction.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.IpAccessGroup[i].Direction.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.IpAccessGroup {
			found = true
			if state.IpAccessGroup[i].Direction.Value != data.IpAccessGroup[j].Direction.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/ip/access-group=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.DeviceTrackingAttachPolicy {
		stateKeyValues := [...]string{state.DeviceTrackingAttachPolicy[i].PolicyName.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.DeviceTrackingAttachPolicy[i].PolicyName.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.DeviceTrackingAttachPolicy {
			found = true
			if state.DeviceTrackingAttachPolicy[i].PolicyName.Value != data.DeviceTrackingAttachPolicy[j].PolicyName.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/device-tracking/attach-policy/policy-name=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *Template) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.SwitchportModeTrunk.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/switchport/mode/trunk", data.getPath()))
	}
	if !data.SwitchportModeAccess.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/switchport/mode/access", data.getPath()))
	}
	if !data.SwitchportNonegotiate.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/switchport/nonegotiate", data.getPath()))
	}
	if !data.SwitchportBlockUnicast.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/switchport/block/unicast", data.getPath()))
	}
	if !data.SwitchportPortSecurityAgingStatic.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/switchport/port-security/aging/static", data.getPath()))
	}
	if !data.SwitchportPortSecurityAgingTypeInactivity.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/switchport/port-security/aging/type/inactivity", data.getPath()))
	}

	for i := range data.SwitchportPortSecurityMaximumRange {
		keyValues := [...]string{strconv.FormatInt(data.SwitchportPortSecurityMaximumRange[i].Range.Value, 10)}
		if !data.SwitchportPortSecurityMaximumRange[i].VlanAccess.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/switchport/port-security/maximum/range=%v/vlan/access", data.getPath(), strings.Join(keyValues[:], ",")))
		}
	}
	if !data.SwitchportPortSecurityViolationProtect.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/switchport/port-security/violation/protect", data.getPath()))
	}
	if !data.SwitchportPortSecurityViolationRestrict.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/switchport/port-security/violation/restrict", data.getPath()))
	}
	if !data.SwitchportPortSecurityViolationShutdown.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/switchport/port-security/violation/shutdown", data.getPath()))
	}
	if !data.MabEap.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/mab/eap", data.getPath()))
	}
	if !data.AccessSessionClosed.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/access-session/closed", data.getPath()))
	}
	if !data.AuthenticationPeriodic.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/authentication/periodic", data.getPath()))
	}
	if !data.AuthenticationTimerReauthenticateServer.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/authentication/timer/reauthenticate/value/server/server", data.getPath()))
	}
	if !data.SpanningTreeBpduguardEnable.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/spanning-tree/bpduguard/enable", data.getPath()))
	}
	if !data.SpanningTreeServicePolicy.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/spanning-tree/service-policy", data.getPath()))
	}
	if !data.SpanningTreePortfastDisable.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/spanning-tree/portfast/disable", data.getPath()))
	}
	if !data.SpanningTreePortfastEdge.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/spanning-tree/portfast/edge", data.getPath()))
	}
	if !data.SpanningTreePortfastNetwork.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/spanning-tree/portfast/network", data.getPath()))
	}
	if !data.StormControlActionShutdown.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/storm-control/action/shutdown", data.getPath()))
	}
	if !data.StormControlActionTrap.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/storm-control/action/trap", data.getPath()))
	}
	if !data.IpDhcpSnoopingTrust.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ip/dhcp/snooping/trust", data.getPath()))
	}

	if !data.SubscriberAgingInactivityTimerProbe.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/subscriber/aging/timer-probe/inactivity-timer/inactivity-timer/probe", data.getPath()))
	}
	if !data.SubscriberAgingProbe.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/subscriber/aging/timer-probe/probe/probe", data.getPath()))
	}

	if !data.CtsManualPolicyStaticTrusted.Value {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/cts/manual/policy/static/trusted", data.getPath()))
	}
	return emptyLeafsDelete
}
