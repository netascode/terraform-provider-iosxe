// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type BGPAddressFamilyIPv4VRF struct {
	Device types.String                  `tfsdk:"device"`
	Id     types.String                  `tfsdk:"id"`
	Asn    types.String                  `tfsdk:"asn"`
	AfName types.String                  `tfsdk:"af_name"`
	Vrfs   []BGPAddressFamilyIPv4VRFVrfs `tfsdk:"vrfs"`
}
type BGPAddressFamilyIPv4VRFVrfs struct {
	Name                  types.String `tfsdk:"name"`
	AdvertiseL2vpnEvpn    types.Bool   `tfsdk:"advertise_l2vpn_evpn"`
	RedistributeConnected types.Bool   `tfsdk:"redistribute_connected"`
	RedistributeStatic    types.Bool   `tfsdk:"redistribute_static"`
}

func (data BGPAddressFamilyIPv4VRF) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=%v/address-family/with-vrf/ipv4=%s", url.QueryEscape(fmt.Sprintf("%v", data.Asn.Value)), url.QueryEscape(fmt.Sprintf("%v", data.AfName.Value)))
}

// if last path element has a key -> remove it
func (data BGPAddressFamilyIPv4VRF) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data BGPAddressFamilyIPv4VRF) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.AfName.Null && !data.AfName.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"af-name", data.AfName.Value)
	}
	if len(data.Vrfs) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"vrf", []interface{}{})
		for index, item := range data.Vrfs {
			if !item.Name.Null && !item.Name.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"vrf"+"."+strconv.Itoa(index)+"."+"name", item.Name.Value)
			}
			if !item.AdvertiseL2vpnEvpn.Null && !item.AdvertiseL2vpnEvpn.Unknown {
				if item.AdvertiseL2vpnEvpn.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"vrf"+"."+strconv.Itoa(index)+"."+"ipv4-unicast.advertise.l2vpn.evpn", map[string]string{})
				}
			}
			if !item.RedistributeConnected.Null && !item.RedistributeConnected.Unknown {
				if item.RedistributeConnected.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"vrf"+"."+strconv.Itoa(index)+"."+"ipv4-unicast.redistribute-vrf.connected", map[string]string{})
				}
			}
			if !item.RedistributeStatic.Null && !item.RedistributeStatic.Unknown {
				if item.RedistributeStatic.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"vrf"+"."+strconv.Itoa(index)+"."+"ipv4-unicast.redistribute-vrf.static", map[string]string{})
				}
			}
		}
	}
	return body
}

func (data *BGPAddressFamilyIPv4VRF) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "af-name"); value.Exists() {
		data.AfName.Value = value.String()
	} else {
		data.AfName.Null = true
	}
	for i := range data.Vrfs {
		keys := [...]string{"name"}
		keyValues := [...]string{data.Vrfs[i].Name.Value}

		var r gjson.Result
		res.Get(prefix + "vrf").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() {
			data.Vrfs[i].Name.Value = value.String()
		} else {
			data.Vrfs[i].Name.Null = true
		}
		if value := r.Get("ipv4-unicast.advertise.l2vpn.evpn"); value.Exists() {
			data.Vrfs[i].AdvertiseL2vpnEvpn.Value = true
		} else {
			data.Vrfs[i].AdvertiseL2vpnEvpn.Value = false
		}
		if value := r.Get("ipv4-unicast.redistribute-vrf.connected"); value.Exists() {
			data.Vrfs[i].RedistributeConnected.Value = true
		} else {
			data.Vrfs[i].RedistributeConnected.Value = false
		}
		if value := r.Get("ipv4-unicast.redistribute-vrf.static"); value.Exists() {
			data.Vrfs[i].RedistributeStatic.Value = true
		} else {
			data.Vrfs[i].RedistributeStatic.Value = false
		}
	}
}

func (data *BGPAddressFamilyIPv4VRF) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "vrf"); value.Exists() {
		data.Vrfs = make([]BGPAddressFamilyIPv4VRFVrfs, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := BGPAddressFamilyIPv4VRFVrfs{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name.Value = cValue.String()
				item.Name.Null = false
			}
			if cValue := v.Get("ipv4-unicast.advertise.l2vpn.evpn"); cValue.Exists() {
				item.AdvertiseL2vpnEvpn.Value = true
				item.AdvertiseL2vpnEvpn.Null = false
			}
			if cValue := v.Get("ipv4-unicast.redistribute-vrf.connected"); cValue.Exists() {
				item.RedistributeConnected.Value = true
				item.RedistributeConnected.Null = false
			}
			if cValue := v.Get("ipv4-unicast.redistribute-vrf.static"); cValue.Exists() {
				item.RedistributeStatic.Value = true
				item.RedistributeStatic.Null = false
			}
			data.Vrfs = append(data.Vrfs, item)
			return true
		})
	}
}

func (data *BGPAddressFamilyIPv4VRF) setUnknownValues(ctx context.Context) {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Asn.Unknown {
		data.Asn.Unknown = false
		data.Asn.Null = true
	}
	if data.AfName.Unknown {
		data.AfName.Unknown = false
		data.AfName.Null = true
	}
	for i := range data.Vrfs {
		if data.Vrfs[i].Name.Unknown {
			data.Vrfs[i].Name.Unknown = false
			data.Vrfs[i].Name.Null = true
		}
		if data.Vrfs[i].AdvertiseL2vpnEvpn.Unknown {
			data.Vrfs[i].AdvertiseL2vpnEvpn.Unknown = false
			data.Vrfs[i].AdvertiseL2vpnEvpn.Null = true
		}
		if data.Vrfs[i].RedistributeConnected.Unknown {
			data.Vrfs[i].RedistributeConnected.Unknown = false
			data.Vrfs[i].RedistributeConnected.Null = true
		}
		if data.Vrfs[i].RedistributeStatic.Unknown {
			data.Vrfs[i].RedistributeStatic.Unknown = false
			data.Vrfs[i].RedistributeStatic.Null = true
		}
	}
}

func (data *BGPAddressFamilyIPv4VRF) getDeletedListItems(ctx context.Context, state BGPAddressFamilyIPv4VRF) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Vrfs {
		stateKeyValues := [...]string{state.Vrfs[i].Name.Value}

		emptyKeys := true
		if !reflect.ValueOf(state.Vrfs[i].Name.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Vrfs {
			found = true
			if state.Vrfs[i].Name.Value != data.Vrfs[j].Name.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/vrf=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *BGPAddressFamilyIPv4VRF) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	for i := range data.Vrfs {
		keyValues := [...]string{data.Vrfs[i].Name.Value}
		if !data.Vrfs[i].AdvertiseL2vpnEvpn.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/vrf=%v/ipv4-unicast/advertise/l2vpn/evpn", data.getPath(), strings.Join(keyValues[:], ",")))
		}
	}
	return emptyLeafsDelete
}
