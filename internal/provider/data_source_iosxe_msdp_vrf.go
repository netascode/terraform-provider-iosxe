// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-restconf"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &MSDPVRFDataSource{}
	_ datasource.DataSourceWithConfigure = &MSDPVRFDataSource{}
)

func NewMSDPVRFDataSource() datasource.DataSource {
	return &MSDPVRFDataSource{}
}

type MSDPVRFDataSource struct {
	clients map[string]*restconf.Client
}

func (d *MSDPVRFDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_msdp_vrf"
}

func (d *MSDPVRFDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the MSDP VRF configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"vrf": schema.StringAttribute{
				MarkdownDescription: "",
				Required:            true,
			},
			"originator_id": schema.StringAttribute{
				MarkdownDescription: "Configure MSDP Originator ID",
				Computed:            true,
			},
			"peers": schema.ListNestedAttribute{
				MarkdownDescription: "Configure an MSDP peer",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"addr": schema.StringAttribute{
							MarkdownDescription: "",
							Computed:            true,
						},
						"remote_as": schema.Int64Attribute{
							MarkdownDescription: "Configured AS number",
							Computed:            true,
						},
						"connect_source_loopback": schema.Int64Attribute{
							MarkdownDescription: "Loopback interface",
							Computed:            true,
						},
					},
				},
			},
			"passwords": schema.ListNestedAttribute{
				MarkdownDescription: "MSDP peer on which the password is to be set",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"addr": schema.StringAttribute{
							MarkdownDescription: "",
							Computed:            true,
						},
						"encryption": schema.Int64Attribute{
							MarkdownDescription: "",
							Computed:            true,
						},
						"password": schema.StringAttribute{
							MarkdownDescription: "",
							Computed:            true,
						},
					},
				},
			},
		},
	}
}

func (d *MSDPVRFDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.clients = req.ProviderData.(map[string]*restconf.Client)
}

func (d *MSDPVRFDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config MSDPVRF

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	res, err := d.clients[config.Device.ValueString()].GetData(config.getPath())
	if res.StatusCode == 404 {
		config = MSDPVRF{Device: config.Device}
	} else {
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
			return
		}

		config.fromBody(ctx, res.Res)
	}

	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
