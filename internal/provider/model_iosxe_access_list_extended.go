// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/netascode/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type AccessListExtended struct {
	Device  types.String                `tfsdk:"device"`
	Id      types.String                `tfsdk:"id"`
	Name    types.String                `tfsdk:"name"`
	Entries []AccessListExtendedEntries `tfsdk:"entries"`
}
type AccessListExtendedEntries struct {
	Sequence                   types.Int64  `tfsdk:"sequence"`
	Remark                     types.String `tfsdk:"remark"`
	AceRuleAction              types.String `tfsdk:"ace_rule_action"`
	AceRuleProtocol            types.String `tfsdk:"ace_rule_protocol"`
	ServiceObjectGroup         types.String `tfsdk:"service_object_group"`
	SourcePrefix               types.String `tfsdk:"source_prefix"`
	SourcePrefixMask           types.String `tfsdk:"source_prefix_mask"`
	SourceAny                  types.Bool   `tfsdk:"source_any"`
	SourceHost                 types.String `tfsdk:"source_host"`
	SourceObjectGroup          types.String `tfsdk:"source_object_group"`
	SourcePortEqual            types.String `tfsdk:"source_port_equal"`
	SourcePortGreaterThan      types.String `tfsdk:"source_port_greater_than"`
	SourcePortLesserThan       types.String `tfsdk:"source_port_lesser_than"`
	SourcePortRangeFrom        types.String `tfsdk:"source_port_range_from"`
	SourcePortRangeTo          types.String `tfsdk:"source_port_range_to"`
	DestinationPrefix          types.String `tfsdk:"destination_prefix"`
	DestinationPrefixMask      types.String `tfsdk:"destination_prefix_mask"`
	DestinationAny             types.Bool   `tfsdk:"destination_any"`
	DestinationHost            types.String `tfsdk:"destination_host"`
	DestinationObjectGroup     types.String `tfsdk:"destination_object_group"`
	DestinationPortEqual       types.String `tfsdk:"destination_port_equal"`
	DestinationPortGreaterThan types.String `tfsdk:"destination_port_greater_than"`
	DestinationPortLesserThan  types.String `tfsdk:"destination_port_lesser_than"`
	DestinationPortRangeFrom   types.String `tfsdk:"destination_port_range_from"`
	DestinationPortRangeTo     types.String `tfsdk:"destination_port_range_to"`
	Ack                        types.Bool   `tfsdk:"ack"`
	Fin                        types.Bool   `tfsdk:"fin"`
	Psh                        types.Bool   `tfsdk:"psh"`
	Rst                        types.Bool   `tfsdk:"rst"`
	Syn                        types.Bool   `tfsdk:"syn"`
	Urg                        types.Bool   `tfsdk:"urg"`
	Established                types.Bool   `tfsdk:"established"`
	Dscp                       types.String `tfsdk:"dscp"`
	Fragments                  types.Bool   `tfsdk:"fragments"`
	Precedence                 types.String `tfsdk:"precedence"`
	Tos                        types.String `tfsdk:"tos"`
}

func (data AccessListExtended) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/ip/access-list/Cisco-IOS-XE-acl:extended=%v", url.QueryEscape(fmt.Sprintf("%v", data.Name.Value)))
}

// if last path element has a key -> remove it
func (data AccessListExtended) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data AccessListExtended) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Name.Null && !data.Name.Unknown {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"name", data.Name.Value)
	}
	if len(data.Entries) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule", []interface{}{})
		for index, item := range data.Entries {
			if !item.Sequence.Null && !item.Sequence.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"sequence", strconv.FormatInt(item.Sequence.Value, 10))
			}
			if !item.Remark.Null && !item.Remark.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"remark", item.Remark.Value)
			}
			if !item.AceRuleAction.Null && !item.AceRuleAction.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.action", item.AceRuleAction.Value)
			}
			if !item.AceRuleProtocol.Null && !item.AceRuleProtocol.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.protocol", item.AceRuleProtocol.Value)
			}
			if !item.ServiceObjectGroup.Null && !item.ServiceObjectGroup.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.object-group-str", item.ServiceObjectGroup.Value)
			}
			if !item.SourcePrefix.Null && !item.SourcePrefix.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.ipv4-address", item.SourcePrefix.Value)
			}
			if !item.SourcePrefixMask.Null && !item.SourcePrefixMask.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.mask", item.SourcePrefixMask.Value)
			}
			if !item.SourceAny.Null && !item.SourceAny.Unknown {
				if item.SourceAny.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.any", map[string]string{})
				}
			}
			if !item.SourceHost.Null && !item.SourceHost.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.host", item.SourceHost.Value)
			}
			if !item.SourceObjectGroup.Null && !item.SourceObjectGroup.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.object-group", item.SourceObjectGroup.Value)
			}
			if !item.SourcePortEqual.Null && !item.SourcePortEqual.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.src-eq", item.SourcePortEqual.Value)
			}
			if !item.SourcePortGreaterThan.Null && !item.SourcePortGreaterThan.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.src-gt", item.SourcePortGreaterThan.Value)
			}
			if !item.SourcePortLesserThan.Null && !item.SourcePortLesserThan.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.src-lt", item.SourcePortLesserThan.Value)
			}
			if !item.SourcePortRangeFrom.Null && !item.SourcePortRangeFrom.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.src-range1", item.SourcePortRangeFrom.Value)
			}
			if !item.SourcePortRangeTo.Null && !item.SourcePortRangeTo.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.src-range2", item.SourcePortRangeTo.Value)
			}
			if !item.DestinationPrefix.Null && !item.DestinationPrefix.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.dest-ipv4-address", item.DestinationPrefix.Value)
			}
			if !item.DestinationPrefixMask.Null && !item.DestinationPrefixMask.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.dest-mask", item.DestinationPrefixMask.Value)
			}
			if !item.DestinationAny.Null && !item.DestinationAny.Unknown {
				if item.DestinationAny.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.dst-any", map[string]string{})
				}
			}
			if !item.DestinationHost.Null && !item.DestinationHost.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.dst-host", item.DestinationHost.Value)
			}
			if !item.DestinationObjectGroup.Null && !item.DestinationObjectGroup.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.dst-object-group", item.DestinationObjectGroup.Value)
			}
			if !item.DestinationPortEqual.Null && !item.DestinationPortEqual.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.dst-eq", item.DestinationPortEqual.Value)
			}
			if !item.DestinationPortGreaterThan.Null && !item.DestinationPortGreaterThan.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.dst-gt", item.DestinationPortGreaterThan.Value)
			}
			if !item.DestinationPortLesserThan.Null && !item.DestinationPortLesserThan.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.dst-lt", item.DestinationPortLesserThan.Value)
			}
			if !item.DestinationPortRangeFrom.Null && !item.DestinationPortRangeFrom.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.dst-range1", item.DestinationPortRangeFrom.Value)
			}
			if !item.DestinationPortRangeTo.Null && !item.DestinationPortRangeTo.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.dst-range2", item.DestinationPortRangeTo.Value)
			}
			if !item.Ack.Null && !item.Ack.Unknown {
				if item.Ack.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.ack", map[string]string{})
				}
			}
			if !item.Fin.Null && !item.Fin.Unknown {
				if item.Fin.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.fin", map[string]string{})
				}
			}
			if !item.Psh.Null && !item.Psh.Unknown {
				if item.Psh.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.psh", map[string]string{})
				}
			}
			if !item.Rst.Null && !item.Rst.Unknown {
				if item.Rst.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.rst", map[string]string{})
				}
			}
			if !item.Syn.Null && !item.Syn.Unknown {
				if item.Syn.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.syn", map[string]string{})
				}
			}
			if !item.Urg.Null && !item.Urg.Unknown {
				if item.Urg.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.urg", map[string]string{})
				}
			}
			if !item.Established.Null && !item.Established.Unknown {
				if item.Established.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.established", map[string]string{})
				}
			}
			if !item.Dscp.Null && !item.Dscp.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.dscp", item.Dscp.Value)
			}
			if !item.Fragments.Null && !item.Fragments.Unknown {
				if item.Fragments.Value {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.fragments", map[string]string{})
				}
			}
			if !item.Precedence.Null && !item.Precedence.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.precedence", item.Precedence.Value)
			}
			if !item.Tos.Null && !item.Tos.Unknown {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"access-list-seq-rule"+"."+strconv.Itoa(index)+"."+"ace-rule.tos", item.Tos.Value)
			}
		}
	}
	return body
}

func (data *AccessListExtended) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "name"); value.Exists() {
		data.Name.Value = value.String()
	} else {
		data.Name.Null = true
	}
	for i := range data.Entries {
		keys := [...]string{"sequence"}
		keyValues := [...]string{strconv.FormatInt(data.Entries[i].Sequence.Value, 10)}

		var r gjson.Result
		res.Get(prefix + "access-list-seq-rule").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("sequence"); value.Exists() {
			data.Entries[i].Sequence.Value = value.Int()
		} else {
			data.Entries[i].Sequence.Null = true
		}
		if value := r.Get("remark"); value.Exists() {
			data.Entries[i].Remark.Value = value.String()
		} else {
			data.Entries[i].Remark.Null = true
		}
		if value := r.Get("ace-rule.action"); value.Exists() {
			data.Entries[i].AceRuleAction.Value = value.String()
		} else {
			data.Entries[i].AceRuleAction.Null = true
		}
		if value := r.Get("ace-rule.protocol"); value.Exists() {
			data.Entries[i].AceRuleProtocol.Value = value.String()
		} else {
			data.Entries[i].AceRuleProtocol.Null = true
		}
		if value := r.Get("ace-rule.object-group-str"); value.Exists() {
			data.Entries[i].ServiceObjectGroup.Value = value.String()
		} else {
			data.Entries[i].ServiceObjectGroup.Null = true
		}
		if value := r.Get("ace-rule.ipv4-address"); value.Exists() {
			data.Entries[i].SourcePrefix.Value = value.String()
		} else {
			data.Entries[i].SourcePrefix.Null = true
		}
		if value := r.Get("ace-rule.mask"); value.Exists() {
			data.Entries[i].SourcePrefixMask.Value = value.String()
		} else {
			data.Entries[i].SourcePrefixMask.Null = true
		}
		if value := r.Get("ace-rule.any"); value.Exists() {
			data.Entries[i].SourceAny.Value = true
		} else {
			data.Entries[i].SourceAny.Value = false
		}
		if value := r.Get("ace-rule.host"); value.Exists() {
			data.Entries[i].SourceHost.Value = value.String()
		} else {
			data.Entries[i].SourceHost.Null = true
		}
		if value := r.Get("ace-rule.object-group"); value.Exists() {
			data.Entries[i].SourceObjectGroup.Value = value.String()
		} else {
			data.Entries[i].SourceObjectGroup.Null = true
		}
		if value := r.Get("ace-rule.src-eq"); value.Exists() {
			data.Entries[i].SourcePortEqual.Value = value.String()
		} else {
			data.Entries[i].SourcePortEqual.Null = true
		}
		if value := r.Get("ace-rule.src-gt"); value.Exists() {
			data.Entries[i].SourcePortGreaterThan.Value = value.String()
		} else {
			data.Entries[i].SourcePortGreaterThan.Null = true
		}
		if value := r.Get("ace-rule.src-lt"); value.Exists() {
			data.Entries[i].SourcePortLesserThan.Value = value.String()
		} else {
			data.Entries[i].SourcePortLesserThan.Null = true
		}
		if value := r.Get("ace-rule.src-range1"); value.Exists() {
			data.Entries[i].SourcePortRangeFrom.Value = value.String()
		} else {
			data.Entries[i].SourcePortRangeFrom.Null = true
		}
		if value := r.Get("ace-rule.src-range2"); value.Exists() {
			data.Entries[i].SourcePortRangeTo.Value = value.String()
		} else {
			data.Entries[i].SourcePortRangeTo.Null = true
		}
		if value := r.Get("ace-rule.dest-ipv4-address"); value.Exists() {
			data.Entries[i].DestinationPrefix.Value = value.String()
		} else {
			data.Entries[i].DestinationPrefix.Null = true
		}
		if value := r.Get("ace-rule.dest-mask"); value.Exists() {
			data.Entries[i].DestinationPrefixMask.Value = value.String()
		} else {
			data.Entries[i].DestinationPrefixMask.Null = true
		}
		if value := r.Get("ace-rule.dst-any"); value.Exists() {
			data.Entries[i].DestinationAny.Value = true
		} else {
			data.Entries[i].DestinationAny.Value = false
		}
		if value := r.Get("ace-rule.dst-host"); value.Exists() {
			data.Entries[i].DestinationHost.Value = value.String()
		} else {
			data.Entries[i].DestinationHost.Null = true
		}
		if value := r.Get("ace-rule.dst-object-group"); value.Exists() {
			data.Entries[i].DestinationObjectGroup.Value = value.String()
		} else {
			data.Entries[i].DestinationObjectGroup.Null = true
		}
		if value := r.Get("ace-rule.dst-eq"); value.Exists() {
			data.Entries[i].DestinationPortEqual.Value = value.String()
		} else {
			data.Entries[i].DestinationPortEqual.Null = true
		}
		if value := r.Get("ace-rule.dst-gt"); value.Exists() {
			data.Entries[i].DestinationPortGreaterThan.Value = value.String()
		} else {
			data.Entries[i].DestinationPortGreaterThan.Null = true
		}
		if value := r.Get("ace-rule.dst-lt"); value.Exists() {
			data.Entries[i].DestinationPortLesserThan.Value = value.String()
		} else {
			data.Entries[i].DestinationPortLesserThan.Null = true
		}
		if value := r.Get("ace-rule.dst-range1"); value.Exists() {
			data.Entries[i].DestinationPortRangeFrom.Value = value.String()
		} else {
			data.Entries[i].DestinationPortRangeFrom.Null = true
		}
		if value := r.Get("ace-rule.dst-range2"); value.Exists() {
			data.Entries[i].DestinationPortRangeTo.Value = value.String()
		} else {
			data.Entries[i].DestinationPortRangeTo.Null = true
		}
		if value := r.Get("ace-rule.ack"); value.Exists() {
			data.Entries[i].Ack.Value = true
		} else {
			data.Entries[i].Ack.Value = false
		}
		if value := r.Get("ace-rule.fin"); value.Exists() {
			data.Entries[i].Fin.Value = true
		} else {
			data.Entries[i].Fin.Value = false
		}
		if value := r.Get("ace-rule.psh"); value.Exists() {
			data.Entries[i].Psh.Value = true
		} else {
			data.Entries[i].Psh.Value = false
		}
		if value := r.Get("ace-rule.rst"); value.Exists() {
			data.Entries[i].Rst.Value = true
		} else {
			data.Entries[i].Rst.Value = false
		}
		if value := r.Get("ace-rule.syn"); value.Exists() {
			data.Entries[i].Syn.Value = true
		} else {
			data.Entries[i].Syn.Value = false
		}
		if value := r.Get("ace-rule.urg"); value.Exists() {
			data.Entries[i].Urg.Value = true
		} else {
			data.Entries[i].Urg.Value = false
		}
		if value := r.Get("ace-rule.established"); value.Exists() {
			data.Entries[i].Established.Value = true
		} else {
			data.Entries[i].Established.Value = false
		}
		if value := r.Get("ace-rule.dscp"); value.Exists() {
			data.Entries[i].Dscp.Value = value.String()
		} else {
			data.Entries[i].Dscp.Null = true
		}
		if value := r.Get("ace-rule.fragments"); value.Exists() {
			data.Entries[i].Fragments.Value = true
		} else {
			data.Entries[i].Fragments.Value = false
		}
		if value := r.Get("ace-rule.precedence"); value.Exists() {
			data.Entries[i].Precedence.Value = value.String()
		} else {
			data.Entries[i].Precedence.Null = true
		}
		if value := r.Get("ace-rule.tos"); value.Exists() {
			data.Entries[i].Tos.Value = value.String()
		} else {
			data.Entries[i].Tos.Null = true
		}
	}
}

func (data *AccessListExtended) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "access-list-seq-rule"); value.Exists() {
		data.Entries = make([]AccessListExtendedEntries, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := AccessListExtendedEntries{}
			if cValue := v.Get("sequence"); cValue.Exists() {
				item.Sequence.Value = cValue.Int()
				item.Sequence.Null = false
			}
			if cValue := v.Get("remark"); cValue.Exists() {
				item.Remark.Value = cValue.String()
				item.Remark.Null = false
			}
			if cValue := v.Get("ace-rule.action"); cValue.Exists() {
				item.AceRuleAction.Value = cValue.String()
				item.AceRuleAction.Null = false
			}
			if cValue := v.Get("ace-rule.protocol"); cValue.Exists() {
				item.AceRuleProtocol.Value = cValue.String()
				item.AceRuleProtocol.Null = false
			}
			if cValue := v.Get("ace-rule.object-group-str"); cValue.Exists() {
				item.ServiceObjectGroup.Value = cValue.String()
				item.ServiceObjectGroup.Null = false
			}
			if cValue := v.Get("ace-rule.ipv4-address"); cValue.Exists() {
				item.SourcePrefix.Value = cValue.String()
				item.SourcePrefix.Null = false
			}
			if cValue := v.Get("ace-rule.mask"); cValue.Exists() {
				item.SourcePrefixMask.Value = cValue.String()
				item.SourcePrefixMask.Null = false
			}
			if cValue := v.Get("ace-rule.any"); cValue.Exists() {
				item.SourceAny.Value = true
				item.SourceAny.Null = false
			}
			if cValue := v.Get("ace-rule.host"); cValue.Exists() {
				item.SourceHost.Value = cValue.String()
				item.SourceHost.Null = false
			}
			if cValue := v.Get("ace-rule.object-group"); cValue.Exists() {
				item.SourceObjectGroup.Value = cValue.String()
				item.SourceObjectGroup.Null = false
			}
			if cValue := v.Get("ace-rule.src-eq"); cValue.Exists() {
				item.SourcePortEqual.Value = cValue.String()
				item.SourcePortEqual.Null = false
			}
			if cValue := v.Get("ace-rule.src-gt"); cValue.Exists() {
				item.SourcePortGreaterThan.Value = cValue.String()
				item.SourcePortGreaterThan.Null = false
			}
			if cValue := v.Get("ace-rule.src-lt"); cValue.Exists() {
				item.SourcePortLesserThan.Value = cValue.String()
				item.SourcePortLesserThan.Null = false
			}
			if cValue := v.Get("ace-rule.src-range1"); cValue.Exists() {
				item.SourcePortRangeFrom.Value = cValue.String()
				item.SourcePortRangeFrom.Null = false
			}
			if cValue := v.Get("ace-rule.src-range2"); cValue.Exists() {
				item.SourcePortRangeTo.Value = cValue.String()
				item.SourcePortRangeTo.Null = false
			}
			if cValue := v.Get("ace-rule.dest-ipv4-address"); cValue.Exists() {
				item.DestinationPrefix.Value = cValue.String()
				item.DestinationPrefix.Null = false
			}
			if cValue := v.Get("ace-rule.dest-mask"); cValue.Exists() {
				item.DestinationPrefixMask.Value = cValue.String()
				item.DestinationPrefixMask.Null = false
			}
			if cValue := v.Get("ace-rule.dst-any"); cValue.Exists() {
				item.DestinationAny.Value = true
				item.DestinationAny.Null = false
			}
			if cValue := v.Get("ace-rule.dst-host"); cValue.Exists() {
				item.DestinationHost.Value = cValue.String()
				item.DestinationHost.Null = false
			}
			if cValue := v.Get("ace-rule.dst-object-group"); cValue.Exists() {
				item.DestinationObjectGroup.Value = cValue.String()
				item.DestinationObjectGroup.Null = false
			}
			if cValue := v.Get("ace-rule.dst-eq"); cValue.Exists() {
				item.DestinationPortEqual.Value = cValue.String()
				item.DestinationPortEqual.Null = false
			}
			if cValue := v.Get("ace-rule.dst-gt"); cValue.Exists() {
				item.DestinationPortGreaterThan.Value = cValue.String()
				item.DestinationPortGreaterThan.Null = false
			}
			if cValue := v.Get("ace-rule.dst-lt"); cValue.Exists() {
				item.DestinationPortLesserThan.Value = cValue.String()
				item.DestinationPortLesserThan.Null = false
			}
			if cValue := v.Get("ace-rule.dst-range1"); cValue.Exists() {
				item.DestinationPortRangeFrom.Value = cValue.String()
				item.DestinationPortRangeFrom.Null = false
			}
			if cValue := v.Get("ace-rule.dst-range2"); cValue.Exists() {
				item.DestinationPortRangeTo.Value = cValue.String()
				item.DestinationPortRangeTo.Null = false
			}
			if cValue := v.Get("ace-rule.ack"); cValue.Exists() {
				item.Ack.Value = true
				item.Ack.Null = false
			}
			if cValue := v.Get("ace-rule.fin"); cValue.Exists() {
				item.Fin.Value = true
				item.Fin.Null = false
			}
			if cValue := v.Get("ace-rule.psh"); cValue.Exists() {
				item.Psh.Value = true
				item.Psh.Null = false
			}
			if cValue := v.Get("ace-rule.rst"); cValue.Exists() {
				item.Rst.Value = true
				item.Rst.Null = false
			}
			if cValue := v.Get("ace-rule.syn"); cValue.Exists() {
				item.Syn.Value = true
				item.Syn.Null = false
			}
			if cValue := v.Get("ace-rule.urg"); cValue.Exists() {
				item.Urg.Value = true
				item.Urg.Null = false
			}
			if cValue := v.Get("ace-rule.established"); cValue.Exists() {
				item.Established.Value = true
				item.Established.Null = false
			}
			if cValue := v.Get("ace-rule.dscp"); cValue.Exists() {
				item.Dscp.Value = cValue.String()
				item.Dscp.Null = false
			}
			if cValue := v.Get("ace-rule.fragments"); cValue.Exists() {
				item.Fragments.Value = true
				item.Fragments.Null = false
			}
			if cValue := v.Get("ace-rule.precedence"); cValue.Exists() {
				item.Precedence.Value = cValue.String()
				item.Precedence.Null = false
			}
			if cValue := v.Get("ace-rule.tos"); cValue.Exists() {
				item.Tos.Value = cValue.String()
				item.Tos.Null = false
			}
			data.Entries = append(data.Entries, item)
			return true
		})
	}
}

func (data *AccessListExtended) setUnknownValues(ctx context.Context) {
	if data.Device.Unknown {
		data.Device.Unknown = false
		data.Device.Null = true
	}
	if data.Id.Unknown {
		data.Id.Unknown = false
		data.Id.Null = true
	}
	if data.Name.Unknown {
		data.Name.Unknown = false
		data.Name.Null = true
	}
	for i := range data.Entries {
		if data.Entries[i].Sequence.Unknown {
			data.Entries[i].Sequence.Unknown = false
			data.Entries[i].Sequence.Null = true
		}
		if data.Entries[i].Remark.Unknown {
			data.Entries[i].Remark.Unknown = false
			data.Entries[i].Remark.Null = true
		}
		if data.Entries[i].AceRuleAction.Unknown {
			data.Entries[i].AceRuleAction.Unknown = false
			data.Entries[i].AceRuleAction.Null = true
		}
		if data.Entries[i].AceRuleProtocol.Unknown {
			data.Entries[i].AceRuleProtocol.Unknown = false
			data.Entries[i].AceRuleProtocol.Null = true
		}
		if data.Entries[i].ServiceObjectGroup.Unknown {
			data.Entries[i].ServiceObjectGroup.Unknown = false
			data.Entries[i].ServiceObjectGroup.Null = true
		}
		if data.Entries[i].SourcePrefix.Unknown {
			data.Entries[i].SourcePrefix.Unknown = false
			data.Entries[i].SourcePrefix.Null = true
		}
		if data.Entries[i].SourcePrefixMask.Unknown {
			data.Entries[i].SourcePrefixMask.Unknown = false
			data.Entries[i].SourcePrefixMask.Null = true
		}
		if data.Entries[i].SourceAny.Unknown {
			data.Entries[i].SourceAny.Unknown = false
			data.Entries[i].SourceAny.Null = true
		}
		if data.Entries[i].SourceHost.Unknown {
			data.Entries[i].SourceHost.Unknown = false
			data.Entries[i].SourceHost.Null = true
		}
		if data.Entries[i].SourceObjectGroup.Unknown {
			data.Entries[i].SourceObjectGroup.Unknown = false
			data.Entries[i].SourceObjectGroup.Null = true
		}
		if data.Entries[i].SourcePortEqual.Unknown {
			data.Entries[i].SourcePortEqual.Unknown = false
			data.Entries[i].SourcePortEqual.Null = true
		}
		if data.Entries[i].SourcePortGreaterThan.Unknown {
			data.Entries[i].SourcePortGreaterThan.Unknown = false
			data.Entries[i].SourcePortGreaterThan.Null = true
		}
		if data.Entries[i].SourcePortLesserThan.Unknown {
			data.Entries[i].SourcePortLesserThan.Unknown = false
			data.Entries[i].SourcePortLesserThan.Null = true
		}
		if data.Entries[i].SourcePortRangeFrom.Unknown {
			data.Entries[i].SourcePortRangeFrom.Unknown = false
			data.Entries[i].SourcePortRangeFrom.Null = true
		}
		if data.Entries[i].SourcePortRangeTo.Unknown {
			data.Entries[i].SourcePortRangeTo.Unknown = false
			data.Entries[i].SourcePortRangeTo.Null = true
		}
		if data.Entries[i].DestinationPrefix.Unknown {
			data.Entries[i].DestinationPrefix.Unknown = false
			data.Entries[i].DestinationPrefix.Null = true
		}
		if data.Entries[i].DestinationPrefixMask.Unknown {
			data.Entries[i].DestinationPrefixMask.Unknown = false
			data.Entries[i].DestinationPrefixMask.Null = true
		}
		if data.Entries[i].DestinationAny.Unknown {
			data.Entries[i].DestinationAny.Unknown = false
			data.Entries[i].DestinationAny.Null = true
		}
		if data.Entries[i].DestinationHost.Unknown {
			data.Entries[i].DestinationHost.Unknown = false
			data.Entries[i].DestinationHost.Null = true
		}
		if data.Entries[i].DestinationObjectGroup.Unknown {
			data.Entries[i].DestinationObjectGroup.Unknown = false
			data.Entries[i].DestinationObjectGroup.Null = true
		}
		if data.Entries[i].DestinationPortEqual.Unknown {
			data.Entries[i].DestinationPortEqual.Unknown = false
			data.Entries[i].DestinationPortEqual.Null = true
		}
		if data.Entries[i].DestinationPortGreaterThan.Unknown {
			data.Entries[i].DestinationPortGreaterThan.Unknown = false
			data.Entries[i].DestinationPortGreaterThan.Null = true
		}
		if data.Entries[i].DestinationPortLesserThan.Unknown {
			data.Entries[i].DestinationPortLesserThan.Unknown = false
			data.Entries[i].DestinationPortLesserThan.Null = true
		}
		if data.Entries[i].DestinationPortRangeFrom.Unknown {
			data.Entries[i].DestinationPortRangeFrom.Unknown = false
			data.Entries[i].DestinationPortRangeFrom.Null = true
		}
		if data.Entries[i].DestinationPortRangeTo.Unknown {
			data.Entries[i].DestinationPortRangeTo.Unknown = false
			data.Entries[i].DestinationPortRangeTo.Null = true
		}
		if data.Entries[i].Ack.Unknown {
			data.Entries[i].Ack.Unknown = false
			data.Entries[i].Ack.Null = true
		}
		if data.Entries[i].Fin.Unknown {
			data.Entries[i].Fin.Unknown = false
			data.Entries[i].Fin.Null = true
		}
		if data.Entries[i].Psh.Unknown {
			data.Entries[i].Psh.Unknown = false
			data.Entries[i].Psh.Null = true
		}
		if data.Entries[i].Rst.Unknown {
			data.Entries[i].Rst.Unknown = false
			data.Entries[i].Rst.Null = true
		}
		if data.Entries[i].Syn.Unknown {
			data.Entries[i].Syn.Unknown = false
			data.Entries[i].Syn.Null = true
		}
		if data.Entries[i].Urg.Unknown {
			data.Entries[i].Urg.Unknown = false
			data.Entries[i].Urg.Null = true
		}
		if data.Entries[i].Established.Unknown {
			data.Entries[i].Established.Unknown = false
			data.Entries[i].Established.Null = true
		}
		if data.Entries[i].Dscp.Unknown {
			data.Entries[i].Dscp.Unknown = false
			data.Entries[i].Dscp.Null = true
		}
		if data.Entries[i].Fragments.Unknown {
			data.Entries[i].Fragments.Unknown = false
			data.Entries[i].Fragments.Null = true
		}
		if data.Entries[i].Precedence.Unknown {
			data.Entries[i].Precedence.Unknown = false
			data.Entries[i].Precedence.Null = true
		}
		if data.Entries[i].Tos.Unknown {
			data.Entries[i].Tos.Unknown = false
			data.Entries[i].Tos.Null = true
		}
	}
}

func (data *AccessListExtended) getDeletedListItems(ctx context.Context, state AccessListExtended) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Entries {
		stateKeyValues := [...]string{strconv.FormatInt(state.Entries[i].Sequence.Value, 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.Entries[i].Sequence.Value).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Entries {
			found = true
			if state.Entries[i].Sequence.Value != data.Entries[j].Sequence.Value {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/access-list-seq-rule=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *AccessListExtended) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	for i := range data.Entries {
		keyValues := [...]string{strconv.FormatInt(data.Entries[i].Sequence.Value, 10)}
		if !data.Entries[i].SourceAny.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/access-list-seq-rule=%v/ace-rule/source-choice/any-case/any", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Entries[i].DestinationAny.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/access-list-seq-rule=%v/ace-rule/destination-choice/any-case/dst-any", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Entries[i].Ack.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/access-list-seq-rule=%v/ace-rule/ack", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Entries[i].Fin.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/access-list-seq-rule=%v/ace-rule/fin", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Entries[i].Psh.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/access-list-seq-rule=%v/ace-rule/psh", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Entries[i].Rst.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/access-list-seq-rule=%v/ace-rule/rst", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Entries[i].Syn.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/access-list-seq-rule=%v/ace-rule/syn", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Entries[i].Urg.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/access-list-seq-rule=%v/ace-rule/urg", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Entries[i].Established.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/access-list-seq-rule=%v/ace-rule/established", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Entries[i].Fragments.Value {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/access-list-seq-rule=%v/ace-rule/fragments", data.getPath(), strings.Join(keyValues[:], ",")))
		}
	}
	return emptyLeafsDelete
}
