// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/tfsdk"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

type dataSourceSNMPServerType struct{}

func (t dataSourceSNMPServerType) GetSchema(ctx context.Context) (tfsdk.Schema, diag.Diagnostics) {
	return tfsdk.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the SNMP Server configuration.",

		Attributes: map[string]tfsdk.Attribute{
			"device": {
				MarkdownDescription: "A device name from the provider configuration.",
				Type:                types.StringType,
				Optional:            true,
			},
			"id": {
				MarkdownDescription: "The path of the retrieved object.",
				Type:                types.StringType,
				Computed:            true,
			},
			"chassis_id": {
				MarkdownDescription: "String to uniquely identify this chassis",
				Type:                types.StringType,
				Computed:            true,
			},
			"contact": {
				MarkdownDescription: "Text for mib object sysContact",
				Type:                types.StringType,
				Computed:            true,
			},
			"ifindex_persist": {
				MarkdownDescription: "Persist interface indices",
				Type:                types.BoolType,
				Computed:            true,
			},
			"location": {
				MarkdownDescription: "Text for mib object sysLocation",
				Type:                types.StringType,
				Computed:            true,
			},
			"packetsize": {
				MarkdownDescription: "Largest SNMP packet size",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"queue_length": {
				MarkdownDescription: "Message queue length for each TRAP host",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"enable_logging_getop": {
				MarkdownDescription: "Enable SNMP GET Operation logging",
				Type:                types.BoolType,
				Computed:            true,
			},
			"enable_logging_setop": {
				MarkdownDescription: "Enable SNMP SET Operation logging",
				Type:                types.BoolType,
				Computed:            true,
			},
			"enable_informs": {
				MarkdownDescription: "Enable SNMP Informs",
				Type:                types.BoolType,
				Computed:            true,
			},
			"enable_traps": {
				MarkdownDescription: "Enable SNMP Traps",
				Type:                types.BoolType,
				Computed:            true,
			},
			"enable_traps_snmp_authentication": {
				MarkdownDescription: "Enable authentication trap",
				Type:                types.BoolType,
				Computed:            true,
			},
			"enable_traps_snmp_coldstart": {
				MarkdownDescription: "Enable coldStart trap",
				Type:                types.BoolType,
				Computed:            true,
			},
			"enable_traps_snmp_linkdown": {
				MarkdownDescription: "Enable linkDown trap",
				Type:                types.BoolType,
				Computed:            true,
			},
			"enable_traps_snmp_linkup": {
				MarkdownDescription: "Enable linkUp trap",
				Type:                types.BoolType,
				Computed:            true,
			},
			"enable_traps_snmp_warmstart": {
				MarkdownDescription: "Enable warmStart trap",
				Type:                types.BoolType,
				Computed:            true,
			},
			"source_interface_informs_gigabit_ethernet": {
				MarkdownDescription: "GigabitEthernet IEEE 802.3z",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_interface_informs_ten_gigabit_ethernet": {
				MarkdownDescription: "Ten Gigabit Ethernet",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_interface_informs_forty_gigabit_ethernet": {
				MarkdownDescription: "Forty GigabitEthernet ",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_interface_informs_hundred_gig_e": {
				MarkdownDescription: "Hundred GigabitEthernet",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_interface_informs_loopback": {
				MarkdownDescription: "Loopback interface",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"source_interface_informs_port_channel": {
				MarkdownDescription: "Ethernet Channel of interfaces",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"source_interface_informs_port_channel_subinterface": {
				MarkdownDescription: "",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_interface_informs_vlan": {
				MarkdownDescription: "Iosxr Vlans",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"source_interface_traps_gigabit_ethernet": {
				MarkdownDescription: "GigabitEthernet IEEE 802.3z",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_interface_traps_ten_gigabit_ethernet": {
				MarkdownDescription: "Ten Gigabit Ethernet",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_interface_traps_forty_gigabit_ethernet": {
				MarkdownDescription: "Forty GigabitEthernet ",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_interface_traps_hundred_gig_e": {
				MarkdownDescription: "Hundred GigabitEthernet",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_interface_traps_loopback": {
				MarkdownDescription: "Loopback interface",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"source_interface_traps_port_channel": {
				MarkdownDescription: "Ethernet Channel of interfaces",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"source_interface_traps_port_channel_subinterface": {
				MarkdownDescription: "",
				Type:                types.StringType,
				Computed:            true,
			},
			"source_interface_traps_vlan": {
				MarkdownDescription: "Iosxr Vlans",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"trap_source_gigabit_ethernet": {
				MarkdownDescription: "GigabitEthernet IEEE 802.3z",
				Type:                types.StringType,
				Computed:            true,
			},
			"trap_source_ten_gigabit_ethernet": {
				MarkdownDescription: "Ten Gigabit Ethernet",
				Type:                types.StringType,
				Computed:            true,
			},
			"trap_source_forty_gigabit_ethernet": {
				MarkdownDescription: "Forty GigabitEthernet ",
				Type:                types.StringType,
				Computed:            true,
			},
			"trap_source_hundred_gig_e": {
				MarkdownDescription: "Hundred GigabitEthernet",
				Type:                types.StringType,
				Computed:            true,
			},
			"trap_source_loopback": {
				MarkdownDescription: "Loopback interface",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"trap_source_port_channel": {
				MarkdownDescription: "Ethernet Channel of interfaces",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"trap_source_port_channel_subinterface": {
				MarkdownDescription: "",
				Type:                types.StringType,
				Computed:            true,
			},
			"trap_source_vlan": {
				MarkdownDescription: "Iosxr Vlans",
				Type:                types.Int64Type,
				Computed:            true,
			},
			"snmp_communities": {
				MarkdownDescription: "Enable SNMP; set community string and access privs",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"name": {
						MarkdownDescription: "",
						Type:                types.StringType,
						Computed:            true,
					},
					"view": {
						MarkdownDescription: "Restrict this community to a named MIB view",
						Type:                types.StringType,
						Computed:            true,
					},
					"permission": {
						MarkdownDescription: "",
						Type:                types.StringType,
						Computed:            true,
					},
					"ipv6": {
						MarkdownDescription: "Specify IPv6 Named Access-List",
						Type:                types.StringType,
						Computed:            true,
					},
					"access_list_name": {
						MarkdownDescription: "Access-list name",
						Type:                types.StringType,
						Computed:            true,
					},
				}),
			},
			"contexts": {
				MarkdownDescription: "Create/Delete a context apart from default",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"name": {
						MarkdownDescription: "",
						Type:                types.StringType,
						Computed:            true,
					},
				}),
			},
			"views": {
				MarkdownDescription: "Define an SNMPv2 MIB view",
				Computed:            true,
				Attributes: tfsdk.ListNestedAttributes(map[string]tfsdk.Attribute{
					"name": {
						MarkdownDescription: "",
						Type:                types.StringType,
						Computed:            true,
					},
					"mib": {
						MarkdownDescription: "",
						Type:                types.StringType,
						Computed:            true,
					},
					"inc_exl": {
						MarkdownDescription: "",
						Type:                types.StringType,
						Computed:            true,
					},
				}),
			},
		},
	}, nil
}

func (t dataSourceSNMPServerType) NewDataSource(ctx context.Context, in provider.Provider) (datasource.DataSource, diag.Diagnostics) {
	provider, diags := convertProviderType(in)

	return dataSourceSNMPServer{
		provider: provider,
	}, diags
}

type dataSourceSNMPServer struct {
	provider iosxeProvider
}

func (d dataSourceSNMPServer) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config SNMPServer

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	res, err := d.provider.clients[config.Device.Value].GetData(config.getPath())
	if res.StatusCode == 404 {
		config = SNMPServer{Device: config.Device}
	} else {
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
			return
		}

		config.fromBody(ctx, res.Res)
	}

	config.Id = types.String{Value: config.getPath()}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
